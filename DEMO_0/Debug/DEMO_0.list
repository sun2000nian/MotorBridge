
DEMO_0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006404  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000140  08006594  08006594  00016594  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080066d4  080066d4  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  080066d4  080066d4  000166d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080066dc  080066dc  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080066dc  080066dc  000166dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  080066e4  080066e4  000166e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080066ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          00004cbc  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20004d30  20004d30  00020074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   00030f57  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000503a  00000000  00000000  00050ffb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013f8  00000000  00000000  00056038  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001270  00000000  00000000  00057430  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000089c6  00000000  00000000  000586a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017941  00000000  00000000  00061066  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e27c7  00000000  00000000  000789a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0015b16e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006b04  00000000  00000000  0015b1c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800657c 	.word	0x0800657c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	0800657c 	.word	0x0800657c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b96e 	b.w	80004d4 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	468c      	mov	ip, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	f040 8083 	bne.w	8000326 <__udivmoddi4+0x116>
 8000220:	428a      	cmp	r2, r1
 8000222:	4617      	mov	r7, r2
 8000224:	d947      	bls.n	80002b6 <__udivmoddi4+0xa6>
 8000226:	fab2 f282 	clz	r2, r2
 800022a:	b142      	cbz	r2, 800023e <__udivmoddi4+0x2e>
 800022c:	f1c2 0020 	rsb	r0, r2, #32
 8000230:	fa24 f000 	lsr.w	r0, r4, r0
 8000234:	4091      	lsls	r1, r2
 8000236:	4097      	lsls	r7, r2
 8000238:	ea40 0c01 	orr.w	ip, r0, r1
 800023c:	4094      	lsls	r4, r2
 800023e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000242:	0c23      	lsrs	r3, r4, #16
 8000244:	fbbc f6f8 	udiv	r6, ip, r8
 8000248:	fa1f fe87 	uxth.w	lr, r7
 800024c:	fb08 c116 	mls	r1, r8, r6, ip
 8000250:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000254:	fb06 f10e 	mul.w	r1, r6, lr
 8000258:	4299      	cmp	r1, r3
 800025a:	d909      	bls.n	8000270 <__udivmoddi4+0x60>
 800025c:	18fb      	adds	r3, r7, r3
 800025e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000262:	f080 8119 	bcs.w	8000498 <__udivmoddi4+0x288>
 8000266:	4299      	cmp	r1, r3
 8000268:	f240 8116 	bls.w	8000498 <__udivmoddi4+0x288>
 800026c:	3e02      	subs	r6, #2
 800026e:	443b      	add	r3, r7
 8000270:	1a5b      	subs	r3, r3, r1
 8000272:	b2a4      	uxth	r4, r4
 8000274:	fbb3 f0f8 	udiv	r0, r3, r8
 8000278:	fb08 3310 	mls	r3, r8, r0, r3
 800027c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000280:	fb00 fe0e 	mul.w	lr, r0, lr
 8000284:	45a6      	cmp	lr, r4
 8000286:	d909      	bls.n	800029c <__udivmoddi4+0x8c>
 8000288:	193c      	adds	r4, r7, r4
 800028a:	f100 33ff 	add.w	r3, r0, #4294967295
 800028e:	f080 8105 	bcs.w	800049c <__udivmoddi4+0x28c>
 8000292:	45a6      	cmp	lr, r4
 8000294:	f240 8102 	bls.w	800049c <__udivmoddi4+0x28c>
 8000298:	3802      	subs	r0, #2
 800029a:	443c      	add	r4, r7
 800029c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002a0:	eba4 040e 	sub.w	r4, r4, lr
 80002a4:	2600      	movs	r6, #0
 80002a6:	b11d      	cbz	r5, 80002b0 <__udivmoddi4+0xa0>
 80002a8:	40d4      	lsrs	r4, r2
 80002aa:	2300      	movs	r3, #0
 80002ac:	e9c5 4300 	strd	r4, r3, [r5]
 80002b0:	4631      	mov	r1, r6
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	b902      	cbnz	r2, 80002ba <__udivmoddi4+0xaa>
 80002b8:	deff      	udf	#255	; 0xff
 80002ba:	fab2 f282 	clz	r2, r2
 80002be:	2a00      	cmp	r2, #0
 80002c0:	d150      	bne.n	8000364 <__udivmoddi4+0x154>
 80002c2:	1bcb      	subs	r3, r1, r7
 80002c4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002c8:	fa1f f887 	uxth.w	r8, r7
 80002cc:	2601      	movs	r6, #1
 80002ce:	fbb3 fcfe 	udiv	ip, r3, lr
 80002d2:	0c21      	lsrs	r1, r4, #16
 80002d4:	fb0e 331c 	mls	r3, lr, ip, r3
 80002d8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002dc:	fb08 f30c 	mul.w	r3, r8, ip
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d907      	bls.n	80002f4 <__udivmoddi4+0xe4>
 80002e4:	1879      	adds	r1, r7, r1
 80002e6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002ea:	d202      	bcs.n	80002f2 <__udivmoddi4+0xe2>
 80002ec:	428b      	cmp	r3, r1
 80002ee:	f200 80e9 	bhi.w	80004c4 <__udivmoddi4+0x2b4>
 80002f2:	4684      	mov	ip, r0
 80002f4:	1ac9      	subs	r1, r1, r3
 80002f6:	b2a3      	uxth	r3, r4
 80002f8:	fbb1 f0fe 	udiv	r0, r1, lr
 80002fc:	fb0e 1110 	mls	r1, lr, r0, r1
 8000300:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000304:	fb08 f800 	mul.w	r8, r8, r0
 8000308:	45a0      	cmp	r8, r4
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x10c>
 800030c:	193c      	adds	r4, r7, r4
 800030e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x10a>
 8000314:	45a0      	cmp	r8, r4
 8000316:	f200 80d9 	bhi.w	80004cc <__udivmoddi4+0x2bc>
 800031a:	4618      	mov	r0, r3
 800031c:	eba4 0408 	sub.w	r4, r4, r8
 8000320:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000324:	e7bf      	b.n	80002a6 <__udivmoddi4+0x96>
 8000326:	428b      	cmp	r3, r1
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x12e>
 800032a:	2d00      	cmp	r5, #0
 800032c:	f000 80b1 	beq.w	8000492 <__udivmoddi4+0x282>
 8000330:	2600      	movs	r6, #0
 8000332:	e9c5 0100 	strd	r0, r1, [r5]
 8000336:	4630      	mov	r0, r6
 8000338:	4631      	mov	r1, r6
 800033a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800033e:	fab3 f683 	clz	r6, r3
 8000342:	2e00      	cmp	r6, #0
 8000344:	d14a      	bne.n	80003dc <__udivmoddi4+0x1cc>
 8000346:	428b      	cmp	r3, r1
 8000348:	d302      	bcc.n	8000350 <__udivmoddi4+0x140>
 800034a:	4282      	cmp	r2, r0
 800034c:	f200 80b8 	bhi.w	80004c0 <__udivmoddi4+0x2b0>
 8000350:	1a84      	subs	r4, r0, r2
 8000352:	eb61 0103 	sbc.w	r1, r1, r3
 8000356:	2001      	movs	r0, #1
 8000358:	468c      	mov	ip, r1
 800035a:	2d00      	cmp	r5, #0
 800035c:	d0a8      	beq.n	80002b0 <__udivmoddi4+0xa0>
 800035e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000362:	e7a5      	b.n	80002b0 <__udivmoddi4+0xa0>
 8000364:	f1c2 0320 	rsb	r3, r2, #32
 8000368:	fa20 f603 	lsr.w	r6, r0, r3
 800036c:	4097      	lsls	r7, r2
 800036e:	fa01 f002 	lsl.w	r0, r1, r2
 8000372:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000376:	40d9      	lsrs	r1, r3
 8000378:	4330      	orrs	r0, r6
 800037a:	0c03      	lsrs	r3, r0, #16
 800037c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000380:	fa1f f887 	uxth.w	r8, r7
 8000384:	fb0e 1116 	mls	r1, lr, r6, r1
 8000388:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800038c:	fb06 f108 	mul.w	r1, r6, r8
 8000390:	4299      	cmp	r1, r3
 8000392:	fa04 f402 	lsl.w	r4, r4, r2
 8000396:	d909      	bls.n	80003ac <__udivmoddi4+0x19c>
 8000398:	18fb      	adds	r3, r7, r3
 800039a:	f106 3cff 	add.w	ip, r6, #4294967295
 800039e:	f080 808d 	bcs.w	80004bc <__udivmoddi4+0x2ac>
 80003a2:	4299      	cmp	r1, r3
 80003a4:	f240 808a 	bls.w	80004bc <__udivmoddi4+0x2ac>
 80003a8:	3e02      	subs	r6, #2
 80003aa:	443b      	add	r3, r7
 80003ac:	1a5b      	subs	r3, r3, r1
 80003ae:	b281      	uxth	r1, r0
 80003b0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003b4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003bc:	fb00 f308 	mul.w	r3, r0, r8
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x1c4>
 80003c4:	1879      	adds	r1, r7, r1
 80003c6:	f100 3cff 	add.w	ip, r0, #4294967295
 80003ca:	d273      	bcs.n	80004b4 <__udivmoddi4+0x2a4>
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d971      	bls.n	80004b4 <__udivmoddi4+0x2a4>
 80003d0:	3802      	subs	r0, #2
 80003d2:	4439      	add	r1, r7
 80003d4:	1acb      	subs	r3, r1, r3
 80003d6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003da:	e778      	b.n	80002ce <__udivmoddi4+0xbe>
 80003dc:	f1c6 0c20 	rsb	ip, r6, #32
 80003e0:	fa03 f406 	lsl.w	r4, r3, r6
 80003e4:	fa22 f30c 	lsr.w	r3, r2, ip
 80003e8:	431c      	orrs	r4, r3
 80003ea:	fa20 f70c 	lsr.w	r7, r0, ip
 80003ee:	fa01 f306 	lsl.w	r3, r1, r6
 80003f2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003f6:	fa21 f10c 	lsr.w	r1, r1, ip
 80003fa:	431f      	orrs	r7, r3
 80003fc:	0c3b      	lsrs	r3, r7, #16
 80003fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000402:	fa1f f884 	uxth.w	r8, r4
 8000406:	fb0e 1119 	mls	r1, lr, r9, r1
 800040a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800040e:	fb09 fa08 	mul.w	sl, r9, r8
 8000412:	458a      	cmp	sl, r1
 8000414:	fa02 f206 	lsl.w	r2, r2, r6
 8000418:	fa00 f306 	lsl.w	r3, r0, r6
 800041c:	d908      	bls.n	8000430 <__udivmoddi4+0x220>
 800041e:	1861      	adds	r1, r4, r1
 8000420:	f109 30ff 	add.w	r0, r9, #4294967295
 8000424:	d248      	bcs.n	80004b8 <__udivmoddi4+0x2a8>
 8000426:	458a      	cmp	sl, r1
 8000428:	d946      	bls.n	80004b8 <__udivmoddi4+0x2a8>
 800042a:	f1a9 0902 	sub.w	r9, r9, #2
 800042e:	4421      	add	r1, r4
 8000430:	eba1 010a 	sub.w	r1, r1, sl
 8000434:	b2bf      	uxth	r7, r7
 8000436:	fbb1 f0fe 	udiv	r0, r1, lr
 800043a:	fb0e 1110 	mls	r1, lr, r0, r1
 800043e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000442:	fb00 f808 	mul.w	r8, r0, r8
 8000446:	45b8      	cmp	r8, r7
 8000448:	d907      	bls.n	800045a <__udivmoddi4+0x24a>
 800044a:	19e7      	adds	r7, r4, r7
 800044c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000450:	d22e      	bcs.n	80004b0 <__udivmoddi4+0x2a0>
 8000452:	45b8      	cmp	r8, r7
 8000454:	d92c      	bls.n	80004b0 <__udivmoddi4+0x2a0>
 8000456:	3802      	subs	r0, #2
 8000458:	4427      	add	r7, r4
 800045a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800045e:	eba7 0708 	sub.w	r7, r7, r8
 8000462:	fba0 8902 	umull	r8, r9, r0, r2
 8000466:	454f      	cmp	r7, r9
 8000468:	46c6      	mov	lr, r8
 800046a:	4649      	mov	r1, r9
 800046c:	d31a      	bcc.n	80004a4 <__udivmoddi4+0x294>
 800046e:	d017      	beq.n	80004a0 <__udivmoddi4+0x290>
 8000470:	b15d      	cbz	r5, 800048a <__udivmoddi4+0x27a>
 8000472:	ebb3 020e 	subs.w	r2, r3, lr
 8000476:	eb67 0701 	sbc.w	r7, r7, r1
 800047a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800047e:	40f2      	lsrs	r2, r6
 8000480:	ea4c 0202 	orr.w	r2, ip, r2
 8000484:	40f7      	lsrs	r7, r6
 8000486:	e9c5 2700 	strd	r2, r7, [r5]
 800048a:	2600      	movs	r6, #0
 800048c:	4631      	mov	r1, r6
 800048e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000492:	462e      	mov	r6, r5
 8000494:	4628      	mov	r0, r5
 8000496:	e70b      	b.n	80002b0 <__udivmoddi4+0xa0>
 8000498:	4606      	mov	r6, r0
 800049a:	e6e9      	b.n	8000270 <__udivmoddi4+0x60>
 800049c:	4618      	mov	r0, r3
 800049e:	e6fd      	b.n	800029c <__udivmoddi4+0x8c>
 80004a0:	4543      	cmp	r3, r8
 80004a2:	d2e5      	bcs.n	8000470 <__udivmoddi4+0x260>
 80004a4:	ebb8 0e02 	subs.w	lr, r8, r2
 80004a8:	eb69 0104 	sbc.w	r1, r9, r4
 80004ac:	3801      	subs	r0, #1
 80004ae:	e7df      	b.n	8000470 <__udivmoddi4+0x260>
 80004b0:	4608      	mov	r0, r1
 80004b2:	e7d2      	b.n	800045a <__udivmoddi4+0x24a>
 80004b4:	4660      	mov	r0, ip
 80004b6:	e78d      	b.n	80003d4 <__udivmoddi4+0x1c4>
 80004b8:	4681      	mov	r9, r0
 80004ba:	e7b9      	b.n	8000430 <__udivmoddi4+0x220>
 80004bc:	4666      	mov	r6, ip
 80004be:	e775      	b.n	80003ac <__udivmoddi4+0x19c>
 80004c0:	4630      	mov	r0, r6
 80004c2:	e74a      	b.n	800035a <__udivmoddi4+0x14a>
 80004c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c8:	4439      	add	r1, r7
 80004ca:	e713      	b.n	80002f4 <__udivmoddi4+0xe4>
 80004cc:	3802      	subs	r0, #2
 80004ce:	443c      	add	r4, r7
 80004d0:	e724      	b.n	800031c <__udivmoddi4+0x10c>
 80004d2:	bf00      	nop

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80004d8:	b480      	push	{r7}
 80004da:	b083      	sub	sp, #12
 80004dc:	af00      	add	r7, sp, #0
 80004de:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80004e0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80004e4:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80004e8:	f003 0301 	and.w	r3, r3, #1
 80004ec:	2b00      	cmp	r3, #0
 80004ee:	d009      	beq.n	8000504 <ITM_SendChar+0x2c>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80004f0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80004f4:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80004f8:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	d001      	beq.n	8000504 <ITM_SendChar+0x2c>
 8000500:	2301      	movs	r3, #1
 8000502:	e000      	b.n	8000506 <ITM_SendChar+0x2e>
 8000504:	2300      	movs	r3, #0
 8000506:	2b00      	cmp	r3, #0
 8000508:	d010      	beq.n	800052c <ITM_SendChar+0x54>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 800050a:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	2b00      	cmp	r3, #0
 8000512:	bf0c      	ite	eq
 8000514:	2301      	moveq	r3, #1
 8000516:	2300      	movne	r3, #0
 8000518:	b2db      	uxtb	r3, r3
 800051a:	2b00      	cmp	r3, #0
 800051c:	d001      	beq.n	8000522 <ITM_SendChar+0x4a>
    {
      __NOP();
 800051e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000520:	e7f3      	b.n	800050a <ITM_SendChar+0x32>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000522:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000526:	687a      	ldr	r2, [r7, #4]
 8000528:	b2d2      	uxtb	r2, r2
 800052a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 800052c:	687b      	ldr	r3, [r7, #4]
}
 800052e:	4618      	mov	r0, r3
 8000530:	370c      	adds	r7, #12
 8000532:	46bd      	mov	sp, r7
 8000534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000538:	4770      	bx	lr
	...

0800053c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000540:	f000 fb4a 	bl	8000bd8 <HAL_Init>

  /* USER CODE BEGIN Init */
  PWM_Init();
 8000544:	f002 f9a6 	bl	8002894 <_Z8PWM_Initv>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000548:	f000 f81c 	bl	8000584 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800054c:	f000 f8e8 	bl	8000720 <_ZL12MX_GPIO_Initv>
  MX_TIM2_Init();
 8000550:	f000 f88c 	bl	800066c <_ZL12MX_TIM2_Initv>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000554:	f002 fe5e 	bl	8003214 <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  HAL_TIM_Base_Start_IT(&htim2);
 8000558:	4806      	ldr	r0, [pc, #24]	; (8000574 <main+0x38>)
 800055a:	f001 fb41 	bl	8001be0 <HAL_TIM_Base_Start_IT>
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800055e:	4a06      	ldr	r2, [pc, #24]	; (8000578 <main+0x3c>)
 8000560:	2100      	movs	r1, #0
 8000562:	4806      	ldr	r0, [pc, #24]	; (800057c <main+0x40>)
 8000564:	f002 fea0 	bl	80032a8 <osThreadNew>
 8000568:	4603      	mov	r3, r0
 800056a:	4a05      	ldr	r2, [pc, #20]	; (8000580 <main+0x44>)
 800056c:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800056e:	f002 fe75 	bl	800325c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000572:	e7fe      	b.n	8000572 <main+0x36>
 8000574:	20000090 	.word	0x20000090
 8000578:	080065dc 	.word	0x080065dc
 800057c:	08000859 	.word	0x08000859
 8000580:	200000d8 	.word	0x200000d8

08000584 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b094      	sub	sp, #80	; 0x50
 8000588:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800058a:	f107 0320 	add.w	r3, r7, #32
 800058e:	2230      	movs	r2, #48	; 0x30
 8000590:	2100      	movs	r1, #0
 8000592:	4618      	mov	r0, r3
 8000594:	f005 fe76 	bl	8006284 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000598:	f107 030c 	add.w	r3, r7, #12
 800059c:	2200      	movs	r2, #0
 800059e:	601a      	str	r2, [r3, #0]
 80005a0:	605a      	str	r2, [r3, #4]
 80005a2:	609a      	str	r2, [r3, #8]
 80005a4:	60da      	str	r2, [r3, #12]
 80005a6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005a8:	2300      	movs	r3, #0
 80005aa:	60bb      	str	r3, [r7, #8]
 80005ac:	4b2d      	ldr	r3, [pc, #180]	; (8000664 <_Z18SystemClock_Configv+0xe0>)
 80005ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005b0:	4a2c      	ldr	r2, [pc, #176]	; (8000664 <_Z18SystemClock_Configv+0xe0>)
 80005b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005b6:	6413      	str	r3, [r2, #64]	; 0x40
 80005b8:	4b2a      	ldr	r3, [pc, #168]	; (8000664 <_Z18SystemClock_Configv+0xe0>)
 80005ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005c0:	60bb      	str	r3, [r7, #8]
 80005c2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005c4:	2300      	movs	r3, #0
 80005c6:	607b      	str	r3, [r7, #4]
 80005c8:	4b27      	ldr	r3, [pc, #156]	; (8000668 <_Z18SystemClock_Configv+0xe4>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	4a26      	ldr	r2, [pc, #152]	; (8000668 <_Z18SystemClock_Configv+0xe4>)
 80005ce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005d2:	6013      	str	r3, [r2, #0]
 80005d4:	4b24      	ldr	r3, [pc, #144]	; (8000668 <_Z18SystemClock_Configv+0xe4>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005dc:	607b      	str	r3, [r7, #4]
 80005de:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005e0:	2301      	movs	r3, #1
 80005e2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80005e4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80005e8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005ea:	2302      	movs	r3, #2
 80005ec:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005ee:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80005f4:	2308      	movs	r3, #8
 80005f6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80005f8:	23a8      	movs	r3, #168	; 0xa8
 80005fa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005fc:	2302      	movs	r3, #2
 80005fe:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000600:	2304      	movs	r3, #4
 8000602:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000604:	f107 0320 	add.w	r3, r7, #32
 8000608:	4618      	mov	r0, r3
 800060a:	f000 fe09 	bl	8001220 <HAL_RCC_OscConfig>
 800060e:	4603      	mov	r3, r0
 8000610:	2b00      	cmp	r3, #0
 8000612:	bf14      	ite	ne
 8000614:	2301      	movne	r3, #1
 8000616:	2300      	moveq	r3, #0
 8000618:	b2db      	uxtb	r3, r3
 800061a:	2b00      	cmp	r3, #0
 800061c:	d001      	beq.n	8000622 <_Z18SystemClock_Configv+0x9e>
  {
    Error_Handler();
 800061e:	f000 f94f 	bl	80008c0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000622:	230f      	movs	r3, #15
 8000624:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000626:	2302      	movs	r3, #2
 8000628:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800062a:	2300      	movs	r3, #0
 800062c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800062e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000632:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000634:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000638:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800063a:	f107 030c 	add.w	r3, r7, #12
 800063e:	2105      	movs	r1, #5
 8000640:	4618      	mov	r0, r3
 8000642:	f001 f865 	bl	8001710 <HAL_RCC_ClockConfig>
 8000646:	4603      	mov	r3, r0
 8000648:	2b00      	cmp	r3, #0
 800064a:	bf14      	ite	ne
 800064c:	2301      	movne	r3, #1
 800064e:	2300      	moveq	r3, #0
 8000650:	b2db      	uxtb	r3, r3
 8000652:	2b00      	cmp	r3, #0
 8000654:	d001      	beq.n	800065a <_Z18SystemClock_Configv+0xd6>
  {
    Error_Handler();
 8000656:	f000 f933 	bl	80008c0 <Error_Handler>
  }
}
 800065a:	bf00      	nop
 800065c:	3750      	adds	r7, #80	; 0x50
 800065e:	46bd      	mov	sp, r7
 8000660:	bd80      	pop	{r7, pc}
 8000662:	bf00      	nop
 8000664:	40023800 	.word	0x40023800
 8000668:	40007000 	.word	0x40007000

0800066c <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b086      	sub	sp, #24
 8000670:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000672:	f107 0308 	add.w	r3, r7, #8
 8000676:	2200      	movs	r2, #0
 8000678:	601a      	str	r2, [r3, #0]
 800067a:	605a      	str	r2, [r3, #4]
 800067c:	609a      	str	r2, [r3, #8]
 800067e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000680:	463b      	mov	r3, r7
 8000682:	2200      	movs	r2, #0
 8000684:	601a      	str	r2, [r3, #0]
 8000686:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000688:	4b24      	ldr	r3, [pc, #144]	; (800071c <_ZL12MX_TIM2_Initv+0xb0>)
 800068a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800068e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 167;
 8000690:	4b22      	ldr	r3, [pc, #136]	; (800071c <_ZL12MX_TIM2_Initv+0xb0>)
 8000692:	22a7      	movs	r2, #167	; 0xa7
 8000694:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000696:	4b21      	ldr	r3, [pc, #132]	; (800071c <_ZL12MX_TIM2_Initv+0xb0>)
 8000698:	2200      	movs	r2, #0
 800069a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99;
 800069c:	4b1f      	ldr	r3, [pc, #124]	; (800071c <_ZL12MX_TIM2_Initv+0xb0>)
 800069e:	2263      	movs	r2, #99	; 0x63
 80006a0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006a2:	4b1e      	ldr	r3, [pc, #120]	; (800071c <_ZL12MX_TIM2_Initv+0xb0>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80006a8:	4b1c      	ldr	r3, [pc, #112]	; (800071c <_ZL12MX_TIM2_Initv+0xb0>)
 80006aa:	2280      	movs	r2, #128	; 0x80
 80006ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80006ae:	481b      	ldr	r0, [pc, #108]	; (800071c <_ZL12MX_TIM2_Initv+0xb0>)
 80006b0:	f001 fa46 	bl	8001b40 <HAL_TIM_Base_Init>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	bf14      	ite	ne
 80006ba:	2301      	movne	r3, #1
 80006bc:	2300      	moveq	r3, #0
 80006be:	b2db      	uxtb	r3, r3
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d001      	beq.n	80006c8 <_ZL12MX_TIM2_Initv+0x5c>
  {
    Error_Handler();
 80006c4:	f000 f8fc 	bl	80008c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80006c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006cc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80006ce:	f107 0308 	add.w	r3, r7, #8
 80006d2:	4619      	mov	r1, r3
 80006d4:	4811      	ldr	r0, [pc, #68]	; (800071c <_ZL12MX_TIM2_Initv+0xb0>)
 80006d6:	f001 fbfb 	bl	8001ed0 <HAL_TIM_ConfigClockSource>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b00      	cmp	r3, #0
 80006de:	bf14      	ite	ne
 80006e0:	2301      	movne	r3, #1
 80006e2:	2300      	moveq	r3, #0
 80006e4:	b2db      	uxtb	r3, r3
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d001      	beq.n	80006ee <_ZL12MX_TIM2_Initv+0x82>
  {
    Error_Handler();
 80006ea:	f000 f8e9 	bl	80008c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006ee:	2300      	movs	r3, #0
 80006f0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006f2:	2300      	movs	r3, #0
 80006f4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80006f6:	463b      	mov	r3, r7
 80006f8:	4619      	mov	r1, r3
 80006fa:	4808      	ldr	r0, [pc, #32]	; (800071c <_ZL12MX_TIM2_Initv+0xb0>)
 80006fc:	f001 fe12 	bl	8002324 <HAL_TIMEx_MasterConfigSynchronization>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	bf14      	ite	ne
 8000706:	2301      	movne	r3, #1
 8000708:	2300      	moveq	r3, #0
 800070a:	b2db      	uxtb	r3, r3
 800070c:	2b00      	cmp	r3, #0
 800070e:	d001      	beq.n	8000714 <_ZL12MX_TIM2_Initv+0xa8>
  {
    Error_Handler();
 8000710:	f000 f8d6 	bl	80008c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000714:	bf00      	nop
 8000716:	3718      	adds	r7, #24
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}
 800071c:	20000090 	.word	0x20000090

08000720 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b08a      	sub	sp, #40	; 0x28
 8000724:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000726:	f107 0314 	add.w	r3, r7, #20
 800072a:	2200      	movs	r2, #0
 800072c:	601a      	str	r2, [r3, #0]
 800072e:	605a      	str	r2, [r3, #4]
 8000730:	609a      	str	r2, [r3, #8]
 8000732:	60da      	str	r2, [r3, #12]
 8000734:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000736:	2300      	movs	r3, #0
 8000738:	613b      	str	r3, [r7, #16]
 800073a:	4b44      	ldr	r3, [pc, #272]	; (800084c <_ZL12MX_GPIO_Initv+0x12c>)
 800073c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073e:	4a43      	ldr	r2, [pc, #268]	; (800084c <_ZL12MX_GPIO_Initv+0x12c>)
 8000740:	f043 0310 	orr.w	r3, r3, #16
 8000744:	6313      	str	r3, [r2, #48]	; 0x30
 8000746:	4b41      	ldr	r3, [pc, #260]	; (800084c <_ZL12MX_GPIO_Initv+0x12c>)
 8000748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074a:	f003 0310 	and.w	r3, r3, #16
 800074e:	613b      	str	r3, [r7, #16]
 8000750:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000752:	2300      	movs	r3, #0
 8000754:	60fb      	str	r3, [r7, #12]
 8000756:	4b3d      	ldr	r3, [pc, #244]	; (800084c <_ZL12MX_GPIO_Initv+0x12c>)
 8000758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075a:	4a3c      	ldr	r2, [pc, #240]	; (800084c <_ZL12MX_GPIO_Initv+0x12c>)
 800075c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000760:	6313      	str	r3, [r2, #48]	; 0x30
 8000762:	4b3a      	ldr	r3, [pc, #232]	; (800084c <_ZL12MX_GPIO_Initv+0x12c>)
 8000764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000766:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800076a:	60fb      	str	r3, [r7, #12]
 800076c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800076e:	2300      	movs	r3, #0
 8000770:	60bb      	str	r3, [r7, #8]
 8000772:	4b36      	ldr	r3, [pc, #216]	; (800084c <_ZL12MX_GPIO_Initv+0x12c>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000776:	4a35      	ldr	r2, [pc, #212]	; (800084c <_ZL12MX_GPIO_Initv+0x12c>)
 8000778:	f043 0301 	orr.w	r3, r3, #1
 800077c:	6313      	str	r3, [r2, #48]	; 0x30
 800077e:	4b33      	ldr	r3, [pc, #204]	; (800084c <_ZL12MX_GPIO_Initv+0x12c>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000782:	f003 0301 	and.w	r3, r3, #1
 8000786:	60bb      	str	r3, [r7, #8]
 8000788:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800078a:	2300      	movs	r3, #0
 800078c:	607b      	str	r3, [r7, #4]
 800078e:	4b2f      	ldr	r3, [pc, #188]	; (800084c <_ZL12MX_GPIO_Initv+0x12c>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000792:	4a2e      	ldr	r2, [pc, #184]	; (800084c <_ZL12MX_GPIO_Initv+0x12c>)
 8000794:	f043 0308 	orr.w	r3, r3, #8
 8000798:	6313      	str	r3, [r2, #48]	; 0x30
 800079a:	4b2c      	ldr	r3, [pc, #176]	; (800084c <_ZL12MX_GPIO_Initv+0x12c>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079e:	f003 0308 	and.w	r3, r3, #8
 80007a2:	607b      	str	r3, [r7, #4]
 80007a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007a6:	2300      	movs	r3, #0
 80007a8:	603b      	str	r3, [r7, #0]
 80007aa:	4b28      	ldr	r3, [pc, #160]	; (800084c <_ZL12MX_GPIO_Initv+0x12c>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ae:	4a27      	ldr	r2, [pc, #156]	; (800084c <_ZL12MX_GPIO_Initv+0x12c>)
 80007b0:	f043 0302 	orr.w	r3, r3, #2
 80007b4:	6313      	str	r3, [r2, #48]	; 0x30
 80007b6:	4b25      	ldr	r3, [pc, #148]	; (800084c <_ZL12MX_GPIO_Initv+0x12c>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ba:	f003 0302 	and.w	r3, r3, #2
 80007be:	603b      	str	r3, [r7, #0]
 80007c0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 80007c2:	2200      	movs	r2, #0
 80007c4:	210f      	movs	r1, #15
 80007c6:	4822      	ldr	r0, [pc, #136]	; (8000850 <_ZL12MX_GPIO_Initv+0x130>)
 80007c8:	f000 fcde 	bl	8001188 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_0|GPIO_PIN_1;
 80007cc:	230f      	movs	r3, #15
 80007ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007d0:	2301      	movs	r3, #1
 80007d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d4:	2300      	movs	r3, #0
 80007d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007d8:	2300      	movs	r3, #0
 80007da:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80007dc:	f107 0314 	add.w	r3, r7, #20
 80007e0:	4619      	mov	r1, r3
 80007e2:	481b      	ldr	r0, [pc, #108]	; (8000850 <_ZL12MX_GPIO_Initv+0x130>)
 80007e4:	f000 fb1c 	bl	8000e20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD2 PD3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80007e8:	230f      	movs	r3, #15
 80007ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80007ec:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 80007f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f2:	2300      	movs	r3, #0
 80007f4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80007f6:	f107 0314 	add.w	r3, r7, #20
 80007fa:	4619      	mov	r1, r3
 80007fc:	4815      	ldr	r0, [pc, #84]	; (8000854 <_ZL12MX_GPIO_Initv+0x134>)
 80007fe:	f000 fb0f 	bl	8000e20 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8000802:	2200      	movs	r2, #0
 8000804:	2105      	movs	r1, #5
 8000806:	2006      	movs	r0, #6
 8000808:	f000 fae0 	bl	8000dcc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800080c:	2006      	movs	r0, #6
 800080e:	f000 faf9 	bl	8000e04 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 8000812:	2200      	movs	r2, #0
 8000814:	2105      	movs	r1, #5
 8000816:	2007      	movs	r0, #7
 8000818:	f000 fad8 	bl	8000dcc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800081c:	2007      	movs	r0, #7
 800081e:	f000 faf1 	bl	8000e04 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 8000822:	2200      	movs	r2, #0
 8000824:	2105      	movs	r1, #5
 8000826:	2008      	movs	r0, #8
 8000828:	f000 fad0 	bl	8000dcc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 800082c:	2008      	movs	r0, #8
 800082e:	f000 fae9 	bl	8000e04 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 8000832:	2200      	movs	r2, #0
 8000834:	2105      	movs	r1, #5
 8000836:	2009      	movs	r0, #9
 8000838:	f000 fac8 	bl	8000dcc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 800083c:	2009      	movs	r0, #9
 800083e:	f000 fae1 	bl	8000e04 <HAL_NVIC_EnableIRQ>

}
 8000842:	bf00      	nop
 8000844:	3728      	adds	r7, #40	; 0x28
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	40023800 	.word	0x40023800
 8000850:	40021000 	.word	0x40021000
 8000854:	40020c00 	.word	0x40020c00

08000858 <_Z16StartDefaultTaskPv>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b082      	sub	sp, #8
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
	static int temp=0;
  for(;;)
  {
	  ITM_SendChar('H');
 8000860:	2048      	movs	r0, #72	; 0x48
 8000862:	f7ff fe39 	bl	80004d8 <ITM_SendChar>
	  ITM_SendChar('e');
 8000866:	2065      	movs	r0, #101	; 0x65
 8000868:	f7ff fe36 	bl	80004d8 <ITM_SendChar>
	  ITM_SendChar('l');
 800086c:	206c      	movs	r0, #108	; 0x6c
 800086e:	f7ff fe33 	bl	80004d8 <ITM_SendChar>
	  ITM_SendChar('l');
 8000872:	206c      	movs	r0, #108	; 0x6c
 8000874:	f7ff fe30 	bl	80004d8 <ITM_SendChar>
	  ITM_SendChar('o');
 8000878:	206f      	movs	r0, #111	; 0x6f
 800087a:	f7ff fe2d 	bl	80004d8 <ITM_SendChar>
	  ITM_SendChar('\n');
 800087e:	200a      	movs	r0, #10
 8000880:	f7ff fe2a 	bl	80004d8 <ITM_SendChar>
	  //motor.SetPosition(temp+=1281);
    osDelay(100);
 8000884:	2064      	movs	r0, #100	; 0x64
 8000886:	f002 fdce 	bl	8003426 <osDelay>
	  ITM_SendChar('H');
 800088a:	e7e9      	b.n	8000860 <_Z16StartDefaultTaskPv+0x8>

0800088c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b082      	sub	sp, #8
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	4a08      	ldr	r2, [pc, #32]	; (80008bc <HAL_TIM_PeriodElapsedCallback+0x30>)
 800089a:	4293      	cmp	r3, r2
 800089c:	d102      	bne.n	80008a4 <HAL_TIM_PeriodElapsedCallback+0x18>
    HAL_IncTick();
 800089e:	f000 f9bd 	bl	8000c1c <HAL_IncTick>
  /* USER CODE BEGIN Callback 1 */
  else if(htim->Instance==TIM2){
	  PWM_Update();
  }
  /* USER CODE END Callback 1 */
}
 80008a2:	e006      	b.n	80008b2 <HAL_TIM_PeriodElapsedCallback+0x26>
  else if(htim->Instance==TIM2){
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80008ac:	d101      	bne.n	80008b2 <HAL_TIM_PeriodElapsedCallback+0x26>
	  PWM_Update();
 80008ae:	f002 f803 	bl	80028b8 <_Z10PWM_Updatev>
}
 80008b2:	bf00      	nop
 80008b4:	3708      	adds	r7, #8
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	bf00      	nop
 80008bc:	40010000 	.word	0x40010000

080008c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008c0:	b480      	push	{r7}
 80008c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008c4:	b672      	cpsid	i
}
 80008c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008c8:	e7fe      	b.n	80008c8 <Error_Handler+0x8>
	...

080008cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b082      	sub	sp, #8
 80008d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008d2:	2300      	movs	r3, #0
 80008d4:	607b      	str	r3, [r7, #4]
 80008d6:	4b12      	ldr	r3, [pc, #72]	; (8000920 <HAL_MspInit+0x54>)
 80008d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008da:	4a11      	ldr	r2, [pc, #68]	; (8000920 <HAL_MspInit+0x54>)
 80008dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008e0:	6453      	str	r3, [r2, #68]	; 0x44
 80008e2:	4b0f      	ldr	r3, [pc, #60]	; (8000920 <HAL_MspInit+0x54>)
 80008e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008ea:	607b      	str	r3, [r7, #4]
 80008ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008ee:	2300      	movs	r3, #0
 80008f0:	603b      	str	r3, [r7, #0]
 80008f2:	4b0b      	ldr	r3, [pc, #44]	; (8000920 <HAL_MspInit+0x54>)
 80008f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008f6:	4a0a      	ldr	r2, [pc, #40]	; (8000920 <HAL_MspInit+0x54>)
 80008f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008fc:	6413      	str	r3, [r2, #64]	; 0x40
 80008fe:	4b08      	ldr	r3, [pc, #32]	; (8000920 <HAL_MspInit+0x54>)
 8000900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000902:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000906:	603b      	str	r3, [r7, #0]
 8000908:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800090a:	2200      	movs	r2, #0
 800090c:	210f      	movs	r1, #15
 800090e:	f06f 0001 	mvn.w	r0, #1
 8000912:	f000 fa5b 	bl	8000dcc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000916:	bf00      	nop
 8000918:	3708      	adds	r7, #8
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	40023800 	.word	0x40023800

08000924 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b084      	sub	sp, #16
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000934:	d115      	bne.n	8000962 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000936:	2300      	movs	r3, #0
 8000938:	60fb      	str	r3, [r7, #12]
 800093a:	4b0c      	ldr	r3, [pc, #48]	; (800096c <HAL_TIM_Base_MspInit+0x48>)
 800093c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800093e:	4a0b      	ldr	r2, [pc, #44]	; (800096c <HAL_TIM_Base_MspInit+0x48>)
 8000940:	f043 0301 	orr.w	r3, r3, #1
 8000944:	6413      	str	r3, [r2, #64]	; 0x40
 8000946:	4b09      	ldr	r3, [pc, #36]	; (800096c <HAL_TIM_Base_MspInit+0x48>)
 8000948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800094a:	f003 0301 	and.w	r3, r3, #1
 800094e:	60fb      	str	r3, [r7, #12]
 8000950:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8000952:	2200      	movs	r2, #0
 8000954:	2105      	movs	r1, #5
 8000956:	201c      	movs	r0, #28
 8000958:	f000 fa38 	bl	8000dcc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800095c:	201c      	movs	r0, #28
 800095e:	f000 fa51 	bl	8000e04 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000962:	bf00      	nop
 8000964:	3710      	adds	r7, #16
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	40023800 	.word	0x40023800

08000970 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b08c      	sub	sp, #48	; 0x30
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000978:	2300      	movs	r3, #0
 800097a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800097c:	2300      	movs	r3, #0
 800097e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8000980:	2200      	movs	r2, #0
 8000982:	6879      	ldr	r1, [r7, #4]
 8000984:	2019      	movs	r0, #25
 8000986:	f000 fa21 	bl	8000dcc <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800098a:	2019      	movs	r0, #25
 800098c:	f000 fa3a 	bl	8000e04 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000990:	2300      	movs	r3, #0
 8000992:	60fb      	str	r3, [r7, #12]
 8000994:	4b1f      	ldr	r3, [pc, #124]	; (8000a14 <HAL_InitTick+0xa4>)
 8000996:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000998:	4a1e      	ldr	r2, [pc, #120]	; (8000a14 <HAL_InitTick+0xa4>)
 800099a:	f043 0301 	orr.w	r3, r3, #1
 800099e:	6453      	str	r3, [r2, #68]	; 0x44
 80009a0:	4b1c      	ldr	r3, [pc, #112]	; (8000a14 <HAL_InitTick+0xa4>)
 80009a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009a4:	f003 0301 	and.w	r3, r3, #1
 80009a8:	60fb      	str	r3, [r7, #12]
 80009aa:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80009ac:	f107 0210 	add.w	r2, r7, #16
 80009b0:	f107 0314 	add.w	r3, r7, #20
 80009b4:	4611      	mov	r1, r2
 80009b6:	4618      	mov	r0, r3
 80009b8:	f001 f890 	bl	8001adc <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 80009bc:	f001 f87a 	bl	8001ab4 <HAL_RCC_GetPCLK2Freq>
 80009c0:	4603      	mov	r3, r0
 80009c2:	005b      	lsls	r3, r3, #1
 80009c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80009c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009c8:	4a13      	ldr	r2, [pc, #76]	; (8000a18 <HAL_InitTick+0xa8>)
 80009ca:	fba2 2303 	umull	r2, r3, r2, r3
 80009ce:	0c9b      	lsrs	r3, r3, #18
 80009d0:	3b01      	subs	r3, #1
 80009d2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80009d4:	4b11      	ldr	r3, [pc, #68]	; (8000a1c <HAL_InitTick+0xac>)
 80009d6:	4a12      	ldr	r2, [pc, #72]	; (8000a20 <HAL_InitTick+0xb0>)
 80009d8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80009da:	4b10      	ldr	r3, [pc, #64]	; (8000a1c <HAL_InitTick+0xac>)
 80009dc:	f240 32e7 	movw	r2, #999	; 0x3e7
 80009e0:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80009e2:	4a0e      	ldr	r2, [pc, #56]	; (8000a1c <HAL_InitTick+0xac>)
 80009e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009e6:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80009e8:	4b0c      	ldr	r3, [pc, #48]	; (8000a1c <HAL_InitTick+0xac>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009ee:	4b0b      	ldr	r3, [pc, #44]	; (8000a1c <HAL_InitTick+0xac>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80009f4:	4809      	ldr	r0, [pc, #36]	; (8000a1c <HAL_InitTick+0xac>)
 80009f6:	f001 f8a3 	bl	8001b40 <HAL_TIM_Base_Init>
 80009fa:	4603      	mov	r3, r0
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d104      	bne.n	8000a0a <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000a00:	4806      	ldr	r0, [pc, #24]	; (8000a1c <HAL_InitTick+0xac>)
 8000a02:	f001 f8ed 	bl	8001be0 <HAL_TIM_Base_Start_IT>
 8000a06:	4603      	mov	r3, r0
 8000a08:	e000      	b.n	8000a0c <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8000a0a:	2301      	movs	r3, #1
}
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	3730      	adds	r7, #48	; 0x30
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bd80      	pop	{r7, pc}
 8000a14:	40023800 	.word	0x40023800
 8000a18:	431bde83 	.word	0x431bde83
 8000a1c:	20004c94 	.word	0x20004c94
 8000a20:	40010000 	.word	0x40010000

08000a24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a24:	b480      	push	{r7}
 8000a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a28:	e7fe      	b.n	8000a28 <NMI_Handler+0x4>

08000a2a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a2a:	b480      	push	{r7}
 8000a2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a2e:	e7fe      	b.n	8000a2e <HardFault_Handler+0x4>

08000a30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a34:	e7fe      	b.n	8000a34 <MemManage_Handler+0x4>

08000a36 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a36:	b480      	push	{r7}
 8000a38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a3a:	e7fe      	b.n	8000a3a <BusFault_Handler+0x4>

08000a3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a40:	e7fe      	b.n	8000a40 <UsageFault_Handler+0x4>

08000a42 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a42:	b480      	push	{r7}
 8000a44:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a46:	bf00      	nop
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4e:	4770      	bx	lr

08000a50 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000a54:	2001      	movs	r0, #1
 8000a56:	f000 fbcb 	bl	80011f0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000a5a:	bf00      	nop
 8000a5c:	bd80      	pop	{r7, pc}

08000a5e <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8000a5e:	b580      	push	{r7, lr}
 8000a60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8000a62:	2002      	movs	r0, #2
 8000a64:	f000 fbc4 	bl	80011f0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8000a68:	bf00      	nop
 8000a6a:	bd80      	pop	{r7, pc}

08000a6c <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8000a70:	2004      	movs	r0, #4
 8000a72:	f000 fbbd 	bl	80011f0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8000a76:	bf00      	nop
 8000a78:	bd80      	pop	{r7, pc}

08000a7a <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8000a7a:	b580      	push	{r7, lr}
 8000a7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8000a7e:	2008      	movs	r0, #8
 8000a80:	f000 fbb6 	bl	80011f0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8000a84:	bf00      	nop
 8000a86:	bd80      	pop	{r7, pc}

08000a88 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000a8c:	4802      	ldr	r0, [pc, #8]	; (8000a98 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000a8e:	f001 f917 	bl	8001cc0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000a92:	bf00      	nop
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	20004c94 	.word	0x20004c94

08000a9c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000aa0:	4802      	ldr	r0, [pc, #8]	; (8000aac <TIM2_IRQHandler+0x10>)
 8000aa2:	f001 f90d 	bl	8001cc0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000aa6:	bf00      	nop
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	20000090 	.word	0x20000090

08000ab0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0
	return 1;
 8000ab4:	2301      	movs	r3, #1
}
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abe:	4770      	bx	lr

08000ac0 <_kill>:

int _kill(int pid, int sig)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b082      	sub	sp, #8
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
 8000ac8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000aca:	f005 fb83 	bl	80061d4 <__errno>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	2216      	movs	r2, #22
 8000ad2:	601a      	str	r2, [r3, #0]
	return -1;
 8000ad4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ad8:	4618      	mov	r0, r3
 8000ada:	3708      	adds	r7, #8
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bd80      	pop	{r7, pc}

08000ae0 <_exit>:

void _exit (int status)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b082      	sub	sp, #8
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000ae8:	f04f 31ff 	mov.w	r1, #4294967295
 8000aec:	6878      	ldr	r0, [r7, #4]
 8000aee:	f7ff ffe7 	bl	8000ac0 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000af2:	e7fe      	b.n	8000af2 <_exit+0x12>

08000af4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b086      	sub	sp, #24
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000afc:	4a14      	ldr	r2, [pc, #80]	; (8000b50 <_sbrk+0x5c>)
 8000afe:	4b15      	ldr	r3, [pc, #84]	; (8000b54 <_sbrk+0x60>)
 8000b00:	1ad3      	subs	r3, r2, r3
 8000b02:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b04:	697b      	ldr	r3, [r7, #20]
 8000b06:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b08:	4b13      	ldr	r3, [pc, #76]	; (8000b58 <_sbrk+0x64>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d102      	bne.n	8000b16 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b10:	4b11      	ldr	r3, [pc, #68]	; (8000b58 <_sbrk+0x64>)
 8000b12:	4a12      	ldr	r2, [pc, #72]	; (8000b5c <_sbrk+0x68>)
 8000b14:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b16:	4b10      	ldr	r3, [pc, #64]	; (8000b58 <_sbrk+0x64>)
 8000b18:	681a      	ldr	r2, [r3, #0]
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	4413      	add	r3, r2
 8000b1e:	693a      	ldr	r2, [r7, #16]
 8000b20:	429a      	cmp	r2, r3
 8000b22:	d207      	bcs.n	8000b34 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b24:	f005 fb56 	bl	80061d4 <__errno>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	220c      	movs	r2, #12
 8000b2c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b2e:	f04f 33ff 	mov.w	r3, #4294967295
 8000b32:	e009      	b.n	8000b48 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b34:	4b08      	ldr	r3, [pc, #32]	; (8000b58 <_sbrk+0x64>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b3a:	4b07      	ldr	r3, [pc, #28]	; (8000b58 <_sbrk+0x64>)
 8000b3c:	681a      	ldr	r2, [r3, #0]
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	4413      	add	r3, r2
 8000b42:	4a05      	ldr	r2, [pc, #20]	; (8000b58 <_sbrk+0x64>)
 8000b44:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b46:	68fb      	ldr	r3, [r7, #12]
}
 8000b48:	4618      	mov	r0, r3
 8000b4a:	3718      	adds	r7, #24
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bd80      	pop	{r7, pc}
 8000b50:	20020000 	.word	0x20020000
 8000b54:	00000400 	.word	0x00000400
 8000b58:	200000dc 	.word	0x200000dc
 8000b5c:	20004d30 	.word	0x20004d30

08000b60 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b64:	4b06      	ldr	r3, [pc, #24]	; (8000b80 <SystemInit+0x20>)
 8000b66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b6a:	4a05      	ldr	r2, [pc, #20]	; (8000b80 <SystemInit+0x20>)
 8000b6c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b70:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b74:	bf00      	nop
 8000b76:	46bd      	mov	sp, r7
 8000b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7c:	4770      	bx	lr
 8000b7e:	bf00      	nop
 8000b80:	e000ed00 	.word	0xe000ed00

08000b84 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000b84:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000bbc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b88:	480d      	ldr	r0, [pc, #52]	; (8000bc0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000b8a:	490e      	ldr	r1, [pc, #56]	; (8000bc4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000b8c:	4a0e      	ldr	r2, [pc, #56]	; (8000bc8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b8e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b90:	e002      	b.n	8000b98 <LoopCopyDataInit>

08000b92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b96:	3304      	adds	r3, #4

08000b98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b9c:	d3f9      	bcc.n	8000b92 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b9e:	4a0b      	ldr	r2, [pc, #44]	; (8000bcc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000ba0:	4c0b      	ldr	r4, [pc, #44]	; (8000bd0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000ba2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ba4:	e001      	b.n	8000baa <LoopFillZerobss>

08000ba6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ba6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ba8:	3204      	adds	r2, #4

08000baa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000baa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bac:	d3fb      	bcc.n	8000ba6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000bae:	f7ff ffd7 	bl	8000b60 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000bb2:	f005 fb15 	bl	80061e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000bb6:	f7ff fcc1 	bl	800053c <main>
  bx  lr    
 8000bba:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000bbc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000bc0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bc4:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000bc8:	080066ec 	.word	0x080066ec
  ldr r2, =_sbss
 8000bcc:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000bd0:	20004d30 	.word	0x20004d30

08000bd4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000bd4:	e7fe      	b.n	8000bd4 <ADC_IRQHandler>
	...

08000bd8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000bdc:	4b0e      	ldr	r3, [pc, #56]	; (8000c18 <HAL_Init+0x40>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	4a0d      	ldr	r2, [pc, #52]	; (8000c18 <HAL_Init+0x40>)
 8000be2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000be6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000be8:	4b0b      	ldr	r3, [pc, #44]	; (8000c18 <HAL_Init+0x40>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	4a0a      	ldr	r2, [pc, #40]	; (8000c18 <HAL_Init+0x40>)
 8000bee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000bf2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bf4:	4b08      	ldr	r3, [pc, #32]	; (8000c18 <HAL_Init+0x40>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	4a07      	ldr	r2, [pc, #28]	; (8000c18 <HAL_Init+0x40>)
 8000bfa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000bfe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c00:	2003      	movs	r0, #3
 8000c02:	f000 f8d8 	bl	8000db6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c06:	200f      	movs	r0, #15
 8000c08:	f7ff feb2 	bl	8000970 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c0c:	f7ff fe5e 	bl	80008cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c10:	2300      	movs	r3, #0
}
 8000c12:	4618      	mov	r0, r3
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	40023c00 	.word	0x40023c00

08000c1c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c20:	4b06      	ldr	r3, [pc, #24]	; (8000c3c <HAL_IncTick+0x20>)
 8000c22:	781b      	ldrb	r3, [r3, #0]
 8000c24:	461a      	mov	r2, r3
 8000c26:	4b06      	ldr	r3, [pc, #24]	; (8000c40 <HAL_IncTick+0x24>)
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	4413      	add	r3, r2
 8000c2c:	4a04      	ldr	r2, [pc, #16]	; (8000c40 <HAL_IncTick+0x24>)
 8000c2e:	6013      	str	r3, [r2, #0]
}
 8000c30:	bf00      	nop
 8000c32:	46bd      	mov	sp, r7
 8000c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c38:	4770      	bx	lr
 8000c3a:	bf00      	nop
 8000c3c:	20000008 	.word	0x20000008
 8000c40:	20004cdc 	.word	0x20004cdc

08000c44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0
  return uwTick;
 8000c48:	4b03      	ldr	r3, [pc, #12]	; (8000c58 <HAL_GetTick+0x14>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
}
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop
 8000c58:	20004cdc 	.word	0x20004cdc

08000c5c <__NVIC_SetPriorityGrouping>:
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	b085      	sub	sp, #20
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	f003 0307 	and.w	r3, r3, #7
 8000c6a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c6c:	4b0c      	ldr	r3, [pc, #48]	; (8000ca0 <__NVIC_SetPriorityGrouping+0x44>)
 8000c6e:	68db      	ldr	r3, [r3, #12]
 8000c70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c72:	68ba      	ldr	r2, [r7, #8]
 8000c74:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c78:	4013      	ands	r3, r2
 8000c7a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c80:	68bb      	ldr	r3, [r7, #8]
 8000c82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c84:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c8e:	4a04      	ldr	r2, [pc, #16]	; (8000ca0 <__NVIC_SetPriorityGrouping+0x44>)
 8000c90:	68bb      	ldr	r3, [r7, #8]
 8000c92:	60d3      	str	r3, [r2, #12]
}
 8000c94:	bf00      	nop
 8000c96:	3714      	adds	r7, #20
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9e:	4770      	bx	lr
 8000ca0:	e000ed00 	.word	0xe000ed00

08000ca4 <__NVIC_GetPriorityGrouping>:
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ca8:	4b04      	ldr	r3, [pc, #16]	; (8000cbc <__NVIC_GetPriorityGrouping+0x18>)
 8000caa:	68db      	ldr	r3, [r3, #12]
 8000cac:	0a1b      	lsrs	r3, r3, #8
 8000cae:	f003 0307 	and.w	r3, r3, #7
}
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cba:	4770      	bx	lr
 8000cbc:	e000ed00 	.word	0xe000ed00

08000cc0 <__NVIC_EnableIRQ>:
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	b083      	sub	sp, #12
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	db0b      	blt.n	8000cea <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cd2:	79fb      	ldrb	r3, [r7, #7]
 8000cd4:	f003 021f 	and.w	r2, r3, #31
 8000cd8:	4907      	ldr	r1, [pc, #28]	; (8000cf8 <__NVIC_EnableIRQ+0x38>)
 8000cda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cde:	095b      	lsrs	r3, r3, #5
 8000ce0:	2001      	movs	r0, #1
 8000ce2:	fa00 f202 	lsl.w	r2, r0, r2
 8000ce6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000cea:	bf00      	nop
 8000cec:	370c      	adds	r7, #12
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf4:	4770      	bx	lr
 8000cf6:	bf00      	nop
 8000cf8:	e000e100 	.word	0xe000e100

08000cfc <__NVIC_SetPriority>:
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	b083      	sub	sp, #12
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	4603      	mov	r3, r0
 8000d04:	6039      	str	r1, [r7, #0]
 8000d06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	db0a      	blt.n	8000d26 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d10:	683b      	ldr	r3, [r7, #0]
 8000d12:	b2da      	uxtb	r2, r3
 8000d14:	490c      	ldr	r1, [pc, #48]	; (8000d48 <__NVIC_SetPriority+0x4c>)
 8000d16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d1a:	0112      	lsls	r2, r2, #4
 8000d1c:	b2d2      	uxtb	r2, r2
 8000d1e:	440b      	add	r3, r1
 8000d20:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000d24:	e00a      	b.n	8000d3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d26:	683b      	ldr	r3, [r7, #0]
 8000d28:	b2da      	uxtb	r2, r3
 8000d2a:	4908      	ldr	r1, [pc, #32]	; (8000d4c <__NVIC_SetPriority+0x50>)
 8000d2c:	79fb      	ldrb	r3, [r7, #7]
 8000d2e:	f003 030f 	and.w	r3, r3, #15
 8000d32:	3b04      	subs	r3, #4
 8000d34:	0112      	lsls	r2, r2, #4
 8000d36:	b2d2      	uxtb	r2, r2
 8000d38:	440b      	add	r3, r1
 8000d3a:	761a      	strb	r2, [r3, #24]
}
 8000d3c:	bf00      	nop
 8000d3e:	370c      	adds	r7, #12
 8000d40:	46bd      	mov	sp, r7
 8000d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d46:	4770      	bx	lr
 8000d48:	e000e100 	.word	0xe000e100
 8000d4c:	e000ed00 	.word	0xe000ed00

08000d50 <NVIC_EncodePriority>:
{
 8000d50:	b480      	push	{r7}
 8000d52:	b089      	sub	sp, #36	; 0x24
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	60f8      	str	r0, [r7, #12]
 8000d58:	60b9      	str	r1, [r7, #8]
 8000d5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	f003 0307 	and.w	r3, r3, #7
 8000d62:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d64:	69fb      	ldr	r3, [r7, #28]
 8000d66:	f1c3 0307 	rsb	r3, r3, #7
 8000d6a:	2b04      	cmp	r3, #4
 8000d6c:	bf28      	it	cs
 8000d6e:	2304      	movcs	r3, #4
 8000d70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d72:	69fb      	ldr	r3, [r7, #28]
 8000d74:	3304      	adds	r3, #4
 8000d76:	2b06      	cmp	r3, #6
 8000d78:	d902      	bls.n	8000d80 <NVIC_EncodePriority+0x30>
 8000d7a:	69fb      	ldr	r3, [r7, #28]
 8000d7c:	3b03      	subs	r3, #3
 8000d7e:	e000      	b.n	8000d82 <NVIC_EncodePriority+0x32>
 8000d80:	2300      	movs	r3, #0
 8000d82:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d84:	f04f 32ff 	mov.w	r2, #4294967295
 8000d88:	69bb      	ldr	r3, [r7, #24]
 8000d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d8e:	43da      	mvns	r2, r3
 8000d90:	68bb      	ldr	r3, [r7, #8]
 8000d92:	401a      	ands	r2, r3
 8000d94:	697b      	ldr	r3, [r7, #20]
 8000d96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d98:	f04f 31ff 	mov.w	r1, #4294967295
 8000d9c:	697b      	ldr	r3, [r7, #20]
 8000d9e:	fa01 f303 	lsl.w	r3, r1, r3
 8000da2:	43d9      	mvns	r1, r3
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000da8:	4313      	orrs	r3, r2
}
 8000daa:	4618      	mov	r0, r3
 8000dac:	3724      	adds	r7, #36	; 0x24
 8000dae:	46bd      	mov	sp, r7
 8000db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db4:	4770      	bx	lr

08000db6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000db6:	b580      	push	{r7, lr}
 8000db8:	b082      	sub	sp, #8
 8000dba:	af00      	add	r7, sp, #0
 8000dbc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000dbe:	6878      	ldr	r0, [r7, #4]
 8000dc0:	f7ff ff4c 	bl	8000c5c <__NVIC_SetPriorityGrouping>
}
 8000dc4:	bf00      	nop
 8000dc6:	3708      	adds	r7, #8
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bd80      	pop	{r7, pc}

08000dcc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b086      	sub	sp, #24
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	60b9      	str	r1, [r7, #8]
 8000dd6:	607a      	str	r2, [r7, #4]
 8000dd8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000dde:	f7ff ff61 	bl	8000ca4 <__NVIC_GetPriorityGrouping>
 8000de2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000de4:	687a      	ldr	r2, [r7, #4]
 8000de6:	68b9      	ldr	r1, [r7, #8]
 8000de8:	6978      	ldr	r0, [r7, #20]
 8000dea:	f7ff ffb1 	bl	8000d50 <NVIC_EncodePriority>
 8000dee:	4602      	mov	r2, r0
 8000df0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000df4:	4611      	mov	r1, r2
 8000df6:	4618      	mov	r0, r3
 8000df8:	f7ff ff80 	bl	8000cfc <__NVIC_SetPriority>
}
 8000dfc:	bf00      	nop
 8000dfe:	3718      	adds	r7, #24
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}

08000e04 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b082      	sub	sp, #8
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e12:	4618      	mov	r0, r3
 8000e14:	f7ff ff54 	bl	8000cc0 <__NVIC_EnableIRQ>
}
 8000e18:	bf00      	nop
 8000e1a:	3708      	adds	r7, #8
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}

08000e20 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e20:	b480      	push	{r7}
 8000e22:	b089      	sub	sp, #36	; 0x24
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
 8000e28:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e32:	2300      	movs	r3, #0
 8000e34:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e36:	2300      	movs	r3, #0
 8000e38:	61fb      	str	r3, [r7, #28]
 8000e3a:	e16b      	b.n	8001114 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e3c:	2201      	movs	r2, #1
 8000e3e:	69fb      	ldr	r3, [r7, #28]
 8000e40:	fa02 f303 	lsl.w	r3, r2, r3
 8000e44:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e46:	683b      	ldr	r3, [r7, #0]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	697a      	ldr	r2, [r7, #20]
 8000e4c:	4013      	ands	r3, r2
 8000e4e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e50:	693a      	ldr	r2, [r7, #16]
 8000e52:	697b      	ldr	r3, [r7, #20]
 8000e54:	429a      	cmp	r2, r3
 8000e56:	f040 815a 	bne.w	800110e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	685b      	ldr	r3, [r3, #4]
 8000e5e:	f003 0303 	and.w	r3, r3, #3
 8000e62:	2b01      	cmp	r3, #1
 8000e64:	d005      	beq.n	8000e72 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e66:	683b      	ldr	r3, [r7, #0]
 8000e68:	685b      	ldr	r3, [r3, #4]
 8000e6a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e6e:	2b02      	cmp	r3, #2
 8000e70:	d130      	bne.n	8000ed4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	689b      	ldr	r3, [r3, #8]
 8000e76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e78:	69fb      	ldr	r3, [r7, #28]
 8000e7a:	005b      	lsls	r3, r3, #1
 8000e7c:	2203      	movs	r2, #3
 8000e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e82:	43db      	mvns	r3, r3
 8000e84:	69ba      	ldr	r2, [r7, #24]
 8000e86:	4013      	ands	r3, r2
 8000e88:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e8a:	683b      	ldr	r3, [r7, #0]
 8000e8c:	68da      	ldr	r2, [r3, #12]
 8000e8e:	69fb      	ldr	r3, [r7, #28]
 8000e90:	005b      	lsls	r3, r3, #1
 8000e92:	fa02 f303 	lsl.w	r3, r2, r3
 8000e96:	69ba      	ldr	r2, [r7, #24]
 8000e98:	4313      	orrs	r3, r2
 8000e9a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	69ba      	ldr	r2, [r7, #24]
 8000ea0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	685b      	ldr	r3, [r3, #4]
 8000ea6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ea8:	2201      	movs	r2, #1
 8000eaa:	69fb      	ldr	r3, [r7, #28]
 8000eac:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb0:	43db      	mvns	r3, r3
 8000eb2:	69ba      	ldr	r2, [r7, #24]
 8000eb4:	4013      	ands	r3, r2
 8000eb6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	685b      	ldr	r3, [r3, #4]
 8000ebc:	091b      	lsrs	r3, r3, #4
 8000ebe:	f003 0201 	and.w	r2, r3, #1
 8000ec2:	69fb      	ldr	r3, [r7, #28]
 8000ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec8:	69ba      	ldr	r2, [r7, #24]
 8000eca:	4313      	orrs	r3, r2
 8000ecc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	69ba      	ldr	r2, [r7, #24]
 8000ed2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ed4:	683b      	ldr	r3, [r7, #0]
 8000ed6:	685b      	ldr	r3, [r3, #4]
 8000ed8:	f003 0303 	and.w	r3, r3, #3
 8000edc:	2b03      	cmp	r3, #3
 8000ede:	d017      	beq.n	8000f10 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	68db      	ldr	r3, [r3, #12]
 8000ee4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000ee6:	69fb      	ldr	r3, [r7, #28]
 8000ee8:	005b      	lsls	r3, r3, #1
 8000eea:	2203      	movs	r2, #3
 8000eec:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef0:	43db      	mvns	r3, r3
 8000ef2:	69ba      	ldr	r2, [r7, #24]
 8000ef4:	4013      	ands	r3, r2
 8000ef6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ef8:	683b      	ldr	r3, [r7, #0]
 8000efa:	689a      	ldr	r2, [r3, #8]
 8000efc:	69fb      	ldr	r3, [r7, #28]
 8000efe:	005b      	lsls	r3, r3, #1
 8000f00:	fa02 f303 	lsl.w	r3, r2, r3
 8000f04:	69ba      	ldr	r2, [r7, #24]
 8000f06:	4313      	orrs	r3, r2
 8000f08:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	69ba      	ldr	r2, [r7, #24]
 8000f0e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	685b      	ldr	r3, [r3, #4]
 8000f14:	f003 0303 	and.w	r3, r3, #3
 8000f18:	2b02      	cmp	r3, #2
 8000f1a:	d123      	bne.n	8000f64 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f1c:	69fb      	ldr	r3, [r7, #28]
 8000f1e:	08da      	lsrs	r2, r3, #3
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	3208      	adds	r2, #8
 8000f24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f28:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f2a:	69fb      	ldr	r3, [r7, #28]
 8000f2c:	f003 0307 	and.w	r3, r3, #7
 8000f30:	009b      	lsls	r3, r3, #2
 8000f32:	220f      	movs	r2, #15
 8000f34:	fa02 f303 	lsl.w	r3, r2, r3
 8000f38:	43db      	mvns	r3, r3
 8000f3a:	69ba      	ldr	r2, [r7, #24]
 8000f3c:	4013      	ands	r3, r2
 8000f3e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f40:	683b      	ldr	r3, [r7, #0]
 8000f42:	691a      	ldr	r2, [r3, #16]
 8000f44:	69fb      	ldr	r3, [r7, #28]
 8000f46:	f003 0307 	and.w	r3, r3, #7
 8000f4a:	009b      	lsls	r3, r3, #2
 8000f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f50:	69ba      	ldr	r2, [r7, #24]
 8000f52:	4313      	orrs	r3, r2
 8000f54:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f56:	69fb      	ldr	r3, [r7, #28]
 8000f58:	08da      	lsrs	r2, r3, #3
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	3208      	adds	r2, #8
 8000f5e:	69b9      	ldr	r1, [r7, #24]
 8000f60:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f6a:	69fb      	ldr	r3, [r7, #28]
 8000f6c:	005b      	lsls	r3, r3, #1
 8000f6e:	2203      	movs	r2, #3
 8000f70:	fa02 f303 	lsl.w	r3, r2, r3
 8000f74:	43db      	mvns	r3, r3
 8000f76:	69ba      	ldr	r2, [r7, #24]
 8000f78:	4013      	ands	r3, r2
 8000f7a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	685b      	ldr	r3, [r3, #4]
 8000f80:	f003 0203 	and.w	r2, r3, #3
 8000f84:	69fb      	ldr	r3, [r7, #28]
 8000f86:	005b      	lsls	r3, r3, #1
 8000f88:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8c:	69ba      	ldr	r2, [r7, #24]
 8000f8e:	4313      	orrs	r3, r2
 8000f90:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	69ba      	ldr	r2, [r7, #24]
 8000f96:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	685b      	ldr	r3, [r3, #4]
 8000f9c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	f000 80b4 	beq.w	800110e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	60fb      	str	r3, [r7, #12]
 8000faa:	4b60      	ldr	r3, [pc, #384]	; (800112c <HAL_GPIO_Init+0x30c>)
 8000fac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fae:	4a5f      	ldr	r2, [pc, #380]	; (800112c <HAL_GPIO_Init+0x30c>)
 8000fb0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fb4:	6453      	str	r3, [r2, #68]	; 0x44
 8000fb6:	4b5d      	ldr	r3, [pc, #372]	; (800112c <HAL_GPIO_Init+0x30c>)
 8000fb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fbe:	60fb      	str	r3, [r7, #12]
 8000fc0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000fc2:	4a5b      	ldr	r2, [pc, #364]	; (8001130 <HAL_GPIO_Init+0x310>)
 8000fc4:	69fb      	ldr	r3, [r7, #28]
 8000fc6:	089b      	lsrs	r3, r3, #2
 8000fc8:	3302      	adds	r3, #2
 8000fca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000fd0:	69fb      	ldr	r3, [r7, #28]
 8000fd2:	f003 0303 	and.w	r3, r3, #3
 8000fd6:	009b      	lsls	r3, r3, #2
 8000fd8:	220f      	movs	r2, #15
 8000fda:	fa02 f303 	lsl.w	r3, r2, r3
 8000fde:	43db      	mvns	r3, r3
 8000fe0:	69ba      	ldr	r2, [r7, #24]
 8000fe2:	4013      	ands	r3, r2
 8000fe4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	4a52      	ldr	r2, [pc, #328]	; (8001134 <HAL_GPIO_Init+0x314>)
 8000fea:	4293      	cmp	r3, r2
 8000fec:	d02b      	beq.n	8001046 <HAL_GPIO_Init+0x226>
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	4a51      	ldr	r2, [pc, #324]	; (8001138 <HAL_GPIO_Init+0x318>)
 8000ff2:	4293      	cmp	r3, r2
 8000ff4:	d025      	beq.n	8001042 <HAL_GPIO_Init+0x222>
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	4a50      	ldr	r2, [pc, #320]	; (800113c <HAL_GPIO_Init+0x31c>)
 8000ffa:	4293      	cmp	r3, r2
 8000ffc:	d01f      	beq.n	800103e <HAL_GPIO_Init+0x21e>
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	4a4f      	ldr	r2, [pc, #316]	; (8001140 <HAL_GPIO_Init+0x320>)
 8001002:	4293      	cmp	r3, r2
 8001004:	d019      	beq.n	800103a <HAL_GPIO_Init+0x21a>
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	4a4e      	ldr	r2, [pc, #312]	; (8001144 <HAL_GPIO_Init+0x324>)
 800100a:	4293      	cmp	r3, r2
 800100c:	d013      	beq.n	8001036 <HAL_GPIO_Init+0x216>
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	4a4d      	ldr	r2, [pc, #308]	; (8001148 <HAL_GPIO_Init+0x328>)
 8001012:	4293      	cmp	r3, r2
 8001014:	d00d      	beq.n	8001032 <HAL_GPIO_Init+0x212>
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	4a4c      	ldr	r2, [pc, #304]	; (800114c <HAL_GPIO_Init+0x32c>)
 800101a:	4293      	cmp	r3, r2
 800101c:	d007      	beq.n	800102e <HAL_GPIO_Init+0x20e>
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	4a4b      	ldr	r2, [pc, #300]	; (8001150 <HAL_GPIO_Init+0x330>)
 8001022:	4293      	cmp	r3, r2
 8001024:	d101      	bne.n	800102a <HAL_GPIO_Init+0x20a>
 8001026:	2307      	movs	r3, #7
 8001028:	e00e      	b.n	8001048 <HAL_GPIO_Init+0x228>
 800102a:	2308      	movs	r3, #8
 800102c:	e00c      	b.n	8001048 <HAL_GPIO_Init+0x228>
 800102e:	2306      	movs	r3, #6
 8001030:	e00a      	b.n	8001048 <HAL_GPIO_Init+0x228>
 8001032:	2305      	movs	r3, #5
 8001034:	e008      	b.n	8001048 <HAL_GPIO_Init+0x228>
 8001036:	2304      	movs	r3, #4
 8001038:	e006      	b.n	8001048 <HAL_GPIO_Init+0x228>
 800103a:	2303      	movs	r3, #3
 800103c:	e004      	b.n	8001048 <HAL_GPIO_Init+0x228>
 800103e:	2302      	movs	r3, #2
 8001040:	e002      	b.n	8001048 <HAL_GPIO_Init+0x228>
 8001042:	2301      	movs	r3, #1
 8001044:	e000      	b.n	8001048 <HAL_GPIO_Init+0x228>
 8001046:	2300      	movs	r3, #0
 8001048:	69fa      	ldr	r2, [r7, #28]
 800104a:	f002 0203 	and.w	r2, r2, #3
 800104e:	0092      	lsls	r2, r2, #2
 8001050:	4093      	lsls	r3, r2
 8001052:	69ba      	ldr	r2, [r7, #24]
 8001054:	4313      	orrs	r3, r2
 8001056:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001058:	4935      	ldr	r1, [pc, #212]	; (8001130 <HAL_GPIO_Init+0x310>)
 800105a:	69fb      	ldr	r3, [r7, #28]
 800105c:	089b      	lsrs	r3, r3, #2
 800105e:	3302      	adds	r3, #2
 8001060:	69ba      	ldr	r2, [r7, #24]
 8001062:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001066:	4b3b      	ldr	r3, [pc, #236]	; (8001154 <HAL_GPIO_Init+0x334>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800106c:	693b      	ldr	r3, [r7, #16]
 800106e:	43db      	mvns	r3, r3
 8001070:	69ba      	ldr	r2, [r7, #24]
 8001072:	4013      	ands	r3, r2
 8001074:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	685b      	ldr	r3, [r3, #4]
 800107a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800107e:	2b00      	cmp	r3, #0
 8001080:	d003      	beq.n	800108a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001082:	69ba      	ldr	r2, [r7, #24]
 8001084:	693b      	ldr	r3, [r7, #16]
 8001086:	4313      	orrs	r3, r2
 8001088:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800108a:	4a32      	ldr	r2, [pc, #200]	; (8001154 <HAL_GPIO_Init+0x334>)
 800108c:	69bb      	ldr	r3, [r7, #24]
 800108e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001090:	4b30      	ldr	r3, [pc, #192]	; (8001154 <HAL_GPIO_Init+0x334>)
 8001092:	685b      	ldr	r3, [r3, #4]
 8001094:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001096:	693b      	ldr	r3, [r7, #16]
 8001098:	43db      	mvns	r3, r3
 800109a:	69ba      	ldr	r2, [r7, #24]
 800109c:	4013      	ands	r3, r2
 800109e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	685b      	ldr	r3, [r3, #4]
 80010a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d003      	beq.n	80010b4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80010ac:	69ba      	ldr	r2, [r7, #24]
 80010ae:	693b      	ldr	r3, [r7, #16]
 80010b0:	4313      	orrs	r3, r2
 80010b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80010b4:	4a27      	ldr	r2, [pc, #156]	; (8001154 <HAL_GPIO_Init+0x334>)
 80010b6:	69bb      	ldr	r3, [r7, #24]
 80010b8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010ba:	4b26      	ldr	r3, [pc, #152]	; (8001154 <HAL_GPIO_Init+0x334>)
 80010bc:	689b      	ldr	r3, [r3, #8]
 80010be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010c0:	693b      	ldr	r3, [r7, #16]
 80010c2:	43db      	mvns	r3, r3
 80010c4:	69ba      	ldr	r2, [r7, #24]
 80010c6:	4013      	ands	r3, r2
 80010c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	685b      	ldr	r3, [r3, #4]
 80010ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d003      	beq.n	80010de <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80010d6:	69ba      	ldr	r2, [r7, #24]
 80010d8:	693b      	ldr	r3, [r7, #16]
 80010da:	4313      	orrs	r3, r2
 80010dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80010de:	4a1d      	ldr	r2, [pc, #116]	; (8001154 <HAL_GPIO_Init+0x334>)
 80010e0:	69bb      	ldr	r3, [r7, #24]
 80010e2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80010e4:	4b1b      	ldr	r3, [pc, #108]	; (8001154 <HAL_GPIO_Init+0x334>)
 80010e6:	68db      	ldr	r3, [r3, #12]
 80010e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010ea:	693b      	ldr	r3, [r7, #16]
 80010ec:	43db      	mvns	r3, r3
 80010ee:	69ba      	ldr	r2, [r7, #24]
 80010f0:	4013      	ands	r3, r2
 80010f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	685b      	ldr	r3, [r3, #4]
 80010f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d003      	beq.n	8001108 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001100:	69ba      	ldr	r2, [r7, #24]
 8001102:	693b      	ldr	r3, [r7, #16]
 8001104:	4313      	orrs	r3, r2
 8001106:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001108:	4a12      	ldr	r2, [pc, #72]	; (8001154 <HAL_GPIO_Init+0x334>)
 800110a:	69bb      	ldr	r3, [r7, #24]
 800110c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800110e:	69fb      	ldr	r3, [r7, #28]
 8001110:	3301      	adds	r3, #1
 8001112:	61fb      	str	r3, [r7, #28]
 8001114:	69fb      	ldr	r3, [r7, #28]
 8001116:	2b0f      	cmp	r3, #15
 8001118:	f67f ae90 	bls.w	8000e3c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800111c:	bf00      	nop
 800111e:	bf00      	nop
 8001120:	3724      	adds	r7, #36	; 0x24
 8001122:	46bd      	mov	sp, r7
 8001124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001128:	4770      	bx	lr
 800112a:	bf00      	nop
 800112c:	40023800 	.word	0x40023800
 8001130:	40013800 	.word	0x40013800
 8001134:	40020000 	.word	0x40020000
 8001138:	40020400 	.word	0x40020400
 800113c:	40020800 	.word	0x40020800
 8001140:	40020c00 	.word	0x40020c00
 8001144:	40021000 	.word	0x40021000
 8001148:	40021400 	.word	0x40021400
 800114c:	40021800 	.word	0x40021800
 8001150:	40021c00 	.word	0x40021c00
 8001154:	40013c00 	.word	0x40013c00

08001158 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001158:	b480      	push	{r7}
 800115a:	b085      	sub	sp, #20
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
 8001160:	460b      	mov	r3, r1
 8001162:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	691a      	ldr	r2, [r3, #16]
 8001168:	887b      	ldrh	r3, [r7, #2]
 800116a:	4013      	ands	r3, r2
 800116c:	2b00      	cmp	r3, #0
 800116e:	d002      	beq.n	8001176 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001170:	2301      	movs	r3, #1
 8001172:	73fb      	strb	r3, [r7, #15]
 8001174:	e001      	b.n	800117a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001176:	2300      	movs	r3, #0
 8001178:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800117a:	7bfb      	ldrb	r3, [r7, #15]
}
 800117c:	4618      	mov	r0, r3
 800117e:	3714      	adds	r7, #20
 8001180:	46bd      	mov	sp, r7
 8001182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001186:	4770      	bx	lr

08001188 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001188:	b480      	push	{r7}
 800118a:	b083      	sub	sp, #12
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
 8001190:	460b      	mov	r3, r1
 8001192:	807b      	strh	r3, [r7, #2]
 8001194:	4613      	mov	r3, r2
 8001196:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001198:	787b      	ldrb	r3, [r7, #1]
 800119a:	2b00      	cmp	r3, #0
 800119c:	d003      	beq.n	80011a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800119e:	887a      	ldrh	r2, [r7, #2]
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80011a4:	e003      	b.n	80011ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80011a6:	887b      	ldrh	r3, [r7, #2]
 80011a8:	041a      	lsls	r2, r3, #16
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	619a      	str	r2, [r3, #24]
}
 80011ae:	bf00      	nop
 80011b0:	370c      	adds	r7, #12
 80011b2:	46bd      	mov	sp, r7
 80011b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b8:	4770      	bx	lr

080011ba <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80011ba:	b480      	push	{r7}
 80011bc:	b085      	sub	sp, #20
 80011be:	af00      	add	r7, sp, #0
 80011c0:	6078      	str	r0, [r7, #4]
 80011c2:	460b      	mov	r3, r1
 80011c4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	695b      	ldr	r3, [r3, #20]
 80011ca:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80011cc:	887a      	ldrh	r2, [r7, #2]
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	4013      	ands	r3, r2
 80011d2:	041a      	lsls	r2, r3, #16
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	43d9      	mvns	r1, r3
 80011d8:	887b      	ldrh	r3, [r7, #2]
 80011da:	400b      	ands	r3, r1
 80011dc:	431a      	orrs	r2, r3
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	619a      	str	r2, [r3, #24]
}
 80011e2:	bf00      	nop
 80011e4:	3714      	adds	r7, #20
 80011e6:	46bd      	mov	sp, r7
 80011e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ec:	4770      	bx	lr
	...

080011f0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b082      	sub	sp, #8
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	4603      	mov	r3, r0
 80011f8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80011fa:	4b08      	ldr	r3, [pc, #32]	; (800121c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80011fc:	695a      	ldr	r2, [r3, #20]
 80011fe:	88fb      	ldrh	r3, [r7, #6]
 8001200:	4013      	ands	r3, r2
 8001202:	2b00      	cmp	r3, #0
 8001204:	d006      	beq.n	8001214 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001206:	4a05      	ldr	r2, [pc, #20]	; (800121c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001208:	88fb      	ldrh	r3, [r7, #6]
 800120a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800120c:	88fb      	ldrh	r3, [r7, #6]
 800120e:	4618      	mov	r0, r3
 8001210:	f001 f918 	bl	8002444 <HAL_GPIO_EXTI_Callback>
  }
}
 8001214:	bf00      	nop
 8001216:	3708      	adds	r7, #8
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}
 800121c:	40013c00 	.word	0x40013c00

08001220 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b086      	sub	sp, #24
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	2b00      	cmp	r3, #0
 800122c:	d101      	bne.n	8001232 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800122e:	2301      	movs	r3, #1
 8001230:	e264      	b.n	80016fc <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f003 0301 	and.w	r3, r3, #1
 800123a:	2b00      	cmp	r3, #0
 800123c:	d075      	beq.n	800132a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800123e:	4ba3      	ldr	r3, [pc, #652]	; (80014cc <HAL_RCC_OscConfig+0x2ac>)
 8001240:	689b      	ldr	r3, [r3, #8]
 8001242:	f003 030c 	and.w	r3, r3, #12
 8001246:	2b04      	cmp	r3, #4
 8001248:	d00c      	beq.n	8001264 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800124a:	4ba0      	ldr	r3, [pc, #640]	; (80014cc <HAL_RCC_OscConfig+0x2ac>)
 800124c:	689b      	ldr	r3, [r3, #8]
 800124e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001252:	2b08      	cmp	r3, #8
 8001254:	d112      	bne.n	800127c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001256:	4b9d      	ldr	r3, [pc, #628]	; (80014cc <HAL_RCC_OscConfig+0x2ac>)
 8001258:	685b      	ldr	r3, [r3, #4]
 800125a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800125e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001262:	d10b      	bne.n	800127c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001264:	4b99      	ldr	r3, [pc, #612]	; (80014cc <HAL_RCC_OscConfig+0x2ac>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800126c:	2b00      	cmp	r3, #0
 800126e:	d05b      	beq.n	8001328 <HAL_RCC_OscConfig+0x108>
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	685b      	ldr	r3, [r3, #4]
 8001274:	2b00      	cmp	r3, #0
 8001276:	d157      	bne.n	8001328 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001278:	2301      	movs	r3, #1
 800127a:	e23f      	b.n	80016fc <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001284:	d106      	bne.n	8001294 <HAL_RCC_OscConfig+0x74>
 8001286:	4b91      	ldr	r3, [pc, #580]	; (80014cc <HAL_RCC_OscConfig+0x2ac>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	4a90      	ldr	r2, [pc, #576]	; (80014cc <HAL_RCC_OscConfig+0x2ac>)
 800128c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001290:	6013      	str	r3, [r2, #0]
 8001292:	e01d      	b.n	80012d0 <HAL_RCC_OscConfig+0xb0>
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800129c:	d10c      	bne.n	80012b8 <HAL_RCC_OscConfig+0x98>
 800129e:	4b8b      	ldr	r3, [pc, #556]	; (80014cc <HAL_RCC_OscConfig+0x2ac>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	4a8a      	ldr	r2, [pc, #552]	; (80014cc <HAL_RCC_OscConfig+0x2ac>)
 80012a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012a8:	6013      	str	r3, [r2, #0]
 80012aa:	4b88      	ldr	r3, [pc, #544]	; (80014cc <HAL_RCC_OscConfig+0x2ac>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	4a87      	ldr	r2, [pc, #540]	; (80014cc <HAL_RCC_OscConfig+0x2ac>)
 80012b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012b4:	6013      	str	r3, [r2, #0]
 80012b6:	e00b      	b.n	80012d0 <HAL_RCC_OscConfig+0xb0>
 80012b8:	4b84      	ldr	r3, [pc, #528]	; (80014cc <HAL_RCC_OscConfig+0x2ac>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	4a83      	ldr	r2, [pc, #524]	; (80014cc <HAL_RCC_OscConfig+0x2ac>)
 80012be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012c2:	6013      	str	r3, [r2, #0]
 80012c4:	4b81      	ldr	r3, [pc, #516]	; (80014cc <HAL_RCC_OscConfig+0x2ac>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	4a80      	ldr	r2, [pc, #512]	; (80014cc <HAL_RCC_OscConfig+0x2ac>)
 80012ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d013      	beq.n	8001300 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012d8:	f7ff fcb4 	bl	8000c44 <HAL_GetTick>
 80012dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012de:	e008      	b.n	80012f2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012e0:	f7ff fcb0 	bl	8000c44 <HAL_GetTick>
 80012e4:	4602      	mov	r2, r0
 80012e6:	693b      	ldr	r3, [r7, #16]
 80012e8:	1ad3      	subs	r3, r2, r3
 80012ea:	2b64      	cmp	r3, #100	; 0x64
 80012ec:	d901      	bls.n	80012f2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80012ee:	2303      	movs	r3, #3
 80012f0:	e204      	b.n	80016fc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012f2:	4b76      	ldr	r3, [pc, #472]	; (80014cc <HAL_RCC_OscConfig+0x2ac>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d0f0      	beq.n	80012e0 <HAL_RCC_OscConfig+0xc0>
 80012fe:	e014      	b.n	800132a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001300:	f7ff fca0 	bl	8000c44 <HAL_GetTick>
 8001304:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001306:	e008      	b.n	800131a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001308:	f7ff fc9c 	bl	8000c44 <HAL_GetTick>
 800130c:	4602      	mov	r2, r0
 800130e:	693b      	ldr	r3, [r7, #16]
 8001310:	1ad3      	subs	r3, r2, r3
 8001312:	2b64      	cmp	r3, #100	; 0x64
 8001314:	d901      	bls.n	800131a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001316:	2303      	movs	r3, #3
 8001318:	e1f0      	b.n	80016fc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800131a:	4b6c      	ldr	r3, [pc, #432]	; (80014cc <HAL_RCC_OscConfig+0x2ac>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001322:	2b00      	cmp	r3, #0
 8001324:	d1f0      	bne.n	8001308 <HAL_RCC_OscConfig+0xe8>
 8001326:	e000      	b.n	800132a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001328:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f003 0302 	and.w	r3, r3, #2
 8001332:	2b00      	cmp	r3, #0
 8001334:	d063      	beq.n	80013fe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001336:	4b65      	ldr	r3, [pc, #404]	; (80014cc <HAL_RCC_OscConfig+0x2ac>)
 8001338:	689b      	ldr	r3, [r3, #8]
 800133a:	f003 030c 	and.w	r3, r3, #12
 800133e:	2b00      	cmp	r3, #0
 8001340:	d00b      	beq.n	800135a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001342:	4b62      	ldr	r3, [pc, #392]	; (80014cc <HAL_RCC_OscConfig+0x2ac>)
 8001344:	689b      	ldr	r3, [r3, #8]
 8001346:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800134a:	2b08      	cmp	r3, #8
 800134c:	d11c      	bne.n	8001388 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800134e:	4b5f      	ldr	r3, [pc, #380]	; (80014cc <HAL_RCC_OscConfig+0x2ac>)
 8001350:	685b      	ldr	r3, [r3, #4]
 8001352:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001356:	2b00      	cmp	r3, #0
 8001358:	d116      	bne.n	8001388 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800135a:	4b5c      	ldr	r3, [pc, #368]	; (80014cc <HAL_RCC_OscConfig+0x2ac>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f003 0302 	and.w	r3, r3, #2
 8001362:	2b00      	cmp	r3, #0
 8001364:	d005      	beq.n	8001372 <HAL_RCC_OscConfig+0x152>
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	68db      	ldr	r3, [r3, #12]
 800136a:	2b01      	cmp	r3, #1
 800136c:	d001      	beq.n	8001372 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800136e:	2301      	movs	r3, #1
 8001370:	e1c4      	b.n	80016fc <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001372:	4b56      	ldr	r3, [pc, #344]	; (80014cc <HAL_RCC_OscConfig+0x2ac>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	691b      	ldr	r3, [r3, #16]
 800137e:	00db      	lsls	r3, r3, #3
 8001380:	4952      	ldr	r1, [pc, #328]	; (80014cc <HAL_RCC_OscConfig+0x2ac>)
 8001382:	4313      	orrs	r3, r2
 8001384:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001386:	e03a      	b.n	80013fe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	68db      	ldr	r3, [r3, #12]
 800138c:	2b00      	cmp	r3, #0
 800138e:	d020      	beq.n	80013d2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001390:	4b4f      	ldr	r3, [pc, #316]	; (80014d0 <HAL_RCC_OscConfig+0x2b0>)
 8001392:	2201      	movs	r2, #1
 8001394:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001396:	f7ff fc55 	bl	8000c44 <HAL_GetTick>
 800139a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800139c:	e008      	b.n	80013b0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800139e:	f7ff fc51 	bl	8000c44 <HAL_GetTick>
 80013a2:	4602      	mov	r2, r0
 80013a4:	693b      	ldr	r3, [r7, #16]
 80013a6:	1ad3      	subs	r3, r2, r3
 80013a8:	2b02      	cmp	r3, #2
 80013aa:	d901      	bls.n	80013b0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80013ac:	2303      	movs	r3, #3
 80013ae:	e1a5      	b.n	80016fc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013b0:	4b46      	ldr	r3, [pc, #280]	; (80014cc <HAL_RCC_OscConfig+0x2ac>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f003 0302 	and.w	r3, r3, #2
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d0f0      	beq.n	800139e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013bc:	4b43      	ldr	r3, [pc, #268]	; (80014cc <HAL_RCC_OscConfig+0x2ac>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	691b      	ldr	r3, [r3, #16]
 80013c8:	00db      	lsls	r3, r3, #3
 80013ca:	4940      	ldr	r1, [pc, #256]	; (80014cc <HAL_RCC_OscConfig+0x2ac>)
 80013cc:	4313      	orrs	r3, r2
 80013ce:	600b      	str	r3, [r1, #0]
 80013d0:	e015      	b.n	80013fe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013d2:	4b3f      	ldr	r3, [pc, #252]	; (80014d0 <HAL_RCC_OscConfig+0x2b0>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013d8:	f7ff fc34 	bl	8000c44 <HAL_GetTick>
 80013dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013de:	e008      	b.n	80013f2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013e0:	f7ff fc30 	bl	8000c44 <HAL_GetTick>
 80013e4:	4602      	mov	r2, r0
 80013e6:	693b      	ldr	r3, [r7, #16]
 80013e8:	1ad3      	subs	r3, r2, r3
 80013ea:	2b02      	cmp	r3, #2
 80013ec:	d901      	bls.n	80013f2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80013ee:	2303      	movs	r3, #3
 80013f0:	e184      	b.n	80016fc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013f2:	4b36      	ldr	r3, [pc, #216]	; (80014cc <HAL_RCC_OscConfig+0x2ac>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f003 0302 	and.w	r3, r3, #2
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d1f0      	bne.n	80013e0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f003 0308 	and.w	r3, r3, #8
 8001406:	2b00      	cmp	r3, #0
 8001408:	d030      	beq.n	800146c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	695b      	ldr	r3, [r3, #20]
 800140e:	2b00      	cmp	r3, #0
 8001410:	d016      	beq.n	8001440 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001412:	4b30      	ldr	r3, [pc, #192]	; (80014d4 <HAL_RCC_OscConfig+0x2b4>)
 8001414:	2201      	movs	r2, #1
 8001416:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001418:	f7ff fc14 	bl	8000c44 <HAL_GetTick>
 800141c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800141e:	e008      	b.n	8001432 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001420:	f7ff fc10 	bl	8000c44 <HAL_GetTick>
 8001424:	4602      	mov	r2, r0
 8001426:	693b      	ldr	r3, [r7, #16]
 8001428:	1ad3      	subs	r3, r2, r3
 800142a:	2b02      	cmp	r3, #2
 800142c:	d901      	bls.n	8001432 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800142e:	2303      	movs	r3, #3
 8001430:	e164      	b.n	80016fc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001432:	4b26      	ldr	r3, [pc, #152]	; (80014cc <HAL_RCC_OscConfig+0x2ac>)
 8001434:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001436:	f003 0302 	and.w	r3, r3, #2
 800143a:	2b00      	cmp	r3, #0
 800143c:	d0f0      	beq.n	8001420 <HAL_RCC_OscConfig+0x200>
 800143e:	e015      	b.n	800146c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001440:	4b24      	ldr	r3, [pc, #144]	; (80014d4 <HAL_RCC_OscConfig+0x2b4>)
 8001442:	2200      	movs	r2, #0
 8001444:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001446:	f7ff fbfd 	bl	8000c44 <HAL_GetTick>
 800144a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800144c:	e008      	b.n	8001460 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800144e:	f7ff fbf9 	bl	8000c44 <HAL_GetTick>
 8001452:	4602      	mov	r2, r0
 8001454:	693b      	ldr	r3, [r7, #16]
 8001456:	1ad3      	subs	r3, r2, r3
 8001458:	2b02      	cmp	r3, #2
 800145a:	d901      	bls.n	8001460 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800145c:	2303      	movs	r3, #3
 800145e:	e14d      	b.n	80016fc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001460:	4b1a      	ldr	r3, [pc, #104]	; (80014cc <HAL_RCC_OscConfig+0x2ac>)
 8001462:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001464:	f003 0302 	and.w	r3, r3, #2
 8001468:	2b00      	cmp	r3, #0
 800146a:	d1f0      	bne.n	800144e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f003 0304 	and.w	r3, r3, #4
 8001474:	2b00      	cmp	r3, #0
 8001476:	f000 80a0 	beq.w	80015ba <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800147a:	2300      	movs	r3, #0
 800147c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800147e:	4b13      	ldr	r3, [pc, #76]	; (80014cc <HAL_RCC_OscConfig+0x2ac>)
 8001480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001482:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001486:	2b00      	cmp	r3, #0
 8001488:	d10f      	bne.n	80014aa <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800148a:	2300      	movs	r3, #0
 800148c:	60bb      	str	r3, [r7, #8]
 800148e:	4b0f      	ldr	r3, [pc, #60]	; (80014cc <HAL_RCC_OscConfig+0x2ac>)
 8001490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001492:	4a0e      	ldr	r2, [pc, #56]	; (80014cc <HAL_RCC_OscConfig+0x2ac>)
 8001494:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001498:	6413      	str	r3, [r2, #64]	; 0x40
 800149a:	4b0c      	ldr	r3, [pc, #48]	; (80014cc <HAL_RCC_OscConfig+0x2ac>)
 800149c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800149e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014a2:	60bb      	str	r3, [r7, #8]
 80014a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80014a6:	2301      	movs	r3, #1
 80014a8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014aa:	4b0b      	ldr	r3, [pc, #44]	; (80014d8 <HAL_RCC_OscConfig+0x2b8>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d121      	bne.n	80014fa <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80014b6:	4b08      	ldr	r3, [pc, #32]	; (80014d8 <HAL_RCC_OscConfig+0x2b8>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	4a07      	ldr	r2, [pc, #28]	; (80014d8 <HAL_RCC_OscConfig+0x2b8>)
 80014bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014c2:	f7ff fbbf 	bl	8000c44 <HAL_GetTick>
 80014c6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014c8:	e011      	b.n	80014ee <HAL_RCC_OscConfig+0x2ce>
 80014ca:	bf00      	nop
 80014cc:	40023800 	.word	0x40023800
 80014d0:	42470000 	.word	0x42470000
 80014d4:	42470e80 	.word	0x42470e80
 80014d8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014dc:	f7ff fbb2 	bl	8000c44 <HAL_GetTick>
 80014e0:	4602      	mov	r2, r0
 80014e2:	693b      	ldr	r3, [r7, #16]
 80014e4:	1ad3      	subs	r3, r2, r3
 80014e6:	2b02      	cmp	r3, #2
 80014e8:	d901      	bls.n	80014ee <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80014ea:	2303      	movs	r3, #3
 80014ec:	e106      	b.n	80016fc <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014ee:	4b85      	ldr	r3, [pc, #532]	; (8001704 <HAL_RCC_OscConfig+0x4e4>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d0f0      	beq.n	80014dc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	689b      	ldr	r3, [r3, #8]
 80014fe:	2b01      	cmp	r3, #1
 8001500:	d106      	bne.n	8001510 <HAL_RCC_OscConfig+0x2f0>
 8001502:	4b81      	ldr	r3, [pc, #516]	; (8001708 <HAL_RCC_OscConfig+0x4e8>)
 8001504:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001506:	4a80      	ldr	r2, [pc, #512]	; (8001708 <HAL_RCC_OscConfig+0x4e8>)
 8001508:	f043 0301 	orr.w	r3, r3, #1
 800150c:	6713      	str	r3, [r2, #112]	; 0x70
 800150e:	e01c      	b.n	800154a <HAL_RCC_OscConfig+0x32a>
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	689b      	ldr	r3, [r3, #8]
 8001514:	2b05      	cmp	r3, #5
 8001516:	d10c      	bne.n	8001532 <HAL_RCC_OscConfig+0x312>
 8001518:	4b7b      	ldr	r3, [pc, #492]	; (8001708 <HAL_RCC_OscConfig+0x4e8>)
 800151a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800151c:	4a7a      	ldr	r2, [pc, #488]	; (8001708 <HAL_RCC_OscConfig+0x4e8>)
 800151e:	f043 0304 	orr.w	r3, r3, #4
 8001522:	6713      	str	r3, [r2, #112]	; 0x70
 8001524:	4b78      	ldr	r3, [pc, #480]	; (8001708 <HAL_RCC_OscConfig+0x4e8>)
 8001526:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001528:	4a77      	ldr	r2, [pc, #476]	; (8001708 <HAL_RCC_OscConfig+0x4e8>)
 800152a:	f043 0301 	orr.w	r3, r3, #1
 800152e:	6713      	str	r3, [r2, #112]	; 0x70
 8001530:	e00b      	b.n	800154a <HAL_RCC_OscConfig+0x32a>
 8001532:	4b75      	ldr	r3, [pc, #468]	; (8001708 <HAL_RCC_OscConfig+0x4e8>)
 8001534:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001536:	4a74      	ldr	r2, [pc, #464]	; (8001708 <HAL_RCC_OscConfig+0x4e8>)
 8001538:	f023 0301 	bic.w	r3, r3, #1
 800153c:	6713      	str	r3, [r2, #112]	; 0x70
 800153e:	4b72      	ldr	r3, [pc, #456]	; (8001708 <HAL_RCC_OscConfig+0x4e8>)
 8001540:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001542:	4a71      	ldr	r2, [pc, #452]	; (8001708 <HAL_RCC_OscConfig+0x4e8>)
 8001544:	f023 0304 	bic.w	r3, r3, #4
 8001548:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	689b      	ldr	r3, [r3, #8]
 800154e:	2b00      	cmp	r3, #0
 8001550:	d015      	beq.n	800157e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001552:	f7ff fb77 	bl	8000c44 <HAL_GetTick>
 8001556:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001558:	e00a      	b.n	8001570 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800155a:	f7ff fb73 	bl	8000c44 <HAL_GetTick>
 800155e:	4602      	mov	r2, r0
 8001560:	693b      	ldr	r3, [r7, #16]
 8001562:	1ad3      	subs	r3, r2, r3
 8001564:	f241 3288 	movw	r2, #5000	; 0x1388
 8001568:	4293      	cmp	r3, r2
 800156a:	d901      	bls.n	8001570 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800156c:	2303      	movs	r3, #3
 800156e:	e0c5      	b.n	80016fc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001570:	4b65      	ldr	r3, [pc, #404]	; (8001708 <HAL_RCC_OscConfig+0x4e8>)
 8001572:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001574:	f003 0302 	and.w	r3, r3, #2
 8001578:	2b00      	cmp	r3, #0
 800157a:	d0ee      	beq.n	800155a <HAL_RCC_OscConfig+0x33a>
 800157c:	e014      	b.n	80015a8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800157e:	f7ff fb61 	bl	8000c44 <HAL_GetTick>
 8001582:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001584:	e00a      	b.n	800159c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001586:	f7ff fb5d 	bl	8000c44 <HAL_GetTick>
 800158a:	4602      	mov	r2, r0
 800158c:	693b      	ldr	r3, [r7, #16]
 800158e:	1ad3      	subs	r3, r2, r3
 8001590:	f241 3288 	movw	r2, #5000	; 0x1388
 8001594:	4293      	cmp	r3, r2
 8001596:	d901      	bls.n	800159c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001598:	2303      	movs	r3, #3
 800159a:	e0af      	b.n	80016fc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800159c:	4b5a      	ldr	r3, [pc, #360]	; (8001708 <HAL_RCC_OscConfig+0x4e8>)
 800159e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015a0:	f003 0302 	and.w	r3, r3, #2
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d1ee      	bne.n	8001586 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80015a8:	7dfb      	ldrb	r3, [r7, #23]
 80015aa:	2b01      	cmp	r3, #1
 80015ac:	d105      	bne.n	80015ba <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015ae:	4b56      	ldr	r3, [pc, #344]	; (8001708 <HAL_RCC_OscConfig+0x4e8>)
 80015b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015b2:	4a55      	ldr	r2, [pc, #340]	; (8001708 <HAL_RCC_OscConfig+0x4e8>)
 80015b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80015b8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	699b      	ldr	r3, [r3, #24]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	f000 809b 	beq.w	80016fa <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80015c4:	4b50      	ldr	r3, [pc, #320]	; (8001708 <HAL_RCC_OscConfig+0x4e8>)
 80015c6:	689b      	ldr	r3, [r3, #8]
 80015c8:	f003 030c 	and.w	r3, r3, #12
 80015cc:	2b08      	cmp	r3, #8
 80015ce:	d05c      	beq.n	800168a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	699b      	ldr	r3, [r3, #24]
 80015d4:	2b02      	cmp	r3, #2
 80015d6:	d141      	bne.n	800165c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015d8:	4b4c      	ldr	r3, [pc, #304]	; (800170c <HAL_RCC_OscConfig+0x4ec>)
 80015da:	2200      	movs	r2, #0
 80015dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015de:	f7ff fb31 	bl	8000c44 <HAL_GetTick>
 80015e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015e4:	e008      	b.n	80015f8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015e6:	f7ff fb2d 	bl	8000c44 <HAL_GetTick>
 80015ea:	4602      	mov	r2, r0
 80015ec:	693b      	ldr	r3, [r7, #16]
 80015ee:	1ad3      	subs	r3, r2, r3
 80015f0:	2b02      	cmp	r3, #2
 80015f2:	d901      	bls.n	80015f8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80015f4:	2303      	movs	r3, #3
 80015f6:	e081      	b.n	80016fc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015f8:	4b43      	ldr	r3, [pc, #268]	; (8001708 <HAL_RCC_OscConfig+0x4e8>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001600:	2b00      	cmp	r3, #0
 8001602:	d1f0      	bne.n	80015e6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	69da      	ldr	r2, [r3, #28]
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	6a1b      	ldr	r3, [r3, #32]
 800160c:	431a      	orrs	r2, r3
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001612:	019b      	lsls	r3, r3, #6
 8001614:	431a      	orrs	r2, r3
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800161a:	085b      	lsrs	r3, r3, #1
 800161c:	3b01      	subs	r3, #1
 800161e:	041b      	lsls	r3, r3, #16
 8001620:	431a      	orrs	r2, r3
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001626:	061b      	lsls	r3, r3, #24
 8001628:	4937      	ldr	r1, [pc, #220]	; (8001708 <HAL_RCC_OscConfig+0x4e8>)
 800162a:	4313      	orrs	r3, r2
 800162c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800162e:	4b37      	ldr	r3, [pc, #220]	; (800170c <HAL_RCC_OscConfig+0x4ec>)
 8001630:	2201      	movs	r2, #1
 8001632:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001634:	f7ff fb06 	bl	8000c44 <HAL_GetTick>
 8001638:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800163a:	e008      	b.n	800164e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800163c:	f7ff fb02 	bl	8000c44 <HAL_GetTick>
 8001640:	4602      	mov	r2, r0
 8001642:	693b      	ldr	r3, [r7, #16]
 8001644:	1ad3      	subs	r3, r2, r3
 8001646:	2b02      	cmp	r3, #2
 8001648:	d901      	bls.n	800164e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800164a:	2303      	movs	r3, #3
 800164c:	e056      	b.n	80016fc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800164e:	4b2e      	ldr	r3, [pc, #184]	; (8001708 <HAL_RCC_OscConfig+0x4e8>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001656:	2b00      	cmp	r3, #0
 8001658:	d0f0      	beq.n	800163c <HAL_RCC_OscConfig+0x41c>
 800165a:	e04e      	b.n	80016fa <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800165c:	4b2b      	ldr	r3, [pc, #172]	; (800170c <HAL_RCC_OscConfig+0x4ec>)
 800165e:	2200      	movs	r2, #0
 8001660:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001662:	f7ff faef 	bl	8000c44 <HAL_GetTick>
 8001666:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001668:	e008      	b.n	800167c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800166a:	f7ff faeb 	bl	8000c44 <HAL_GetTick>
 800166e:	4602      	mov	r2, r0
 8001670:	693b      	ldr	r3, [r7, #16]
 8001672:	1ad3      	subs	r3, r2, r3
 8001674:	2b02      	cmp	r3, #2
 8001676:	d901      	bls.n	800167c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001678:	2303      	movs	r3, #3
 800167a:	e03f      	b.n	80016fc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800167c:	4b22      	ldr	r3, [pc, #136]	; (8001708 <HAL_RCC_OscConfig+0x4e8>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001684:	2b00      	cmp	r3, #0
 8001686:	d1f0      	bne.n	800166a <HAL_RCC_OscConfig+0x44a>
 8001688:	e037      	b.n	80016fa <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	699b      	ldr	r3, [r3, #24]
 800168e:	2b01      	cmp	r3, #1
 8001690:	d101      	bne.n	8001696 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001692:	2301      	movs	r3, #1
 8001694:	e032      	b.n	80016fc <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001696:	4b1c      	ldr	r3, [pc, #112]	; (8001708 <HAL_RCC_OscConfig+0x4e8>)
 8001698:	685b      	ldr	r3, [r3, #4]
 800169a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	699b      	ldr	r3, [r3, #24]
 80016a0:	2b01      	cmp	r3, #1
 80016a2:	d028      	beq.n	80016f6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80016ae:	429a      	cmp	r2, r3
 80016b0:	d121      	bne.n	80016f6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016bc:	429a      	cmp	r2, r3
 80016be:	d11a      	bne.n	80016f6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80016c0:	68fa      	ldr	r2, [r7, #12]
 80016c2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80016c6:	4013      	ands	r3, r2
 80016c8:	687a      	ldr	r2, [r7, #4]
 80016ca:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80016cc:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d111      	bne.n	80016f6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016dc:	085b      	lsrs	r3, r3, #1
 80016de:	3b01      	subs	r3, #1
 80016e0:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80016e2:	429a      	cmp	r2, r3
 80016e4:	d107      	bne.n	80016f6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016f0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80016f2:	429a      	cmp	r2, r3
 80016f4:	d001      	beq.n	80016fa <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80016f6:	2301      	movs	r3, #1
 80016f8:	e000      	b.n	80016fc <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80016fa:	2300      	movs	r3, #0
}
 80016fc:	4618      	mov	r0, r3
 80016fe:	3718      	adds	r7, #24
 8001700:	46bd      	mov	sp, r7
 8001702:	bd80      	pop	{r7, pc}
 8001704:	40007000 	.word	0x40007000
 8001708:	40023800 	.word	0x40023800
 800170c:	42470060 	.word	0x42470060

08001710 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b084      	sub	sp, #16
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
 8001718:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	2b00      	cmp	r3, #0
 800171e:	d101      	bne.n	8001724 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001720:	2301      	movs	r3, #1
 8001722:	e0cc      	b.n	80018be <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001724:	4b68      	ldr	r3, [pc, #416]	; (80018c8 <HAL_RCC_ClockConfig+0x1b8>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f003 0307 	and.w	r3, r3, #7
 800172c:	683a      	ldr	r2, [r7, #0]
 800172e:	429a      	cmp	r2, r3
 8001730:	d90c      	bls.n	800174c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001732:	4b65      	ldr	r3, [pc, #404]	; (80018c8 <HAL_RCC_ClockConfig+0x1b8>)
 8001734:	683a      	ldr	r2, [r7, #0]
 8001736:	b2d2      	uxtb	r2, r2
 8001738:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800173a:	4b63      	ldr	r3, [pc, #396]	; (80018c8 <HAL_RCC_ClockConfig+0x1b8>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f003 0307 	and.w	r3, r3, #7
 8001742:	683a      	ldr	r2, [r7, #0]
 8001744:	429a      	cmp	r2, r3
 8001746:	d001      	beq.n	800174c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001748:	2301      	movs	r3, #1
 800174a:	e0b8      	b.n	80018be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f003 0302 	and.w	r3, r3, #2
 8001754:	2b00      	cmp	r3, #0
 8001756:	d020      	beq.n	800179a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f003 0304 	and.w	r3, r3, #4
 8001760:	2b00      	cmp	r3, #0
 8001762:	d005      	beq.n	8001770 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001764:	4b59      	ldr	r3, [pc, #356]	; (80018cc <HAL_RCC_ClockConfig+0x1bc>)
 8001766:	689b      	ldr	r3, [r3, #8]
 8001768:	4a58      	ldr	r2, [pc, #352]	; (80018cc <HAL_RCC_ClockConfig+0x1bc>)
 800176a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800176e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f003 0308 	and.w	r3, r3, #8
 8001778:	2b00      	cmp	r3, #0
 800177a:	d005      	beq.n	8001788 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800177c:	4b53      	ldr	r3, [pc, #332]	; (80018cc <HAL_RCC_ClockConfig+0x1bc>)
 800177e:	689b      	ldr	r3, [r3, #8]
 8001780:	4a52      	ldr	r2, [pc, #328]	; (80018cc <HAL_RCC_ClockConfig+0x1bc>)
 8001782:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001786:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001788:	4b50      	ldr	r3, [pc, #320]	; (80018cc <HAL_RCC_ClockConfig+0x1bc>)
 800178a:	689b      	ldr	r3, [r3, #8]
 800178c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	689b      	ldr	r3, [r3, #8]
 8001794:	494d      	ldr	r1, [pc, #308]	; (80018cc <HAL_RCC_ClockConfig+0x1bc>)
 8001796:	4313      	orrs	r3, r2
 8001798:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f003 0301 	and.w	r3, r3, #1
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d044      	beq.n	8001830 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	2b01      	cmp	r3, #1
 80017ac:	d107      	bne.n	80017be <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017ae:	4b47      	ldr	r3, [pc, #284]	; (80018cc <HAL_RCC_ClockConfig+0x1bc>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d119      	bne.n	80017ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017ba:	2301      	movs	r3, #1
 80017bc:	e07f      	b.n	80018be <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	2b02      	cmp	r3, #2
 80017c4:	d003      	beq.n	80017ce <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017ca:	2b03      	cmp	r3, #3
 80017cc:	d107      	bne.n	80017de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017ce:	4b3f      	ldr	r3, [pc, #252]	; (80018cc <HAL_RCC_ClockConfig+0x1bc>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d109      	bne.n	80017ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017da:	2301      	movs	r3, #1
 80017dc:	e06f      	b.n	80018be <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017de:	4b3b      	ldr	r3, [pc, #236]	; (80018cc <HAL_RCC_ClockConfig+0x1bc>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f003 0302 	and.w	r3, r3, #2
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d101      	bne.n	80017ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017ea:	2301      	movs	r3, #1
 80017ec:	e067      	b.n	80018be <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80017ee:	4b37      	ldr	r3, [pc, #220]	; (80018cc <HAL_RCC_ClockConfig+0x1bc>)
 80017f0:	689b      	ldr	r3, [r3, #8]
 80017f2:	f023 0203 	bic.w	r2, r3, #3
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	4934      	ldr	r1, [pc, #208]	; (80018cc <HAL_RCC_ClockConfig+0x1bc>)
 80017fc:	4313      	orrs	r3, r2
 80017fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001800:	f7ff fa20 	bl	8000c44 <HAL_GetTick>
 8001804:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001806:	e00a      	b.n	800181e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001808:	f7ff fa1c 	bl	8000c44 <HAL_GetTick>
 800180c:	4602      	mov	r2, r0
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	1ad3      	subs	r3, r2, r3
 8001812:	f241 3288 	movw	r2, #5000	; 0x1388
 8001816:	4293      	cmp	r3, r2
 8001818:	d901      	bls.n	800181e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800181a:	2303      	movs	r3, #3
 800181c:	e04f      	b.n	80018be <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800181e:	4b2b      	ldr	r3, [pc, #172]	; (80018cc <HAL_RCC_ClockConfig+0x1bc>)
 8001820:	689b      	ldr	r3, [r3, #8]
 8001822:	f003 020c 	and.w	r2, r3, #12
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	009b      	lsls	r3, r3, #2
 800182c:	429a      	cmp	r2, r3
 800182e:	d1eb      	bne.n	8001808 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001830:	4b25      	ldr	r3, [pc, #148]	; (80018c8 <HAL_RCC_ClockConfig+0x1b8>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f003 0307 	and.w	r3, r3, #7
 8001838:	683a      	ldr	r2, [r7, #0]
 800183a:	429a      	cmp	r2, r3
 800183c:	d20c      	bcs.n	8001858 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800183e:	4b22      	ldr	r3, [pc, #136]	; (80018c8 <HAL_RCC_ClockConfig+0x1b8>)
 8001840:	683a      	ldr	r2, [r7, #0]
 8001842:	b2d2      	uxtb	r2, r2
 8001844:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001846:	4b20      	ldr	r3, [pc, #128]	; (80018c8 <HAL_RCC_ClockConfig+0x1b8>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f003 0307 	and.w	r3, r3, #7
 800184e:	683a      	ldr	r2, [r7, #0]
 8001850:	429a      	cmp	r2, r3
 8001852:	d001      	beq.n	8001858 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001854:	2301      	movs	r3, #1
 8001856:	e032      	b.n	80018be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f003 0304 	and.w	r3, r3, #4
 8001860:	2b00      	cmp	r3, #0
 8001862:	d008      	beq.n	8001876 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001864:	4b19      	ldr	r3, [pc, #100]	; (80018cc <HAL_RCC_ClockConfig+0x1bc>)
 8001866:	689b      	ldr	r3, [r3, #8]
 8001868:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	68db      	ldr	r3, [r3, #12]
 8001870:	4916      	ldr	r1, [pc, #88]	; (80018cc <HAL_RCC_ClockConfig+0x1bc>)
 8001872:	4313      	orrs	r3, r2
 8001874:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f003 0308 	and.w	r3, r3, #8
 800187e:	2b00      	cmp	r3, #0
 8001880:	d009      	beq.n	8001896 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001882:	4b12      	ldr	r3, [pc, #72]	; (80018cc <HAL_RCC_ClockConfig+0x1bc>)
 8001884:	689b      	ldr	r3, [r3, #8]
 8001886:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	691b      	ldr	r3, [r3, #16]
 800188e:	00db      	lsls	r3, r3, #3
 8001890:	490e      	ldr	r1, [pc, #56]	; (80018cc <HAL_RCC_ClockConfig+0x1bc>)
 8001892:	4313      	orrs	r3, r2
 8001894:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001896:	f000 f821 	bl	80018dc <HAL_RCC_GetSysClockFreq>
 800189a:	4602      	mov	r2, r0
 800189c:	4b0b      	ldr	r3, [pc, #44]	; (80018cc <HAL_RCC_ClockConfig+0x1bc>)
 800189e:	689b      	ldr	r3, [r3, #8]
 80018a0:	091b      	lsrs	r3, r3, #4
 80018a2:	f003 030f 	and.w	r3, r3, #15
 80018a6:	490a      	ldr	r1, [pc, #40]	; (80018d0 <HAL_RCC_ClockConfig+0x1c0>)
 80018a8:	5ccb      	ldrb	r3, [r1, r3]
 80018aa:	fa22 f303 	lsr.w	r3, r2, r3
 80018ae:	4a09      	ldr	r2, [pc, #36]	; (80018d4 <HAL_RCC_ClockConfig+0x1c4>)
 80018b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80018b2:	4b09      	ldr	r3, [pc, #36]	; (80018d8 <HAL_RCC_ClockConfig+0x1c8>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4618      	mov	r0, r3
 80018b8:	f7ff f85a 	bl	8000970 <HAL_InitTick>

  return HAL_OK;
 80018bc:	2300      	movs	r3, #0
}
 80018be:	4618      	mov	r0, r3
 80018c0:	3710      	adds	r7, #16
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	bf00      	nop
 80018c8:	40023c00 	.word	0x40023c00
 80018cc:	40023800 	.word	0x40023800
 80018d0:	08006600 	.word	0x08006600
 80018d4:	20000000 	.word	0x20000000
 80018d8:	20000004 	.word	0x20000004

080018dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018dc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80018e0:	b084      	sub	sp, #16
 80018e2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80018e4:	2300      	movs	r3, #0
 80018e6:	607b      	str	r3, [r7, #4]
 80018e8:	2300      	movs	r3, #0
 80018ea:	60fb      	str	r3, [r7, #12]
 80018ec:	2300      	movs	r3, #0
 80018ee:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80018f0:	2300      	movs	r3, #0
 80018f2:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80018f4:	4b67      	ldr	r3, [pc, #412]	; (8001a94 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80018f6:	689b      	ldr	r3, [r3, #8]
 80018f8:	f003 030c 	and.w	r3, r3, #12
 80018fc:	2b08      	cmp	r3, #8
 80018fe:	d00d      	beq.n	800191c <HAL_RCC_GetSysClockFreq+0x40>
 8001900:	2b08      	cmp	r3, #8
 8001902:	f200 80bd 	bhi.w	8001a80 <HAL_RCC_GetSysClockFreq+0x1a4>
 8001906:	2b00      	cmp	r3, #0
 8001908:	d002      	beq.n	8001910 <HAL_RCC_GetSysClockFreq+0x34>
 800190a:	2b04      	cmp	r3, #4
 800190c:	d003      	beq.n	8001916 <HAL_RCC_GetSysClockFreq+0x3a>
 800190e:	e0b7      	b.n	8001a80 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001910:	4b61      	ldr	r3, [pc, #388]	; (8001a98 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001912:	60bb      	str	r3, [r7, #8]
       break;
 8001914:	e0b7      	b.n	8001a86 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001916:	4b60      	ldr	r3, [pc, #384]	; (8001a98 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001918:	60bb      	str	r3, [r7, #8]
      break;
 800191a:	e0b4      	b.n	8001a86 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800191c:	4b5d      	ldr	r3, [pc, #372]	; (8001a94 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001924:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001926:	4b5b      	ldr	r3, [pc, #364]	; (8001a94 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001928:	685b      	ldr	r3, [r3, #4]
 800192a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800192e:	2b00      	cmp	r3, #0
 8001930:	d04d      	beq.n	80019ce <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001932:	4b58      	ldr	r3, [pc, #352]	; (8001a94 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	099b      	lsrs	r3, r3, #6
 8001938:	461a      	mov	r2, r3
 800193a:	f04f 0300 	mov.w	r3, #0
 800193e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001942:	f04f 0100 	mov.w	r1, #0
 8001946:	ea02 0800 	and.w	r8, r2, r0
 800194a:	ea03 0901 	and.w	r9, r3, r1
 800194e:	4640      	mov	r0, r8
 8001950:	4649      	mov	r1, r9
 8001952:	f04f 0200 	mov.w	r2, #0
 8001956:	f04f 0300 	mov.w	r3, #0
 800195a:	014b      	lsls	r3, r1, #5
 800195c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001960:	0142      	lsls	r2, r0, #5
 8001962:	4610      	mov	r0, r2
 8001964:	4619      	mov	r1, r3
 8001966:	ebb0 0008 	subs.w	r0, r0, r8
 800196a:	eb61 0109 	sbc.w	r1, r1, r9
 800196e:	f04f 0200 	mov.w	r2, #0
 8001972:	f04f 0300 	mov.w	r3, #0
 8001976:	018b      	lsls	r3, r1, #6
 8001978:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800197c:	0182      	lsls	r2, r0, #6
 800197e:	1a12      	subs	r2, r2, r0
 8001980:	eb63 0301 	sbc.w	r3, r3, r1
 8001984:	f04f 0000 	mov.w	r0, #0
 8001988:	f04f 0100 	mov.w	r1, #0
 800198c:	00d9      	lsls	r1, r3, #3
 800198e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001992:	00d0      	lsls	r0, r2, #3
 8001994:	4602      	mov	r2, r0
 8001996:	460b      	mov	r3, r1
 8001998:	eb12 0208 	adds.w	r2, r2, r8
 800199c:	eb43 0309 	adc.w	r3, r3, r9
 80019a0:	f04f 0000 	mov.w	r0, #0
 80019a4:	f04f 0100 	mov.w	r1, #0
 80019a8:	0299      	lsls	r1, r3, #10
 80019aa:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80019ae:	0290      	lsls	r0, r2, #10
 80019b0:	4602      	mov	r2, r0
 80019b2:	460b      	mov	r3, r1
 80019b4:	4610      	mov	r0, r2
 80019b6:	4619      	mov	r1, r3
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	461a      	mov	r2, r3
 80019bc:	f04f 0300 	mov.w	r3, #0
 80019c0:	f7fe fc0e 	bl	80001e0 <__aeabi_uldivmod>
 80019c4:	4602      	mov	r2, r0
 80019c6:	460b      	mov	r3, r1
 80019c8:	4613      	mov	r3, r2
 80019ca:	60fb      	str	r3, [r7, #12]
 80019cc:	e04a      	b.n	8001a64 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019ce:	4b31      	ldr	r3, [pc, #196]	; (8001a94 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	099b      	lsrs	r3, r3, #6
 80019d4:	461a      	mov	r2, r3
 80019d6:	f04f 0300 	mov.w	r3, #0
 80019da:	f240 10ff 	movw	r0, #511	; 0x1ff
 80019de:	f04f 0100 	mov.w	r1, #0
 80019e2:	ea02 0400 	and.w	r4, r2, r0
 80019e6:	ea03 0501 	and.w	r5, r3, r1
 80019ea:	4620      	mov	r0, r4
 80019ec:	4629      	mov	r1, r5
 80019ee:	f04f 0200 	mov.w	r2, #0
 80019f2:	f04f 0300 	mov.w	r3, #0
 80019f6:	014b      	lsls	r3, r1, #5
 80019f8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80019fc:	0142      	lsls	r2, r0, #5
 80019fe:	4610      	mov	r0, r2
 8001a00:	4619      	mov	r1, r3
 8001a02:	1b00      	subs	r0, r0, r4
 8001a04:	eb61 0105 	sbc.w	r1, r1, r5
 8001a08:	f04f 0200 	mov.w	r2, #0
 8001a0c:	f04f 0300 	mov.w	r3, #0
 8001a10:	018b      	lsls	r3, r1, #6
 8001a12:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001a16:	0182      	lsls	r2, r0, #6
 8001a18:	1a12      	subs	r2, r2, r0
 8001a1a:	eb63 0301 	sbc.w	r3, r3, r1
 8001a1e:	f04f 0000 	mov.w	r0, #0
 8001a22:	f04f 0100 	mov.w	r1, #0
 8001a26:	00d9      	lsls	r1, r3, #3
 8001a28:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001a2c:	00d0      	lsls	r0, r2, #3
 8001a2e:	4602      	mov	r2, r0
 8001a30:	460b      	mov	r3, r1
 8001a32:	1912      	adds	r2, r2, r4
 8001a34:	eb45 0303 	adc.w	r3, r5, r3
 8001a38:	f04f 0000 	mov.w	r0, #0
 8001a3c:	f04f 0100 	mov.w	r1, #0
 8001a40:	0299      	lsls	r1, r3, #10
 8001a42:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001a46:	0290      	lsls	r0, r2, #10
 8001a48:	4602      	mov	r2, r0
 8001a4a:	460b      	mov	r3, r1
 8001a4c:	4610      	mov	r0, r2
 8001a4e:	4619      	mov	r1, r3
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	461a      	mov	r2, r3
 8001a54:	f04f 0300 	mov.w	r3, #0
 8001a58:	f7fe fbc2 	bl	80001e0 <__aeabi_uldivmod>
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	460b      	mov	r3, r1
 8001a60:	4613      	mov	r3, r2
 8001a62:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001a64:	4b0b      	ldr	r3, [pc, #44]	; (8001a94 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	0c1b      	lsrs	r3, r3, #16
 8001a6a:	f003 0303 	and.w	r3, r3, #3
 8001a6e:	3301      	adds	r3, #1
 8001a70:	005b      	lsls	r3, r3, #1
 8001a72:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001a74:	68fa      	ldr	r2, [r7, #12]
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a7c:	60bb      	str	r3, [r7, #8]
      break;
 8001a7e:	e002      	b.n	8001a86 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001a80:	4b05      	ldr	r3, [pc, #20]	; (8001a98 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001a82:	60bb      	str	r3, [r7, #8]
      break;
 8001a84:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a86:	68bb      	ldr	r3, [r7, #8]
}
 8001a88:	4618      	mov	r0, r3
 8001a8a:	3710      	adds	r7, #16
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001a92:	bf00      	nop
 8001a94:	40023800 	.word	0x40023800
 8001a98:	00f42400 	.word	0x00f42400

08001a9c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001aa0:	4b03      	ldr	r3, [pc, #12]	; (8001ab0 <HAL_RCC_GetHCLKFreq+0x14>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
}
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aac:	4770      	bx	lr
 8001aae:	bf00      	nop
 8001ab0:	20000000 	.word	0x20000000

08001ab4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001ab8:	f7ff fff0 	bl	8001a9c <HAL_RCC_GetHCLKFreq>
 8001abc:	4602      	mov	r2, r0
 8001abe:	4b05      	ldr	r3, [pc, #20]	; (8001ad4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001ac0:	689b      	ldr	r3, [r3, #8]
 8001ac2:	0b5b      	lsrs	r3, r3, #13
 8001ac4:	f003 0307 	and.w	r3, r3, #7
 8001ac8:	4903      	ldr	r1, [pc, #12]	; (8001ad8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001aca:	5ccb      	ldrb	r3, [r1, r3]
 8001acc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	bd80      	pop	{r7, pc}
 8001ad4:	40023800 	.word	0x40023800
 8001ad8:	08006610 	.word	0x08006610

08001adc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001adc:	b480      	push	{r7}
 8001ade:	b083      	sub	sp, #12
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
 8001ae4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	220f      	movs	r2, #15
 8001aea:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001aec:	4b12      	ldr	r3, [pc, #72]	; (8001b38 <HAL_RCC_GetClockConfig+0x5c>)
 8001aee:	689b      	ldr	r3, [r3, #8]
 8001af0:	f003 0203 	and.w	r2, r3, #3
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001af8:	4b0f      	ldr	r3, [pc, #60]	; (8001b38 <HAL_RCC_GetClockConfig+0x5c>)
 8001afa:	689b      	ldr	r3, [r3, #8]
 8001afc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001b04:	4b0c      	ldr	r3, [pc, #48]	; (8001b38 <HAL_RCC_GetClockConfig+0x5c>)
 8001b06:	689b      	ldr	r3, [r3, #8]
 8001b08:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001b10:	4b09      	ldr	r3, [pc, #36]	; (8001b38 <HAL_RCC_GetClockConfig+0x5c>)
 8001b12:	689b      	ldr	r3, [r3, #8]
 8001b14:	08db      	lsrs	r3, r3, #3
 8001b16:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001b1e:	4b07      	ldr	r3, [pc, #28]	; (8001b3c <HAL_RCC_GetClockConfig+0x60>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f003 0207 	and.w	r2, r3, #7
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	601a      	str	r2, [r3, #0]
}
 8001b2a:	bf00      	nop
 8001b2c:	370c      	adds	r7, #12
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b34:	4770      	bx	lr
 8001b36:	bf00      	nop
 8001b38:	40023800 	.word	0x40023800
 8001b3c:	40023c00 	.word	0x40023c00

08001b40 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b082      	sub	sp, #8
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d101      	bne.n	8001b52 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001b4e:	2301      	movs	r3, #1
 8001b50:	e041      	b.n	8001bd6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b58:	b2db      	uxtb	r3, r3
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d106      	bne.n	8001b6c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	2200      	movs	r2, #0
 8001b62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001b66:	6878      	ldr	r0, [r7, #4]
 8001b68:	f7fe fedc 	bl	8000924 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2202      	movs	r2, #2
 8001b70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681a      	ldr	r2, [r3, #0]
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	3304      	adds	r3, #4
 8001b7c:	4619      	mov	r1, r3
 8001b7e:	4610      	mov	r0, r2
 8001b80:	f000 fa96 	bl	80020b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2201      	movs	r2, #1
 8001b88:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2201      	movs	r2, #1
 8001b90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2201      	movs	r2, #1
 8001b98:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2201      	movs	r2, #1
 8001ba0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2201      	movs	r2, #1
 8001ba8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2201      	movs	r2, #1
 8001bb0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	2201      	movs	r2, #1
 8001bb8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2201      	movs	r2, #1
 8001bc0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2201      	movs	r2, #1
 8001bc8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2201      	movs	r2, #1
 8001bd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001bd4:	2300      	movs	r3, #0
}
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	3708      	adds	r7, #8
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}
	...

08001be0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001be0:	b480      	push	{r7}
 8001be2:	b085      	sub	sp, #20
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001bee:	b2db      	uxtb	r3, r3
 8001bf0:	2b01      	cmp	r3, #1
 8001bf2:	d001      	beq.n	8001bf8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	e04e      	b.n	8001c96 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2202      	movs	r2, #2
 8001bfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	68da      	ldr	r2, [r3, #12]
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f042 0201 	orr.w	r2, r2, #1
 8001c0e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4a23      	ldr	r2, [pc, #140]	; (8001ca4 <HAL_TIM_Base_Start_IT+0xc4>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d022      	beq.n	8001c60 <HAL_TIM_Base_Start_IT+0x80>
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c22:	d01d      	beq.n	8001c60 <HAL_TIM_Base_Start_IT+0x80>
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4a1f      	ldr	r2, [pc, #124]	; (8001ca8 <HAL_TIM_Base_Start_IT+0xc8>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d018      	beq.n	8001c60 <HAL_TIM_Base_Start_IT+0x80>
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4a1e      	ldr	r2, [pc, #120]	; (8001cac <HAL_TIM_Base_Start_IT+0xcc>)
 8001c34:	4293      	cmp	r3, r2
 8001c36:	d013      	beq.n	8001c60 <HAL_TIM_Base_Start_IT+0x80>
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4a1c      	ldr	r2, [pc, #112]	; (8001cb0 <HAL_TIM_Base_Start_IT+0xd0>)
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d00e      	beq.n	8001c60 <HAL_TIM_Base_Start_IT+0x80>
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4a1b      	ldr	r2, [pc, #108]	; (8001cb4 <HAL_TIM_Base_Start_IT+0xd4>)
 8001c48:	4293      	cmp	r3, r2
 8001c4a:	d009      	beq.n	8001c60 <HAL_TIM_Base_Start_IT+0x80>
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4a19      	ldr	r2, [pc, #100]	; (8001cb8 <HAL_TIM_Base_Start_IT+0xd8>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d004      	beq.n	8001c60 <HAL_TIM_Base_Start_IT+0x80>
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4a18      	ldr	r2, [pc, #96]	; (8001cbc <HAL_TIM_Base_Start_IT+0xdc>)
 8001c5c:	4293      	cmp	r3, r2
 8001c5e:	d111      	bne.n	8001c84 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	689b      	ldr	r3, [r3, #8]
 8001c66:	f003 0307 	and.w	r3, r3, #7
 8001c6a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	2b06      	cmp	r3, #6
 8001c70:	d010      	beq.n	8001c94 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	681a      	ldr	r2, [r3, #0]
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f042 0201 	orr.w	r2, r2, #1
 8001c80:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c82:	e007      	b.n	8001c94 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	681a      	ldr	r2, [r3, #0]
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f042 0201 	orr.w	r2, r2, #1
 8001c92:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001c94:	2300      	movs	r3, #0
}
 8001c96:	4618      	mov	r0, r3
 8001c98:	3714      	adds	r7, #20
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca0:	4770      	bx	lr
 8001ca2:	bf00      	nop
 8001ca4:	40010000 	.word	0x40010000
 8001ca8:	40000400 	.word	0x40000400
 8001cac:	40000800 	.word	0x40000800
 8001cb0:	40000c00 	.word	0x40000c00
 8001cb4:	40010400 	.word	0x40010400
 8001cb8:	40014000 	.word	0x40014000
 8001cbc:	40001800 	.word	0x40001800

08001cc0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b082      	sub	sp, #8
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	691b      	ldr	r3, [r3, #16]
 8001cce:	f003 0302 	and.w	r3, r3, #2
 8001cd2:	2b02      	cmp	r3, #2
 8001cd4:	d122      	bne.n	8001d1c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	68db      	ldr	r3, [r3, #12]
 8001cdc:	f003 0302 	and.w	r3, r3, #2
 8001ce0:	2b02      	cmp	r3, #2
 8001ce2:	d11b      	bne.n	8001d1c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f06f 0202 	mvn.w	r2, #2
 8001cec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	2201      	movs	r2, #1
 8001cf2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	699b      	ldr	r3, [r3, #24]
 8001cfa:	f003 0303 	and.w	r3, r3, #3
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d003      	beq.n	8001d0a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001d02:	6878      	ldr	r0, [r7, #4]
 8001d04:	f000 f9b5 	bl	8002072 <HAL_TIM_IC_CaptureCallback>
 8001d08:	e005      	b.n	8001d16 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d0a:	6878      	ldr	r0, [r7, #4]
 8001d0c:	f000 f9a7 	bl	800205e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d10:	6878      	ldr	r0, [r7, #4]
 8001d12:	f000 f9b8 	bl	8002086 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	2200      	movs	r2, #0
 8001d1a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	691b      	ldr	r3, [r3, #16]
 8001d22:	f003 0304 	and.w	r3, r3, #4
 8001d26:	2b04      	cmp	r3, #4
 8001d28:	d122      	bne.n	8001d70 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	68db      	ldr	r3, [r3, #12]
 8001d30:	f003 0304 	and.w	r3, r3, #4
 8001d34:	2b04      	cmp	r3, #4
 8001d36:	d11b      	bne.n	8001d70 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f06f 0204 	mvn.w	r2, #4
 8001d40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	2202      	movs	r2, #2
 8001d46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	699b      	ldr	r3, [r3, #24]
 8001d4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d003      	beq.n	8001d5e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d56:	6878      	ldr	r0, [r7, #4]
 8001d58:	f000 f98b 	bl	8002072 <HAL_TIM_IC_CaptureCallback>
 8001d5c:	e005      	b.n	8001d6a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d5e:	6878      	ldr	r0, [r7, #4]
 8001d60:	f000 f97d 	bl	800205e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d64:	6878      	ldr	r0, [r7, #4]
 8001d66:	f000 f98e 	bl	8002086 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	691b      	ldr	r3, [r3, #16]
 8001d76:	f003 0308 	and.w	r3, r3, #8
 8001d7a:	2b08      	cmp	r3, #8
 8001d7c:	d122      	bne.n	8001dc4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	68db      	ldr	r3, [r3, #12]
 8001d84:	f003 0308 	and.w	r3, r3, #8
 8001d88:	2b08      	cmp	r3, #8
 8001d8a:	d11b      	bne.n	8001dc4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f06f 0208 	mvn.w	r2, #8
 8001d94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2204      	movs	r2, #4
 8001d9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	69db      	ldr	r3, [r3, #28]
 8001da2:	f003 0303 	and.w	r3, r3, #3
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d003      	beq.n	8001db2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001daa:	6878      	ldr	r0, [r7, #4]
 8001dac:	f000 f961 	bl	8002072 <HAL_TIM_IC_CaptureCallback>
 8001db0:	e005      	b.n	8001dbe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001db2:	6878      	ldr	r0, [r7, #4]
 8001db4:	f000 f953 	bl	800205e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001db8:	6878      	ldr	r0, [r7, #4]
 8001dba:	f000 f964 	bl	8002086 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	691b      	ldr	r3, [r3, #16]
 8001dca:	f003 0310 	and.w	r3, r3, #16
 8001dce:	2b10      	cmp	r3, #16
 8001dd0:	d122      	bne.n	8001e18 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	68db      	ldr	r3, [r3, #12]
 8001dd8:	f003 0310 	and.w	r3, r3, #16
 8001ddc:	2b10      	cmp	r3, #16
 8001dde:	d11b      	bne.n	8001e18 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f06f 0210 	mvn.w	r2, #16
 8001de8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2208      	movs	r2, #8
 8001dee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	69db      	ldr	r3, [r3, #28]
 8001df6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d003      	beq.n	8001e06 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001dfe:	6878      	ldr	r0, [r7, #4]
 8001e00:	f000 f937 	bl	8002072 <HAL_TIM_IC_CaptureCallback>
 8001e04:	e005      	b.n	8001e12 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e06:	6878      	ldr	r0, [r7, #4]
 8001e08:	f000 f929 	bl	800205e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e0c:	6878      	ldr	r0, [r7, #4]
 8001e0e:	f000 f93a 	bl	8002086 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	2200      	movs	r2, #0
 8001e16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	691b      	ldr	r3, [r3, #16]
 8001e1e:	f003 0301 	and.w	r3, r3, #1
 8001e22:	2b01      	cmp	r3, #1
 8001e24:	d10e      	bne.n	8001e44 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	68db      	ldr	r3, [r3, #12]
 8001e2c:	f003 0301 	and.w	r3, r3, #1
 8001e30:	2b01      	cmp	r3, #1
 8001e32:	d107      	bne.n	8001e44 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f06f 0201 	mvn.w	r2, #1
 8001e3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001e3e:	6878      	ldr	r0, [r7, #4]
 8001e40:	f7fe fd24 	bl	800088c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	691b      	ldr	r3, [r3, #16]
 8001e4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e4e:	2b80      	cmp	r3, #128	; 0x80
 8001e50:	d10e      	bne.n	8001e70 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	68db      	ldr	r3, [r3, #12]
 8001e58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e5c:	2b80      	cmp	r3, #128	; 0x80
 8001e5e:	d107      	bne.n	8001e70 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001e68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001e6a:	6878      	ldr	r0, [r7, #4]
 8001e6c:	f000 fae0 	bl	8002430 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	691b      	ldr	r3, [r3, #16]
 8001e76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e7a:	2b40      	cmp	r3, #64	; 0x40
 8001e7c:	d10e      	bne.n	8001e9c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	68db      	ldr	r3, [r3, #12]
 8001e84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e88:	2b40      	cmp	r3, #64	; 0x40
 8001e8a:	d107      	bne.n	8001e9c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001e94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001e96:	6878      	ldr	r0, [r7, #4]
 8001e98:	f000 f8ff 	bl	800209a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	691b      	ldr	r3, [r3, #16]
 8001ea2:	f003 0320 	and.w	r3, r3, #32
 8001ea6:	2b20      	cmp	r3, #32
 8001ea8:	d10e      	bne.n	8001ec8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	68db      	ldr	r3, [r3, #12]
 8001eb0:	f003 0320 	and.w	r3, r3, #32
 8001eb4:	2b20      	cmp	r3, #32
 8001eb6:	d107      	bne.n	8001ec8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f06f 0220 	mvn.w	r2, #32
 8001ec0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001ec2:	6878      	ldr	r0, [r7, #4]
 8001ec4:	f000 faaa 	bl	800241c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001ec8:	bf00      	nop
 8001eca:	3708      	adds	r7, #8
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bd80      	pop	{r7, pc}

08001ed0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b084      	sub	sp, #16
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
 8001ed8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001eda:	2300      	movs	r3, #0
 8001edc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ee4:	2b01      	cmp	r3, #1
 8001ee6:	d101      	bne.n	8001eec <HAL_TIM_ConfigClockSource+0x1c>
 8001ee8:	2302      	movs	r3, #2
 8001eea:	e0b4      	b.n	8002056 <HAL_TIM_ConfigClockSource+0x186>
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2201      	movs	r2, #1
 8001ef0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2202      	movs	r2, #2
 8001ef8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	689b      	ldr	r3, [r3, #8]
 8001f02:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001f04:	68bb      	ldr	r3, [r7, #8]
 8001f06:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001f0a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001f0c:	68bb      	ldr	r3, [r7, #8]
 8001f0e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001f12:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	68ba      	ldr	r2, [r7, #8]
 8001f1a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001f24:	d03e      	beq.n	8001fa4 <HAL_TIM_ConfigClockSource+0xd4>
 8001f26:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001f2a:	f200 8087 	bhi.w	800203c <HAL_TIM_ConfigClockSource+0x16c>
 8001f2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f32:	f000 8086 	beq.w	8002042 <HAL_TIM_ConfigClockSource+0x172>
 8001f36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f3a:	d87f      	bhi.n	800203c <HAL_TIM_ConfigClockSource+0x16c>
 8001f3c:	2b70      	cmp	r3, #112	; 0x70
 8001f3e:	d01a      	beq.n	8001f76 <HAL_TIM_ConfigClockSource+0xa6>
 8001f40:	2b70      	cmp	r3, #112	; 0x70
 8001f42:	d87b      	bhi.n	800203c <HAL_TIM_ConfigClockSource+0x16c>
 8001f44:	2b60      	cmp	r3, #96	; 0x60
 8001f46:	d050      	beq.n	8001fea <HAL_TIM_ConfigClockSource+0x11a>
 8001f48:	2b60      	cmp	r3, #96	; 0x60
 8001f4a:	d877      	bhi.n	800203c <HAL_TIM_ConfigClockSource+0x16c>
 8001f4c:	2b50      	cmp	r3, #80	; 0x50
 8001f4e:	d03c      	beq.n	8001fca <HAL_TIM_ConfigClockSource+0xfa>
 8001f50:	2b50      	cmp	r3, #80	; 0x50
 8001f52:	d873      	bhi.n	800203c <HAL_TIM_ConfigClockSource+0x16c>
 8001f54:	2b40      	cmp	r3, #64	; 0x40
 8001f56:	d058      	beq.n	800200a <HAL_TIM_ConfigClockSource+0x13a>
 8001f58:	2b40      	cmp	r3, #64	; 0x40
 8001f5a:	d86f      	bhi.n	800203c <HAL_TIM_ConfigClockSource+0x16c>
 8001f5c:	2b30      	cmp	r3, #48	; 0x30
 8001f5e:	d064      	beq.n	800202a <HAL_TIM_ConfigClockSource+0x15a>
 8001f60:	2b30      	cmp	r3, #48	; 0x30
 8001f62:	d86b      	bhi.n	800203c <HAL_TIM_ConfigClockSource+0x16c>
 8001f64:	2b20      	cmp	r3, #32
 8001f66:	d060      	beq.n	800202a <HAL_TIM_ConfigClockSource+0x15a>
 8001f68:	2b20      	cmp	r3, #32
 8001f6a:	d867      	bhi.n	800203c <HAL_TIM_ConfigClockSource+0x16c>
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d05c      	beq.n	800202a <HAL_TIM_ConfigClockSource+0x15a>
 8001f70:	2b10      	cmp	r3, #16
 8001f72:	d05a      	beq.n	800202a <HAL_TIM_ConfigClockSource+0x15a>
 8001f74:	e062      	b.n	800203c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6818      	ldr	r0, [r3, #0]
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	6899      	ldr	r1, [r3, #8]
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	685a      	ldr	r2, [r3, #4]
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	68db      	ldr	r3, [r3, #12]
 8001f86:	f000 f9ad 	bl	80022e4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	689b      	ldr	r3, [r3, #8]
 8001f90:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001f92:	68bb      	ldr	r3, [r7, #8]
 8001f94:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001f98:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	68ba      	ldr	r2, [r7, #8]
 8001fa0:	609a      	str	r2, [r3, #8]
      break;
 8001fa2:	e04f      	b.n	8002044 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6818      	ldr	r0, [r3, #0]
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	6899      	ldr	r1, [r3, #8]
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	685a      	ldr	r2, [r3, #4]
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	68db      	ldr	r3, [r3, #12]
 8001fb4:	f000 f996 	bl	80022e4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	689a      	ldr	r2, [r3, #8]
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001fc6:	609a      	str	r2, [r3, #8]
      break;
 8001fc8:	e03c      	b.n	8002044 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6818      	ldr	r0, [r3, #0]
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	6859      	ldr	r1, [r3, #4]
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	68db      	ldr	r3, [r3, #12]
 8001fd6:	461a      	mov	r2, r3
 8001fd8:	f000 f90a 	bl	80021f0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	2150      	movs	r1, #80	; 0x50
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	f000 f963 	bl	80022ae <TIM_ITRx_SetConfig>
      break;
 8001fe8:	e02c      	b.n	8002044 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6818      	ldr	r0, [r3, #0]
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	6859      	ldr	r1, [r3, #4]
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	68db      	ldr	r3, [r3, #12]
 8001ff6:	461a      	mov	r2, r3
 8001ff8:	f000 f929 	bl	800224e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	2160      	movs	r1, #96	; 0x60
 8002002:	4618      	mov	r0, r3
 8002004:	f000 f953 	bl	80022ae <TIM_ITRx_SetConfig>
      break;
 8002008:	e01c      	b.n	8002044 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6818      	ldr	r0, [r3, #0]
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	6859      	ldr	r1, [r3, #4]
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	68db      	ldr	r3, [r3, #12]
 8002016:	461a      	mov	r2, r3
 8002018:	f000 f8ea 	bl	80021f0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	2140      	movs	r1, #64	; 0x40
 8002022:	4618      	mov	r0, r3
 8002024:	f000 f943 	bl	80022ae <TIM_ITRx_SetConfig>
      break;
 8002028:	e00c      	b.n	8002044 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681a      	ldr	r2, [r3, #0]
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	4619      	mov	r1, r3
 8002034:	4610      	mov	r0, r2
 8002036:	f000 f93a 	bl	80022ae <TIM_ITRx_SetConfig>
      break;
 800203a:	e003      	b.n	8002044 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800203c:	2301      	movs	r3, #1
 800203e:	73fb      	strb	r3, [r7, #15]
      break;
 8002040:	e000      	b.n	8002044 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002042:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2201      	movs	r2, #1
 8002048:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2200      	movs	r2, #0
 8002050:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002054:	7bfb      	ldrb	r3, [r7, #15]
}
 8002056:	4618      	mov	r0, r3
 8002058:	3710      	adds	r7, #16
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}

0800205e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800205e:	b480      	push	{r7}
 8002060:	b083      	sub	sp, #12
 8002062:	af00      	add	r7, sp, #0
 8002064:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002066:	bf00      	nop
 8002068:	370c      	adds	r7, #12
 800206a:	46bd      	mov	sp, r7
 800206c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002070:	4770      	bx	lr

08002072 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002072:	b480      	push	{r7}
 8002074:	b083      	sub	sp, #12
 8002076:	af00      	add	r7, sp, #0
 8002078:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800207a:	bf00      	nop
 800207c:	370c      	adds	r7, #12
 800207e:	46bd      	mov	sp, r7
 8002080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002084:	4770      	bx	lr

08002086 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002086:	b480      	push	{r7}
 8002088:	b083      	sub	sp, #12
 800208a:	af00      	add	r7, sp, #0
 800208c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800208e:	bf00      	nop
 8002090:	370c      	adds	r7, #12
 8002092:	46bd      	mov	sp, r7
 8002094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002098:	4770      	bx	lr

0800209a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800209a:	b480      	push	{r7}
 800209c:	b083      	sub	sp, #12
 800209e:	af00      	add	r7, sp, #0
 80020a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80020a2:	bf00      	nop
 80020a4:	370c      	adds	r7, #12
 80020a6:	46bd      	mov	sp, r7
 80020a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ac:	4770      	bx	lr
	...

080020b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80020b0:	b480      	push	{r7}
 80020b2:	b085      	sub	sp, #20
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
 80020b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	4a40      	ldr	r2, [pc, #256]	; (80021c4 <TIM_Base_SetConfig+0x114>)
 80020c4:	4293      	cmp	r3, r2
 80020c6:	d013      	beq.n	80020f0 <TIM_Base_SetConfig+0x40>
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020ce:	d00f      	beq.n	80020f0 <TIM_Base_SetConfig+0x40>
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	4a3d      	ldr	r2, [pc, #244]	; (80021c8 <TIM_Base_SetConfig+0x118>)
 80020d4:	4293      	cmp	r3, r2
 80020d6:	d00b      	beq.n	80020f0 <TIM_Base_SetConfig+0x40>
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	4a3c      	ldr	r2, [pc, #240]	; (80021cc <TIM_Base_SetConfig+0x11c>)
 80020dc:	4293      	cmp	r3, r2
 80020de:	d007      	beq.n	80020f0 <TIM_Base_SetConfig+0x40>
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	4a3b      	ldr	r2, [pc, #236]	; (80021d0 <TIM_Base_SetConfig+0x120>)
 80020e4:	4293      	cmp	r3, r2
 80020e6:	d003      	beq.n	80020f0 <TIM_Base_SetConfig+0x40>
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	4a3a      	ldr	r2, [pc, #232]	; (80021d4 <TIM_Base_SetConfig+0x124>)
 80020ec:	4293      	cmp	r3, r2
 80020ee:	d108      	bne.n	8002102 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80020f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	68fa      	ldr	r2, [r7, #12]
 80020fe:	4313      	orrs	r3, r2
 8002100:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	4a2f      	ldr	r2, [pc, #188]	; (80021c4 <TIM_Base_SetConfig+0x114>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d02b      	beq.n	8002162 <TIM_Base_SetConfig+0xb2>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002110:	d027      	beq.n	8002162 <TIM_Base_SetConfig+0xb2>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	4a2c      	ldr	r2, [pc, #176]	; (80021c8 <TIM_Base_SetConfig+0x118>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d023      	beq.n	8002162 <TIM_Base_SetConfig+0xb2>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	4a2b      	ldr	r2, [pc, #172]	; (80021cc <TIM_Base_SetConfig+0x11c>)
 800211e:	4293      	cmp	r3, r2
 8002120:	d01f      	beq.n	8002162 <TIM_Base_SetConfig+0xb2>
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	4a2a      	ldr	r2, [pc, #168]	; (80021d0 <TIM_Base_SetConfig+0x120>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d01b      	beq.n	8002162 <TIM_Base_SetConfig+0xb2>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	4a29      	ldr	r2, [pc, #164]	; (80021d4 <TIM_Base_SetConfig+0x124>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d017      	beq.n	8002162 <TIM_Base_SetConfig+0xb2>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	4a28      	ldr	r2, [pc, #160]	; (80021d8 <TIM_Base_SetConfig+0x128>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d013      	beq.n	8002162 <TIM_Base_SetConfig+0xb2>
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	4a27      	ldr	r2, [pc, #156]	; (80021dc <TIM_Base_SetConfig+0x12c>)
 800213e:	4293      	cmp	r3, r2
 8002140:	d00f      	beq.n	8002162 <TIM_Base_SetConfig+0xb2>
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	4a26      	ldr	r2, [pc, #152]	; (80021e0 <TIM_Base_SetConfig+0x130>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d00b      	beq.n	8002162 <TIM_Base_SetConfig+0xb2>
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	4a25      	ldr	r2, [pc, #148]	; (80021e4 <TIM_Base_SetConfig+0x134>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d007      	beq.n	8002162 <TIM_Base_SetConfig+0xb2>
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	4a24      	ldr	r2, [pc, #144]	; (80021e8 <TIM_Base_SetConfig+0x138>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d003      	beq.n	8002162 <TIM_Base_SetConfig+0xb2>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	4a23      	ldr	r2, [pc, #140]	; (80021ec <TIM_Base_SetConfig+0x13c>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d108      	bne.n	8002174 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002168:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	68db      	ldr	r3, [r3, #12]
 800216e:	68fa      	ldr	r2, [r7, #12]
 8002170:	4313      	orrs	r3, r2
 8002172:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	695b      	ldr	r3, [r3, #20]
 800217e:	4313      	orrs	r3, r2
 8002180:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	68fa      	ldr	r2, [r7, #12]
 8002186:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	689a      	ldr	r2, [r3, #8]
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	681a      	ldr	r2, [r3, #0]
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	4a0a      	ldr	r2, [pc, #40]	; (80021c4 <TIM_Base_SetConfig+0x114>)
 800219c:	4293      	cmp	r3, r2
 800219e:	d003      	beq.n	80021a8 <TIM_Base_SetConfig+0xf8>
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	4a0c      	ldr	r2, [pc, #48]	; (80021d4 <TIM_Base_SetConfig+0x124>)
 80021a4:	4293      	cmp	r3, r2
 80021a6:	d103      	bne.n	80021b0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	691a      	ldr	r2, [r3, #16]
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2201      	movs	r2, #1
 80021b4:	615a      	str	r2, [r3, #20]
}
 80021b6:	bf00      	nop
 80021b8:	3714      	adds	r7, #20
 80021ba:	46bd      	mov	sp, r7
 80021bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c0:	4770      	bx	lr
 80021c2:	bf00      	nop
 80021c4:	40010000 	.word	0x40010000
 80021c8:	40000400 	.word	0x40000400
 80021cc:	40000800 	.word	0x40000800
 80021d0:	40000c00 	.word	0x40000c00
 80021d4:	40010400 	.word	0x40010400
 80021d8:	40014000 	.word	0x40014000
 80021dc:	40014400 	.word	0x40014400
 80021e0:	40014800 	.word	0x40014800
 80021e4:	40001800 	.word	0x40001800
 80021e8:	40001c00 	.word	0x40001c00
 80021ec:	40002000 	.word	0x40002000

080021f0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80021f0:	b480      	push	{r7}
 80021f2:	b087      	sub	sp, #28
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	60f8      	str	r0, [r7, #12]
 80021f8:	60b9      	str	r1, [r7, #8]
 80021fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	6a1b      	ldr	r3, [r3, #32]
 8002200:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	6a1b      	ldr	r3, [r3, #32]
 8002206:	f023 0201 	bic.w	r2, r3, #1
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	699b      	ldr	r3, [r3, #24]
 8002212:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002214:	693b      	ldr	r3, [r7, #16]
 8002216:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800221a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	011b      	lsls	r3, r3, #4
 8002220:	693a      	ldr	r2, [r7, #16]
 8002222:	4313      	orrs	r3, r2
 8002224:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002226:	697b      	ldr	r3, [r7, #20]
 8002228:	f023 030a 	bic.w	r3, r3, #10
 800222c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800222e:	697a      	ldr	r2, [r7, #20]
 8002230:	68bb      	ldr	r3, [r7, #8]
 8002232:	4313      	orrs	r3, r2
 8002234:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	693a      	ldr	r2, [r7, #16]
 800223a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	697a      	ldr	r2, [r7, #20]
 8002240:	621a      	str	r2, [r3, #32]
}
 8002242:	bf00      	nop
 8002244:	371c      	adds	r7, #28
 8002246:	46bd      	mov	sp, r7
 8002248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224c:	4770      	bx	lr

0800224e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800224e:	b480      	push	{r7}
 8002250:	b087      	sub	sp, #28
 8002252:	af00      	add	r7, sp, #0
 8002254:	60f8      	str	r0, [r7, #12]
 8002256:	60b9      	str	r1, [r7, #8]
 8002258:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	6a1b      	ldr	r3, [r3, #32]
 800225e:	f023 0210 	bic.w	r2, r3, #16
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	699b      	ldr	r3, [r3, #24]
 800226a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	6a1b      	ldr	r3, [r3, #32]
 8002270:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002272:	697b      	ldr	r3, [r7, #20]
 8002274:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002278:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	031b      	lsls	r3, r3, #12
 800227e:	697a      	ldr	r2, [r7, #20]
 8002280:	4313      	orrs	r3, r2
 8002282:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002284:	693b      	ldr	r3, [r7, #16]
 8002286:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800228a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800228c:	68bb      	ldr	r3, [r7, #8]
 800228e:	011b      	lsls	r3, r3, #4
 8002290:	693a      	ldr	r2, [r7, #16]
 8002292:	4313      	orrs	r3, r2
 8002294:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	697a      	ldr	r2, [r7, #20]
 800229a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	693a      	ldr	r2, [r7, #16]
 80022a0:	621a      	str	r2, [r3, #32]
}
 80022a2:	bf00      	nop
 80022a4:	371c      	adds	r7, #28
 80022a6:	46bd      	mov	sp, r7
 80022a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ac:	4770      	bx	lr

080022ae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80022ae:	b480      	push	{r7}
 80022b0:	b085      	sub	sp, #20
 80022b2:	af00      	add	r7, sp, #0
 80022b4:	6078      	str	r0, [r7, #4]
 80022b6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	689b      	ldr	r3, [r3, #8]
 80022bc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022c4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80022c6:	683a      	ldr	r2, [r7, #0]
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	4313      	orrs	r3, r2
 80022cc:	f043 0307 	orr.w	r3, r3, #7
 80022d0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	68fa      	ldr	r2, [r7, #12]
 80022d6:	609a      	str	r2, [r3, #8]
}
 80022d8:	bf00      	nop
 80022da:	3714      	adds	r7, #20
 80022dc:	46bd      	mov	sp, r7
 80022de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e2:	4770      	bx	lr

080022e4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80022e4:	b480      	push	{r7}
 80022e6:	b087      	sub	sp, #28
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	60f8      	str	r0, [r7, #12]
 80022ec:	60b9      	str	r1, [r7, #8]
 80022ee:	607a      	str	r2, [r7, #4]
 80022f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	689b      	ldr	r3, [r3, #8]
 80022f6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80022f8:	697b      	ldr	r3, [r7, #20]
 80022fa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80022fe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	021a      	lsls	r2, r3, #8
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	431a      	orrs	r2, r3
 8002308:	68bb      	ldr	r3, [r7, #8]
 800230a:	4313      	orrs	r3, r2
 800230c:	697a      	ldr	r2, [r7, #20]
 800230e:	4313      	orrs	r3, r2
 8002310:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	697a      	ldr	r2, [r7, #20]
 8002316:	609a      	str	r2, [r3, #8]
}
 8002318:	bf00      	nop
 800231a:	371c      	adds	r7, #28
 800231c:	46bd      	mov	sp, r7
 800231e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002322:	4770      	bx	lr

08002324 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002324:	b480      	push	{r7}
 8002326:	b085      	sub	sp, #20
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
 800232c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002334:	2b01      	cmp	r3, #1
 8002336:	d101      	bne.n	800233c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002338:	2302      	movs	r3, #2
 800233a:	e05a      	b.n	80023f2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2201      	movs	r2, #1
 8002340:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2202      	movs	r2, #2
 8002348:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	685b      	ldr	r3, [r3, #4]
 8002352:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	689b      	ldr	r3, [r3, #8]
 800235a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002362:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	68fa      	ldr	r2, [r7, #12]
 800236a:	4313      	orrs	r3, r2
 800236c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	68fa      	ldr	r2, [r7, #12]
 8002374:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4a21      	ldr	r2, [pc, #132]	; (8002400 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800237c:	4293      	cmp	r3, r2
 800237e:	d022      	beq.n	80023c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002388:	d01d      	beq.n	80023c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4a1d      	ldr	r2, [pc, #116]	; (8002404 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8002390:	4293      	cmp	r3, r2
 8002392:	d018      	beq.n	80023c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4a1b      	ldr	r2, [pc, #108]	; (8002408 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d013      	beq.n	80023c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4a1a      	ldr	r2, [pc, #104]	; (800240c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80023a4:	4293      	cmp	r3, r2
 80023a6:	d00e      	beq.n	80023c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4a18      	ldr	r2, [pc, #96]	; (8002410 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d009      	beq.n	80023c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4a17      	ldr	r2, [pc, #92]	; (8002414 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80023b8:	4293      	cmp	r3, r2
 80023ba:	d004      	beq.n	80023c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4a15      	ldr	r2, [pc, #84]	; (8002418 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d10c      	bne.n	80023e0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80023c6:	68bb      	ldr	r3, [r7, #8]
 80023c8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80023cc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	68ba      	ldr	r2, [r7, #8]
 80023d4:	4313      	orrs	r3, r2
 80023d6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	68ba      	ldr	r2, [r7, #8]
 80023de:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2201      	movs	r2, #1
 80023e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2200      	movs	r2, #0
 80023ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80023f0:	2300      	movs	r3, #0
}
 80023f2:	4618      	mov	r0, r3
 80023f4:	3714      	adds	r7, #20
 80023f6:	46bd      	mov	sp, r7
 80023f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fc:	4770      	bx	lr
 80023fe:	bf00      	nop
 8002400:	40010000 	.word	0x40010000
 8002404:	40000400 	.word	0x40000400
 8002408:	40000800 	.word	0x40000800
 800240c:	40000c00 	.word	0x40000c00
 8002410:	40010400 	.word	0x40010400
 8002414:	40014000 	.word	0x40014000
 8002418:	40001800 	.word	0x40001800

0800241c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800241c:	b480      	push	{r7}
 800241e:	b083      	sub	sp, #12
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002424:	bf00      	nop
 8002426:	370c      	adds	r7, #12
 8002428:	46bd      	mov	sp, r7
 800242a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242e:	4770      	bx	lr

08002430 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002430:	b480      	push	{r7}
 8002432:	b083      	sub	sp, #12
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002438:	bf00      	nop
 800243a:	370c      	adds	r7, #12
 800243c:	46bd      	mov	sp, r7
 800243e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002442:	4770      	bx	lr

08002444 <HAL_GPIO_EXTI_Callback>:
#include "MOTOR_GLOBAL.hpp"
extern MOTOR motor;

//编码器外部中断
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_pin)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b082      	sub	sp, #8
 8002448:	af00      	add	r7, sp, #0
 800244a:	4603      	mov	r3, r0
 800244c:	80fb      	strh	r3, [r7, #6]
    motor.OnEdge(GPIO_pin);
 800244e:	88fb      	ldrh	r3, [r7, #6]
 8002450:	4619      	mov	r1, r3
 8002452:	4803      	ldr	r0, [pc, #12]	; (8002460 <HAL_GPIO_EXTI_Callback+0x1c>)
 8002454:	f000 fbc8 	bl	8002be8 <_ZN5MOTOR6OnEdgeEt>
}
 8002458:	bf00      	nop
 800245a:	3708      	adds	r7, #8
 800245c:	46bd      	mov	sp, r7
 800245e:	bd80      	pop	{r7, pc}
 8002460:	200000f0 	.word	0x200000f0

08002464 <_Z12GlobalPosPIDPv>:

void GlobalPosPID(void *argument)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b082      	sub	sp, #8
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
    while (1)
    {
         motor.OnPosPID();
 800246c:	4803      	ldr	r0, [pc, #12]	; (800247c <_Z12GlobalPosPIDPv+0x18>)
 800246e:	f000 fd69 	bl	8002f44 <_ZN5MOTOR8OnPosPIDEv>
        osDelay(10);
 8002472:	200a      	movs	r0, #10
 8002474:	f000 ffd7 	bl	8003426 <osDelay>
         motor.OnPosPID();
 8002478:	e7f8      	b.n	800246c <_Z12GlobalPosPIDPv+0x8>
 800247a:	bf00      	nop
 800247c:	200000f0 	.word	0x200000f0

08002480 <_Z14GlobalSpeedPIDPv>:
    }
}

void GlobalSpeedPID(void *argument)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b082      	sub	sp, #8
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
    while (1)
    {
        motor.OnSpeedPID();
 8002488:	4805      	ldr	r0, [pc, #20]	; (80024a0 <_Z14GlobalSpeedPIDPv+0x20>)
 800248a:	f000 fd9d 	bl	8002fc8 <_ZN5MOTOR10OnSpeedPIDEv>
        HAL_GPIO_TogglePin(GPIOF, GPIO_PIN_10);
 800248e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002492:	4804      	ldr	r0, [pc, #16]	; (80024a4 <_Z14GlobalSpeedPIDPv+0x24>)
 8002494:	f7fe fe91 	bl	80011ba <HAL_GPIO_TogglePin>
        osDelay(20);
 8002498:	2014      	movs	r0, #20
 800249a:	f000 ffc4 	bl	8003426 <osDelay>
        motor.OnSpeedPID();
 800249e:	e7f3      	b.n	8002488 <_Z14GlobalSpeedPIDPv+0x8>
 80024a0:	200000f0 	.word	0x200000f0
 80024a4:	40021400 	.word	0x40021400

080024a8 <_Z14GlobalCalSpeedPKc>:
    }
}

//计算速度-全局
void GlobalCalSpeed(const char *name)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b08a      	sub	sp, #40	; 0x28
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
    motor.CalSpeed(std::string(name));
 80024b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024b4:	4618      	mov	r0, r3
 80024b6:	f003 fd29 	bl	8005f0c <_ZNSaIcEC1Ev>
 80024ba:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80024be:	f107 030c 	add.w	r3, r7, #12
 80024c2:	6879      	ldr	r1, [r7, #4]
 80024c4:	4618      	mov	r0, r3
 80024c6:	f003 fe43 	bl	8006150 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80024ca:	f107 030c 	add.w	r3, r7, #12
 80024ce:	4619      	mov	r1, r3
 80024d0:	4808      	ldr	r0, [pc, #32]	; (80024f4 <_Z14GlobalCalSpeedPKc+0x4c>)
 80024d2:	f000 fa8b 	bl	80029ec <_ZN5MOTOR8CalSpeedENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 80024d6:	f107 030c 	add.w	r3, r7, #12
 80024da:	4618      	mov	r0, r3
 80024dc:	f003 fdc9 	bl	8006072 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80024e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024e4:	4618      	mov	r0, r3
 80024e6:	f003 fd12 	bl	8005f0e <_ZNSaIcED1Ev>
}
 80024ea:	bf00      	nop
 80024ec:	3728      	adds	r7, #40	; 0x28
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd80      	pop	{r7, pc}
 80024f2:	bf00      	nop
 80024f4:	200000f0 	.word	0x200000f0

080024f8 <_ZN3PIDC1Ev>:
    aimValue = 0.0;
    err = 0.0;
    err_last = 0.0;
}

PID::PID()
 80024f8:	b480      	push	{r7}
 80024fa:	b083      	sub	sp, #12
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
{
    aimValue = 0.0;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	f04f 0200 	mov.w	r2, #0
 8002506:	601a      	str	r2, [r3, #0]
    err = 0.0;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	f04f 0200 	mov.w	r2, #0
 800250e:	609a      	str	r2, [r3, #8]
    err_last = 0.0;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	f04f 0200 	mov.w	r2, #0
 8002516:	60da      	str	r2, [r3, #12]
    integralLIMIT = 5000;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	f241 3288 	movw	r2, #5000	; 0x1388
 800251e:	621a      	str	r2, [r3, #32]
}
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	4618      	mov	r0, r3
 8002524:	370c      	adds	r7, #12
 8002526:	46bd      	mov	sp, r7
 8002528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252c:	4770      	bx	lr

0800252e <_ZN3PIDD1Ev>:

PID::~PID()
 800252e:	b480      	push	{r7}
 8002530:	b083      	sub	sp, #12
 8002532:	af00      	add	r7, sp, #0
 8002534:	6078      	str	r0, [r7, #4]
{
}
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	4618      	mov	r0, r3
 800253a:	370c      	adds	r7, #12
 800253c:	46bd      	mov	sp, r7
 800253e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002542:	4770      	bx	lr

08002544 <_ZN3PID7SetAttrEfffi>:

void PID::SetAttr(float Kp, float Ki, float Kd, int integralLIMIT)
{
 8002544:	b480      	push	{r7}
 8002546:	b087      	sub	sp, #28
 8002548:	af00      	add	r7, sp, #0
 800254a:	6178      	str	r0, [r7, #20]
 800254c:	ed87 0a04 	vstr	s0, [r7, #16]
 8002550:	edc7 0a03 	vstr	s1, [r7, #12]
 8002554:	ed87 1a02 	vstr	s2, [r7, #8]
 8002558:	6079      	str	r1, [r7, #4]
    this->Kd = Kd;
 800255a:	697b      	ldr	r3, [r7, #20]
 800255c:	68ba      	ldr	r2, [r7, #8]
 800255e:	619a      	str	r2, [r3, #24]
    this->Ki = Ki;
 8002560:	697b      	ldr	r3, [r7, #20]
 8002562:	68fa      	ldr	r2, [r7, #12]
 8002564:	615a      	str	r2, [r3, #20]
    this->Kp = Kp;
 8002566:	697b      	ldr	r3, [r7, #20]
 8002568:	693a      	ldr	r2, [r7, #16]
 800256a:	611a      	str	r2, [r3, #16]
    this->integralLIMIT = integralLIMIT;
 800256c:	697b      	ldr	r3, [r7, #20]
 800256e:	687a      	ldr	r2, [r7, #4]
 8002570:	621a      	str	r2, [r3, #32]
    aimValue = 0.0;
 8002572:	697b      	ldr	r3, [r7, #20]
 8002574:	f04f 0200 	mov.w	r2, #0
 8002578:	601a      	str	r2, [r3, #0]
    err = 0.0;
 800257a:	697b      	ldr	r3, [r7, #20]
 800257c:	f04f 0200 	mov.w	r2, #0
 8002580:	609a      	str	r2, [r3, #8]
    err_last = 0.0;
 8002582:	697b      	ldr	r3, [r7, #20]
 8002584:	f04f 0200 	mov.w	r2, #0
 8002588:	60da      	str	r2, [r3, #12]
}
 800258a:	bf00      	nop
 800258c:	371c      	adds	r7, #28
 800258e:	46bd      	mov	sp, r7
 8002590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002594:	4770      	bx	lr

08002596 <_ZN3PID6UpdateEf>:

float PID::Update(float result)
{
 8002596:	b480      	push	{r7}
 8002598:	b083      	sub	sp, #12
 800259a:	af00      	add	r7, sp, #0
 800259c:	6078      	str	r0, [r7, #4]
 800259e:	ed87 0a00 	vstr	s0, [r7]
    err = aimValue - result;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	ed93 7a00 	vldr	s14, [r3]
 80025a8:	edd7 7a00 	vldr	s15, [r7]
 80025ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	edc3 7a02 	vstr	s15, [r3, #8]
    integral += err;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	ed93 7a07 	vldr	s14, [r3, #28]
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	edd3 7a02 	vldr	s15, [r3, #8]
 80025c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	edc3 7a07 	vstr	s15, [r3, #28]
    if (integral > (float)integralLIMIT)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	ed93 7a07 	vldr	s14, [r3, #28]
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6a1b      	ldr	r3, [r3, #32]
 80025d6:	ee07 3a90 	vmov	s15, r3
 80025da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80025de:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80025e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025e6:	dd09      	ble.n	80025fc <_ZN3PID6UpdateEf+0x66>
        integral = (float)integralLIMIT;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6a1b      	ldr	r3, [r3, #32]
 80025ec:	ee07 3a90 	vmov	s15, r3
 80025f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	edc3 7a07 	vstr	s15, [r3, #28]
 80025fa:	e01a      	b.n	8002632 <_ZN3PID6UpdateEf+0x9c>
    else if (integral < -(float)integralLIMIT)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	ed93 7a07 	vldr	s14, [r3, #28]
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6a1b      	ldr	r3, [r3, #32]
 8002606:	ee07 3a90 	vmov	s15, r3
 800260a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800260e:	eef1 7a67 	vneg.f32	s15, s15
 8002612:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002616:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800261a:	d50a      	bpl.n	8002632 <_ZN3PID6UpdateEf+0x9c>
        integral = -(float)integralLIMIT;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6a1b      	ldr	r3, [r3, #32]
 8002620:	ee07 3a90 	vmov	s15, r3
 8002624:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002628:	eef1 7a67 	vneg.f32	s15, s15
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	edc3 7a07 	vstr	s15, [r3, #28]
    if((err>0&&integral>0)||(err<0&&integral<0))
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	edd3 7a02 	vldr	s15, [r3, #8]
 8002638:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800263c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002640:	dd07      	ble.n	8002652 <_ZN3PID6UpdateEf+0xbc>
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	edd3 7a07 	vldr	s15, [r3, #28]
 8002648:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800264c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002650:	dc0f      	bgt.n	8002672 <_ZN3PID6UpdateEf+0xdc>
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	edd3 7a02 	vldr	s15, [r3, #8]
 8002658:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800265c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002660:	d50b      	bpl.n	800267a <_ZN3PID6UpdateEf+0xe4>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	edd3 7a07 	vldr	s15, [r3, #28]
 8002668:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800266c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002670:	d503      	bpl.n	800267a <_ZN3PID6UpdateEf+0xe4>
    		integral=0;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	f04f 0200 	mov.w	r2, #0
 8002678:	61da      	str	r2, [r3, #28]
    returnValue = Kp * err + Ki * integral + Kd * (err - err_last);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	ed93 7a04 	vldr	s14, [r3, #16]
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	edd3 7a02 	vldr	s15, [r3, #8]
 8002686:	ee27 7a27 	vmul.f32	s14, s14, s15
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	edd3 6a05 	vldr	s13, [r3, #20]
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	edd3 7a07 	vldr	s15, [r3, #28]
 8002696:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800269a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	edd3 6a06 	vldr	s13, [r3, #24]
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	ed93 6a02 	vldr	s12, [r3, #8]
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	edd3 7a03 	vldr	s15, [r3, #12]
 80026b0:	ee76 7a67 	vsub.f32	s15, s12, s15
 80026b4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80026b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	edc3 7a01 	vstr	s15, [r3, #4]
    err_last = err;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	689a      	ldr	r2, [r3, #8]
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	60da      	str	r2, [r3, #12]
    return returnValue;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	ee07 3a90 	vmov	s15, r3
}
 80026d2:	eeb0 0a67 	vmov.f32	s0, s15
 80026d6:	370c      	adds	r7, #12
 80026d8:	46bd      	mov	sp, r7
 80026da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026de:	4770      	bx	lr

080026e0 <_ZN3PID6SetAIMEf>:

void PID::SetAIM(float aim)
{
 80026e0:	b480      	push	{r7}
 80026e2:	b083      	sub	sp, #12
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
 80026e8:	ed87 0a00 	vstr	s0, [r7]
    aimValue = aim;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	683a      	ldr	r2, [r7, #0]
 80026f0:	601a      	str	r2, [r3, #0]
}
 80026f2:	bf00      	nop
 80026f4:	370c      	adds	r7, #12
 80026f6:	46bd      	mov	sp, r7
 80026f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fc:	4770      	bx	lr
	...

08002700 <_Z13PWM_Init_NodeP3PWMtP12GPIO_TypeDeffj>:
#define PWM_TIMER_CNT 10000
PWM *PWM_L;
PWM *p, *q, *r;

void PWM_Init_Node(PWM *pwm, uint16_t pin, GPIO_TypeDef *port, float percent, unsigned int freq)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b086      	sub	sp, #24
 8002704:	af00      	add	r7, sp, #0
 8002706:	6178      	str	r0, [r7, #20]
 8002708:	60fa      	str	r2, [r7, #12]
 800270a:	ed87 0a02 	vstr	s0, [r7, #8]
 800270e:	607b      	str	r3, [r7, #4]
 8002710:	460b      	mov	r3, r1
 8002712:	827b      	strh	r3, [r7, #18]
    pwm->cnt = 0;
 8002714:	697b      	ldr	r3, [r7, #20]
 8002716:	2200      	movs	r2, #0
 8002718:	60da      	str	r2, [r3, #12]
    pwm->pin = pin;
 800271a:	697b      	ldr	r3, [r7, #20]
 800271c:	8a7a      	ldrh	r2, [r7, #18]
 800271e:	801a      	strh	r2, [r3, #0]
    pwm->port = port;
 8002720:	697b      	ldr	r3, [r7, #20]
 8002722:	68fa      	ldr	r2, [r7, #12]
 8002724:	605a      	str	r2, [r3, #4]
    pwm->next = NULL;
 8002726:	697b      	ldr	r3, [r7, #20]
 8002728:	2200      	movs	r2, #0
 800272a:	61da      	str	r2, [r3, #28]

    pwm->limit = (unsigned int)PWM_TIMER_CNT / freq;
 800272c:	f242 7210 	movw	r2, #10000	; 0x2710
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	fbb2 f2f3 	udiv	r2, r2, r3
 8002736:	697b      	ldr	r3, [r7, #20]
 8002738:	611a      	str	r2, [r3, #16]
    pwm->limit_high = pwm->limit * percent / 100;
 800273a:	697b      	ldr	r3, [r7, #20]
 800273c:	691b      	ldr	r3, [r3, #16]
 800273e:	ee07 3a90 	vmov	s15, r3
 8002742:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002746:	edd7 7a02 	vldr	s15, [r7, #8]
 800274a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800274e:	eddf 6a0f 	vldr	s13, [pc, #60]	; 800278c <_Z13PWM_Init_NodeP3PWMtP12GPIO_TypeDeffj+0x8c>
 8002752:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002756:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800275a:	ee17 2a90 	vmov	r2, s15
 800275e:	697b      	ldr	r3, [r7, #20]
 8002760:	615a      	str	r2, [r3, #20]
    pwm->limit_low = pwm->limit - pwm->limit_high;
 8002762:	697b      	ldr	r3, [r7, #20]
 8002764:	691a      	ldr	r2, [r3, #16]
 8002766:	697b      	ldr	r3, [r7, #20]
 8002768:	695b      	ldr	r3, [r3, #20]
 800276a:	1ad2      	subs	r2, r2, r3
 800276c:	697b      	ldr	r3, [r7, #20]
 800276e:	619a      	str	r2, [r3, #24]
    pwm->status = 0;
 8002770:	697b      	ldr	r3, [r7, #20]
 8002772:	2200      	movs	r2, #0
 8002774:	721a      	strb	r2, [r3, #8]
    HAL_GPIO_WritePin(port, pin, GPIO_PIN_RESET);
 8002776:	8a7b      	ldrh	r3, [r7, #18]
 8002778:	2200      	movs	r2, #0
 800277a:	4619      	mov	r1, r3
 800277c:	68f8      	ldr	r0, [r7, #12]
 800277e:	f7fe fd03 	bl	8001188 <HAL_GPIO_WritePin>
}
 8002782:	bf00      	nop
 8002784:	3718      	adds	r7, #24
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}
 800278a:	bf00      	nop
 800278c:	42c80000 	.word	0x42c80000

08002790 <_Z11PWM_SetFreqP12GPIO_TypeDeftfj>:

void PWM_SetFreq(GPIO_TypeDef *port, uint16_t pin, float percent, unsigned int freq)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b084      	sub	sp, #16
 8002794:	af00      	add	r7, sp, #0
 8002796:	60f8      	str	r0, [r7, #12]
 8002798:	460b      	mov	r3, r1
 800279a:	ed87 0a01 	vstr	s0, [r7, #4]
 800279e:	603a      	str	r2, [r7, #0]
 80027a0:	817b      	strh	r3, [r7, #10]
    q = PWM_L;
 80027a2:	4b38      	ldr	r3, [pc, #224]	; (8002884 <_Z11PWM_SetFreqP12GPIO_TypeDeftfj+0xf4>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	4a38      	ldr	r2, [pc, #224]	; (8002888 <_Z11PWM_SetFreqP12GPIO_TypeDeftfj+0xf8>)
 80027a8:	6013      	str	r3, [r2, #0]
    while (q->next != NULL)
 80027aa:	4b37      	ldr	r3, [pc, #220]	; (8002888 <_Z11PWM_SetFreqP12GPIO_TypeDeftfj+0xf8>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	69db      	ldr	r3, [r3, #28]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d014      	beq.n	80027de <_Z11PWM_SetFreqP12GPIO_TypeDeftfj+0x4e>
    {
        if (q->next->pin == pin && q->next->port == port)
 80027b4:	4b34      	ldr	r3, [pc, #208]	; (8002888 <_Z11PWM_SetFreqP12GPIO_TypeDeftfj+0xf8>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	69db      	ldr	r3, [r3, #28]
 80027ba:	881b      	ldrh	r3, [r3, #0]
 80027bc:	897a      	ldrh	r2, [r7, #10]
 80027be:	429a      	cmp	r2, r3
 80027c0:	d106      	bne.n	80027d0 <_Z11PWM_SetFreqP12GPIO_TypeDeftfj+0x40>
 80027c2:	4b31      	ldr	r3, [pc, #196]	; (8002888 <_Z11PWM_SetFreqP12GPIO_TypeDeftfj+0xf8>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	69db      	ldr	r3, [r3, #28]
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	68fa      	ldr	r2, [r7, #12]
 80027cc:	429a      	cmp	r2, r3
 80027ce:	d005      	beq.n	80027dc <_Z11PWM_SetFreqP12GPIO_TypeDeftfj+0x4c>
            break;
        q = q->next;
 80027d0:	4b2d      	ldr	r3, [pc, #180]	; (8002888 <_Z11PWM_SetFreqP12GPIO_TypeDeftfj+0xf8>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	69db      	ldr	r3, [r3, #28]
 80027d6:	4a2c      	ldr	r2, [pc, #176]	; (8002888 <_Z11PWM_SetFreqP12GPIO_TypeDeftfj+0xf8>)
 80027d8:	6013      	str	r3, [r2, #0]
    while (q->next != NULL)
 80027da:	e7e6      	b.n	80027aa <_Z11PWM_SetFreqP12GPIO_TypeDeftfj+0x1a>
            break;
 80027dc:	bf00      	nop
    }
    if (q->next == NULL)
 80027de:	4b2a      	ldr	r3, [pc, #168]	; (8002888 <_Z11PWM_SetFreqP12GPIO_TypeDeftfj+0xf8>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	69db      	ldr	r3, [r3, #28]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d115      	bne.n	8002814 <_Z11PWM_SetFreqP12GPIO_TypeDeftfj+0x84>
    {
        r = (PWM *)malloc(sizeof(PWM));
 80027e8:	2020      	movs	r0, #32
 80027ea:	f003 fd1f 	bl	800622c <malloc>
 80027ee:	4603      	mov	r3, r0
 80027f0:	461a      	mov	r2, r3
 80027f2:	4b26      	ldr	r3, [pc, #152]	; (800288c <_Z11PWM_SetFreqP12GPIO_TypeDeftfj+0xfc>)
 80027f4:	601a      	str	r2, [r3, #0]
        PWM_Init_Node(r, pin, port, percent, freq);
 80027f6:	4b25      	ldr	r3, [pc, #148]	; (800288c <_Z11PWM_SetFreqP12GPIO_TypeDeftfj+0xfc>)
 80027f8:	6818      	ldr	r0, [r3, #0]
 80027fa:	8979      	ldrh	r1, [r7, #10]
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	ed97 0a01 	vldr	s0, [r7, #4]
 8002802:	68fa      	ldr	r2, [r7, #12]
 8002804:	f7ff ff7c 	bl	8002700 <_Z13PWM_Init_NodeP3PWMtP12GPIO_TypeDeffj>
        q->next = r;
 8002808:	4b1f      	ldr	r3, [pc, #124]	; (8002888 <_Z11PWM_SetFreqP12GPIO_TypeDeftfj+0xf8>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4a1f      	ldr	r2, [pc, #124]	; (800288c <_Z11PWM_SetFreqP12GPIO_TypeDeftfj+0xfc>)
 800280e:	6812      	ldr	r2, [r2, #0]
 8002810:	61da      	str	r2, [r3, #28]
        q->limit_low = q->limit - q->limit_high;
        // p->cnt = 0;
        // p->status = 0;
        HAL_GPIO_WritePin(port, pin, GPIO_PIN_RESET);
    }
}
 8002812:	e032      	b.n	800287a <_Z11PWM_SetFreqP12GPIO_TypeDeftfj+0xea>
        q = q->next;
 8002814:	4b1c      	ldr	r3, [pc, #112]	; (8002888 <_Z11PWM_SetFreqP12GPIO_TypeDeftfj+0xf8>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	69db      	ldr	r3, [r3, #28]
 800281a:	4a1b      	ldr	r2, [pc, #108]	; (8002888 <_Z11PWM_SetFreqP12GPIO_TypeDeftfj+0xf8>)
 800281c:	6013      	str	r3, [r2, #0]
        q->limit = (unsigned int)PWM_TIMER_CNT / freq;
 800281e:	4b1a      	ldr	r3, [pc, #104]	; (8002888 <_Z11PWM_SetFreqP12GPIO_TypeDeftfj+0xf8>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f242 7110 	movw	r1, #10000	; 0x2710
 8002826:	683a      	ldr	r2, [r7, #0]
 8002828:	fbb1 f2f2 	udiv	r2, r1, r2
 800282c:	611a      	str	r2, [r3, #16]
        q->limit_high = q->limit * percent / 100;
 800282e:	4b16      	ldr	r3, [pc, #88]	; (8002888 <_Z11PWM_SetFreqP12GPIO_TypeDeftfj+0xf8>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	691b      	ldr	r3, [r3, #16]
 8002834:	ee07 3a90 	vmov	s15, r3
 8002838:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800283c:	edd7 7a01 	vldr	s15, [r7, #4]
 8002840:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002844:	eddf 6a12 	vldr	s13, [pc, #72]	; 8002890 <_Z11PWM_SetFreqP12GPIO_TypeDeftfj+0x100>
 8002848:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800284c:	4b0e      	ldr	r3, [pc, #56]	; (8002888 <_Z11PWM_SetFreqP12GPIO_TypeDeftfj+0xf8>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002854:	ee17 2a90 	vmov	r2, s15
 8002858:	615a      	str	r2, [r3, #20]
        q->limit_low = q->limit - q->limit_high;
 800285a:	4b0b      	ldr	r3, [pc, #44]	; (8002888 <_Z11PWM_SetFreqP12GPIO_TypeDeftfj+0xf8>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	6919      	ldr	r1, [r3, #16]
 8002860:	4b09      	ldr	r3, [pc, #36]	; (8002888 <_Z11PWM_SetFreqP12GPIO_TypeDeftfj+0xf8>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	695a      	ldr	r2, [r3, #20]
 8002866:	4b08      	ldr	r3, [pc, #32]	; (8002888 <_Z11PWM_SetFreqP12GPIO_TypeDeftfj+0xf8>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	1a8a      	subs	r2, r1, r2
 800286c:	619a      	str	r2, [r3, #24]
        HAL_GPIO_WritePin(port, pin, GPIO_PIN_RESET);
 800286e:	897b      	ldrh	r3, [r7, #10]
 8002870:	2200      	movs	r2, #0
 8002872:	4619      	mov	r1, r3
 8002874:	68f8      	ldr	r0, [r7, #12]
 8002876:	f7fe fc87 	bl	8001188 <HAL_GPIO_WritePin>
}
 800287a:	bf00      	nop
 800287c:	3710      	adds	r7, #16
 800287e:	46bd      	mov	sp, r7
 8002880:	bd80      	pop	{r7, pc}
 8002882:	bf00      	nop
 8002884:	200000e0 	.word	0x200000e0
 8002888:	200000e8 	.word	0x200000e8
 800288c:	200000ec 	.word	0x200000ec
 8002890:	42c80000 	.word	0x42c80000

08002894 <_Z8PWM_Initv>:

void PWM_Init()
{
 8002894:	b580      	push	{r7, lr}
 8002896:	af00      	add	r7, sp, #0
    PWM_L = (PWM *)malloc(sizeof(PWM));
 8002898:	2020      	movs	r0, #32
 800289a:	f003 fcc7 	bl	800622c <malloc>
 800289e:	4603      	mov	r3, r0
 80028a0:	461a      	mov	r2, r3
 80028a2:	4b04      	ldr	r3, [pc, #16]	; (80028b4 <_Z8PWM_Initv+0x20>)
 80028a4:	601a      	str	r2, [r3, #0]
    PWM_L->next = NULL;
 80028a6:	4b03      	ldr	r3, [pc, #12]	; (80028b4 <_Z8PWM_Initv+0x20>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	2200      	movs	r2, #0
 80028ac:	61da      	str	r2, [r3, #28]
}
 80028ae:	bf00      	nop
 80028b0:	bd80      	pop	{r7, pc}
 80028b2:	bf00      	nop
 80028b4:	200000e0 	.word	0x200000e0

080028b8 <_Z10PWM_Updatev>:

void PWM_Update()
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	af00      	add	r7, sp, #0
    p = PWM_L->next;
 80028bc:	4b3e      	ldr	r3, [pc, #248]	; (80029b8 <_Z10PWM_Updatev+0x100>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	69db      	ldr	r3, [r3, #28]
 80028c2:	4a3e      	ldr	r2, [pc, #248]	; (80029bc <_Z10PWM_Updatev+0x104>)
 80028c4:	6013      	str	r3, [r2, #0]
    while (p != NULL)
 80028c6:	4b3d      	ldr	r3, [pc, #244]	; (80029bc <_Z10PWM_Updatev+0x104>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d071      	beq.n	80029b2 <_Z10PWM_Updatev+0xfa>
    {
        p->cnt++;
 80028ce:	4b3b      	ldr	r3, [pc, #236]	; (80029bc <_Z10PWM_Updatev+0x104>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	68da      	ldr	r2, [r3, #12]
 80028d4:	3201      	adds	r2, #1
 80028d6:	60da      	str	r2, [r3, #12]
        if (p->limit_high == 0)
 80028d8:	4b38      	ldr	r3, [pc, #224]	; (80029bc <_Z10PWM_Updatev+0x104>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	695b      	ldr	r3, [r3, #20]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d10e      	bne.n	8002900 <_Z10PWM_Updatev+0x48>
        {
            HAL_GPIO_WritePin(p->port, p->pin, GPIO_PIN_RESET);
 80028e2:	4b36      	ldr	r3, [pc, #216]	; (80029bc <_Z10PWM_Updatev+0x104>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	6858      	ldr	r0, [r3, #4]
 80028e8:	4b34      	ldr	r3, [pc, #208]	; (80029bc <_Z10PWM_Updatev+0x104>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	881b      	ldrh	r3, [r3, #0]
 80028ee:	2200      	movs	r2, #0
 80028f0:	4619      	mov	r1, r3
 80028f2:	f7fe fc49 	bl	8001188 <HAL_GPIO_WritePin>
            p->cnt = 0;
 80028f6:	4b31      	ldr	r3, [pc, #196]	; (80029bc <_Z10PWM_Updatev+0x104>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	2200      	movs	r2, #0
 80028fc:	60da      	str	r2, [r3, #12]
 80028fe:	e052      	b.n	80029a6 <_Z10PWM_Updatev+0xee>
        }
        else if (p->limit_low == 0)
 8002900:	4b2e      	ldr	r3, [pc, #184]	; (80029bc <_Z10PWM_Updatev+0x104>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	699b      	ldr	r3, [r3, #24]
 8002906:	2b00      	cmp	r3, #0
 8002908:	d10e      	bne.n	8002928 <_Z10PWM_Updatev+0x70>
        {
            HAL_GPIO_WritePin(p->port, p->pin, GPIO_PIN_SET);
 800290a:	4b2c      	ldr	r3, [pc, #176]	; (80029bc <_Z10PWM_Updatev+0x104>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	6858      	ldr	r0, [r3, #4]
 8002910:	4b2a      	ldr	r3, [pc, #168]	; (80029bc <_Z10PWM_Updatev+0x104>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	881b      	ldrh	r3, [r3, #0]
 8002916:	2201      	movs	r2, #1
 8002918:	4619      	mov	r1, r3
 800291a:	f7fe fc35 	bl	8001188 <HAL_GPIO_WritePin>
            p->cnt = 0;
 800291e:	4b27      	ldr	r3, [pc, #156]	; (80029bc <_Z10PWM_Updatev+0x104>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	2200      	movs	r2, #0
 8002924:	60da      	str	r2, [r3, #12]
 8002926:	e03e      	b.n	80029a6 <_Z10PWM_Updatev+0xee>
        }
        else if (p->cnt >= p->limit_low && p->status == 0)
 8002928:	4b24      	ldr	r3, [pc, #144]	; (80029bc <_Z10PWM_Updatev+0x104>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	68da      	ldr	r2, [r3, #12]
 800292e:	4b23      	ldr	r3, [pc, #140]	; (80029bc <_Z10PWM_Updatev+0x104>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	699b      	ldr	r3, [r3, #24]
 8002934:	429a      	cmp	r2, r3
 8002936:	d317      	bcc.n	8002968 <_Z10PWM_Updatev+0xb0>
 8002938:	4b20      	ldr	r3, [pc, #128]	; (80029bc <_Z10PWM_Updatev+0x104>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	7a1b      	ldrb	r3, [r3, #8]
 800293e:	2b00      	cmp	r3, #0
 8002940:	d112      	bne.n	8002968 <_Z10PWM_Updatev+0xb0>
        {
            HAL_GPIO_WritePin(p->port, p->pin, GPIO_PIN_SET);
 8002942:	4b1e      	ldr	r3, [pc, #120]	; (80029bc <_Z10PWM_Updatev+0x104>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	6858      	ldr	r0, [r3, #4]
 8002948:	4b1c      	ldr	r3, [pc, #112]	; (80029bc <_Z10PWM_Updatev+0x104>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	881b      	ldrh	r3, [r3, #0]
 800294e:	2201      	movs	r2, #1
 8002950:	4619      	mov	r1, r3
 8002952:	f7fe fc19 	bl	8001188 <HAL_GPIO_WritePin>
            p->status = 1;
 8002956:	4b19      	ldr	r3, [pc, #100]	; (80029bc <_Z10PWM_Updatev+0x104>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	2201      	movs	r2, #1
 800295c:	721a      	strb	r2, [r3, #8]
            p->cnt = 0;
 800295e:	4b17      	ldr	r3, [pc, #92]	; (80029bc <_Z10PWM_Updatev+0x104>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	2200      	movs	r2, #0
 8002964:	60da      	str	r2, [r3, #12]
 8002966:	e01e      	b.n	80029a6 <_Z10PWM_Updatev+0xee>
        }
        else if (p->cnt >= p->limit_high && p->status == 1)
 8002968:	4b14      	ldr	r3, [pc, #80]	; (80029bc <_Z10PWM_Updatev+0x104>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	68da      	ldr	r2, [r3, #12]
 800296e:	4b13      	ldr	r3, [pc, #76]	; (80029bc <_Z10PWM_Updatev+0x104>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	695b      	ldr	r3, [r3, #20]
 8002974:	429a      	cmp	r2, r3
 8002976:	d316      	bcc.n	80029a6 <_Z10PWM_Updatev+0xee>
 8002978:	4b10      	ldr	r3, [pc, #64]	; (80029bc <_Z10PWM_Updatev+0x104>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	7a1b      	ldrb	r3, [r3, #8]
 800297e:	2b01      	cmp	r3, #1
 8002980:	d111      	bne.n	80029a6 <_Z10PWM_Updatev+0xee>
        {
            HAL_GPIO_WritePin(p->port, p->pin, GPIO_PIN_RESET);
 8002982:	4b0e      	ldr	r3, [pc, #56]	; (80029bc <_Z10PWM_Updatev+0x104>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	6858      	ldr	r0, [r3, #4]
 8002988:	4b0c      	ldr	r3, [pc, #48]	; (80029bc <_Z10PWM_Updatev+0x104>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	881b      	ldrh	r3, [r3, #0]
 800298e:	2200      	movs	r2, #0
 8002990:	4619      	mov	r1, r3
 8002992:	f7fe fbf9 	bl	8001188 <HAL_GPIO_WritePin>
            p->status = 0;
 8002996:	4b09      	ldr	r3, [pc, #36]	; (80029bc <_Z10PWM_Updatev+0x104>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	2200      	movs	r2, #0
 800299c:	721a      	strb	r2, [r3, #8]
            p->cnt = 0;
 800299e:	4b07      	ldr	r3, [pc, #28]	; (80029bc <_Z10PWM_Updatev+0x104>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	2200      	movs	r2, #0
 80029a4:	60da      	str	r2, [r3, #12]
        }
        p = p->next;
 80029a6:	4b05      	ldr	r3, [pc, #20]	; (80029bc <_Z10PWM_Updatev+0x104>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	69db      	ldr	r3, [r3, #28]
 80029ac:	4a03      	ldr	r2, [pc, #12]	; (80029bc <_Z10PWM_Updatev+0x104>)
 80029ae:	6013      	str	r3, [r2, #0]
    while (p != NULL)
 80029b0:	e789      	b.n	80028c6 <_Z10PWM_Updatev+0xe>
    }
}
 80029b2:	bf00      	nop
 80029b4:	bd80      	pop	{r7, pc}
 80029b6:	bf00      	nop
 80029b8:	200000e0 	.word	0x200000e0
 80029bc:	200000e4 	.word	0x200000e4

080029c0 <_ZNSt11char_traitsIcE7compareEPKcS2_j>:
	return (static_cast<unsigned char>(__c1)
		< static_cast<unsigned char>(__c2));
      }

      static _GLIBCXX17_CONSTEXPR int
      compare(const char_type* __s1, const char_type* __s2, size_t __n)
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b084      	sub	sp, #16
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	60f8      	str	r0, [r7, #12]
 80029c8:	60b9      	str	r1, [r7, #8]
 80029ca:	607a      	str	r2, [r7, #4]
      {
	if (__n == 0)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d101      	bne.n	80029d6 <_ZNSt11char_traitsIcE7compareEPKcS2_j+0x16>
	  return 0;
 80029d2:	2300      	movs	r3, #0
 80029d4:	e006      	b.n	80029e4 <_ZNSt11char_traitsIcE7compareEPKcS2_j+0x24>
	if (__builtin_constant_p(__n)
	    && __constant_char_array_p(__s1, __n)
	    && __constant_char_array_p(__s2, __n))
	  return __gnu_cxx::char_traits<char_type>::compare(__s1, __s2, __n);
#endif
	return __builtin_memcmp(__s1, __s2, __n);
 80029d6:	687a      	ldr	r2, [r7, #4]
 80029d8:	68b9      	ldr	r1, [r7, #8]
 80029da:	68f8      	ldr	r0, [r7, #12]
 80029dc:	f003 fc36 	bl	800624c <memcmp>
 80029e0:	4603      	mov	r3, r0
 80029e2:	bf00      	nop
      }
 80029e4:	4618      	mov	r0, r3
 80029e6:	3710      	adds	r7, #16
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bd80      	pop	{r7, pc}

080029ec <_ZN5MOTOR8CalSpeedENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:

MOTOR motor("M0", GPIOD, GPIO_PIN_0, GPIOD, GPIO_PIN_1, GPIOE, GPIO_PIN_0, GPIOE, GPIO_PIN_1);

//计算速度-类成员
void MOTOR::CalSpeed(std::string name)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b082      	sub	sp, #8
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
 80029f4:	6039      	str	r1, [r7, #0]
    if (name != this->name)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80029fc:	4619      	mov	r1, r3
 80029fe:	6838      	ldr	r0, [r7, #0]
 8002a00:	f000 fb2a 	bl	8003058 <_ZStneIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EESA_>
 8002a04:	4603      	mov	r3, r0
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d15e      	bne.n	8002ac8 <_ZN5MOTOR8CalSpeedENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xdc>
        return;
    lastpos = position;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	69da      	ldr	r2, [r3, #28]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
    datapos = 0;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2200      	movs	r2, #0
 8002a18:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
    while (1)
    {
        temp = datapos - 1;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8002a22:	1e5a      	subs	r2, r3, #1
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
        if (temp == -1)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8002a30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a34:	d103      	bne.n	8002a3e <_ZN5MOTOR8CalSpeedENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x52>
            temp = CAL_SPEED_LEN - 1;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2227      	movs	r2, #39	; 0x27
 8002a3a:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
        speedData[datapos] = position - lastpos;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	69d9      	ldr	r1, [r3, #28]
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	f8d3 2144 	ldr.w	r2, [r3, #324]	; 0x144
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8002a4e:	1a8a      	subs	r2, r1, r2
 8002a50:	6879      	ldr	r1, [r7, #4]
 8002a52:	3326      	adds	r3, #38	; 0x26
 8002a54:	009b      	lsls	r3, r3, #2
 8002a56:	440b      	add	r3, r1
 8002a58:	605a      	str	r2, [r3, #4]
        speedSUM += speedData[datapos] - speedData[temp];
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8002a66:	6879      	ldr	r1, [r7, #4]
 8002a68:	3326      	adds	r3, #38	; 0x26
 8002a6a:	009b      	lsls	r3, r3, #2
 8002a6c:	440b      	add	r3, r1
 8002a6e:	6859      	ldr	r1, [r3, #4]
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8002a76:	6878      	ldr	r0, [r7, #4]
 8002a78:	3326      	adds	r3, #38	; 0x26
 8002a7a:	009b      	lsls	r3, r3, #2
 8002a7c:	4403      	add	r3, r0
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	1acb      	subs	r3, r1, r3
 8002a82:	441a      	add	r2, r3
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c

        lastpos = position;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	69da      	ldr	r2, [r3, #28]
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
        speed = speedSUM;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	f8c3 2170 	str.w	r2, [r3, #368]	; 0x170

        datapos++;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8002aa6:	1c5a      	adds	r2, r3, #1
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
        if (datapos == CAL_SPEED_LEN)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8002ab4:	2b28      	cmp	r3, #40	; 0x28
 8002ab6:	d103      	bne.n	8002ac0 <_ZN5MOTOR8CalSpeedENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xd4>
            datapos = 0;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2200      	movs	r2, #0
 8002abc:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
        osDelay(CAL_SPEED_SEGLEN);
 8002ac0:	2019      	movs	r0, #25
 8002ac2:	f000 fcb0 	bl	8003426 <osDelay>
        temp = datapos - 1;
 8002ac6:	e7a9      	b.n	8002a1c <_ZN5MOTOR8CalSpeedENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x30>
        return;
 8002ac8:	bf00      	nop
        if (speedSUM == 0)
            continue;
        printf("sum=%ld,speed=%lf\n", speedSUM, speed);
#endif
    }
}
 8002aca:	3708      	adds	r7, #8
 8002acc:	46bd      	mov	sp, r7
 8002ace:	bd80      	pop	{r7, pc}

08002ad0 <_ZN5MOTOR8SetSpeedEf>:
    positionTarget = pos;
    posPID.SetAIM(pos);
}
//设置速度
void MOTOR::SetSpeed(float speed)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b082      	sub	sp, #8
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
 8002ad8:	ed87 0a00 	vstr	s0, [r7]
    if (speed > SPEED_LIMIT)
 8002adc:	edd7 7a00 	vldr	s15, [r7]
 8002ae0:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8002b34 <_ZN5MOTOR8SetSpeedEf+0x64>
 8002ae4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002ae8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002aec:	dd01      	ble.n	8002af2 <_ZN5MOTOR8SetSpeedEf+0x22>
        speed = SPEED_LIMIT;
 8002aee:	4b12      	ldr	r3, [pc, #72]	; (8002b38 <_ZN5MOTOR8SetSpeedEf+0x68>)
 8002af0:	603b      	str	r3, [r7, #0]
    if (speed < -SPEED_LIMIT)
 8002af2:	edd7 7a00 	vldr	s15, [r7]
 8002af6:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8002b3c <_ZN5MOTOR8SetSpeedEf+0x6c>
 8002afa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002afe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b02:	d501      	bpl.n	8002b08 <_ZN5MOTOR8SetSpeedEf+0x38>
        speed = -SPEED_LIMIT;
 8002b04:	4b0e      	ldr	r3, [pc, #56]	; (8002b40 <_ZN5MOTOR8SetSpeedEf+0x70>)
 8002b06:	603b      	str	r3, [r7, #0]
    speedTarget = speed;
 8002b08:	edd7 7a00 	vldr	s15, [r7]
 8002b0c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002b10:	ee17 2a90 	vmov	r2, s15
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	f8c3 2174 	str.w	r2, [r3, #372]	; 0x174
    speedPID.SetAIM(speed);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	f503 73d2 	add.w	r3, r3, #420	; 0x1a4
 8002b20:	ed97 0a00 	vldr	s0, [r7]
 8002b24:	4618      	mov	r0, r3
 8002b26:	f7ff fddb 	bl	80026e0 <_ZN3PID6SetAIMEf>
}
 8002b2a:	bf00      	nop
 8002b2c:	3708      	adds	r7, #8
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bd80      	pop	{r7, pc}
 8002b32:	bf00      	nop
 8002b34:	43160000 	.word	0x43160000
 8002b38:	43160000 	.word	0x43160000
 8002b3c:	c3160000 	.word	0xc3160000
 8002b40:	c3160000 	.word	0xc3160000

08002b44 <_ZN5MOTOR6OnEdgeEv>:

//直接更新位置
void MOTOR::OnEdge()
{
 8002b44:	b590      	push	{r4, r7, lr}
 8002b46:	b083      	sub	sp, #12
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
    newState = ((char)HAL_GPIO_ReadPin(this->IN_A_PORT, this->IN_A_PIN)) * ((char)2) +
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	689a      	ldr	r2, [r3, #8]
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	881b      	ldrh	r3, [r3, #0]
 8002b54:	4619      	mov	r1, r3
 8002b56:	4610      	mov	r0, r2
 8002b58:	f7fe fafe 	bl	8001158 <HAL_GPIO_ReadPin>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	005b      	lsls	r3, r3, #1
 8002b60:	b2dc      	uxtb	r4, r3
               ((char)HAL_GPIO_ReadPin(this->IN_B_PORT, this->IN_B_PIN));
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	68da      	ldr	r2, [r3, #12]
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	885b      	ldrh	r3, [r3, #2]
 8002b6a:	4619      	mov	r1, r3
 8002b6c:	4610      	mov	r0, r2
 8002b6e:	f7fe faf3 	bl	8001158 <HAL_GPIO_ReadPin>
 8002b72:	4603      	mov	r3, r0
    newState = ((char)HAL_GPIO_ReadPin(this->IN_A_PORT, this->IN_A_PIN)) * ((char)2) +
 8002b74:	4423      	add	r3, r4
 8002b76:	b2da      	uxtb	r2, r3
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	765a      	strb	r2, [r3, #25]
    newState = states[(int)newState];
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	7e5b      	ldrb	r3, [r3, #25]
 8002b80:	461a      	mov	r2, r3
 8002b82:	4b18      	ldr	r3, [pc, #96]	; (8002be4 <_ZN5MOTOR6OnEdgeEv+0xa0>)
 8002b84:	5c9a      	ldrb	r2, [r3, r2]
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	765a      	strb	r2, [r3, #25]
    move = (newState - state + ((char)4)) % ((char)4);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	7e5b      	ldrb	r3, [r3, #25]
 8002b8e:	461a      	mov	r2, r3
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	7e1b      	ldrb	r3, [r3, #24]
 8002b94:	1ad3      	subs	r3, r2, r3
 8002b96:	3304      	adds	r3, #4
 8002b98:	425a      	negs	r2, r3
 8002b9a:	f003 0303 	and.w	r3, r3, #3
 8002b9e:	f002 0203 	and.w	r2, r2, #3
 8002ba2:	bf58      	it	pl
 8002ba4:	4253      	negpl	r3, r2
 8002ba6:	b2da      	uxtb	r2, r3
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	769a      	strb	r2, [r3, #26]
    state = newState;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	7e5a      	ldrb	r2, [r3, #25]
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	761a      	strb	r2, [r3, #24]
    if (move == (char)1)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	7e9b      	ldrb	r3, [r3, #26]
 8002bb8:	2b01      	cmp	r3, #1
 8002bba:	d105      	bne.n	8002bc8 <_ZN5MOTOR6OnEdgeEv+0x84>
    {
        position--;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	69db      	ldr	r3, [r3, #28]
 8002bc0:	1e5a      	subs	r2, r3, #1
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	61da      	str	r2, [r3, #28]
    }

#ifdef MOTOR_SHOW_POS
    // printf("state=%d,pos=%d\n", state, position);
#endif
}
 8002bc6:	e008      	b.n	8002bda <_ZN5MOTOR6OnEdgeEv+0x96>
    else if (move == (char)3)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	7e9b      	ldrb	r3, [r3, #26]
 8002bcc:	2b03      	cmp	r3, #3
 8002bce:	d104      	bne.n	8002bda <_ZN5MOTOR6OnEdgeEv+0x96>
        position++;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	69db      	ldr	r3, [r3, #28]
 8002bd4:	1c5a      	adds	r2, r3, #1
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	61da      	str	r2, [r3, #28]
}
 8002bda:	bf00      	nop
 8002bdc:	370c      	adds	r7, #12
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bd90      	pop	{r4, r7, pc}
 8002be2:	bf00      	nop
 8002be4:	08006618 	.word	0x08006618

08002be8 <_ZN5MOTOR6OnEdgeEt>:
//传参，外部中断引脚
void MOTOR::OnEdge(uint16_t GPIO_pin)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b082      	sub	sp, #8
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
 8002bf0:	460b      	mov	r3, r1
 8002bf2:	807b      	strh	r3, [r7, #2]
    if (GPIO_pin != this->IN_A_PIN && GPIO_pin != this->IN_B_PIN)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	881b      	ldrh	r3, [r3, #0]
 8002bf8:	887a      	ldrh	r2, [r7, #2]
 8002bfa:	429a      	cmp	r2, r3
 8002bfc:	d004      	beq.n	8002c08 <_ZN5MOTOR6OnEdgeEt+0x20>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	885b      	ldrh	r3, [r3, #2]
 8002c02:	887a      	ldrh	r2, [r7, #2]
 8002c04:	429a      	cmp	r2, r3
 8002c06:	d103      	bne.n	8002c10 <_ZN5MOTOR6OnEdgeEt+0x28>
        return;
    OnEdge();
 8002c08:	6878      	ldr	r0, [r7, #4]
 8002c0a:	f7ff ff9b 	bl	8002b44 <_ZN5MOTOR6OnEdgeEv>
 8002c0e:	e000      	b.n	8002c12 <_ZN5MOTOR6OnEdgeEt+0x2a>
        return;
 8002c10:	bf00      	nop
}
 8002c12:	3708      	adds	r7, #8
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bd80      	pop	{r7, pc}

08002c18 <_ZN5MOTOR10SetVoltageEf>:
{
    return speed;
}
//设置电压，范围=-100 to 100，可超限
void MOTOR::SetVoltage(float v)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b082      	sub	sp, #8
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
 8002c20:	ed87 0a00 	vstr	s0, [r7]
    if (v > 100)
 8002c24:	edd7 7a00 	vldr	s15, [r7]
 8002c28:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8002cc4 <_ZN5MOTOR10SetVoltageEf+0xac>
 8002c2c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c34:	dd02      	ble.n	8002c3c <_ZN5MOTOR10SetVoltageEf+0x24>
        v = 100;
 8002c36:	4b24      	ldr	r3, [pc, #144]	; (8002cc8 <_ZN5MOTOR10SetVoltageEf+0xb0>)
 8002c38:	603b      	str	r3, [r7, #0]
 8002c3a:	e00a      	b.n	8002c52 <_ZN5MOTOR10SetVoltageEf+0x3a>
    else if (v < -100)
 8002c3c:	edd7 7a00 	vldr	s15, [r7]
 8002c40:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8002ccc <_ZN5MOTOR10SetVoltageEf+0xb4>
 8002c44:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c4c:	d501      	bpl.n	8002c52 <_ZN5MOTOR10SetVoltageEf+0x3a>
        v = -100;
 8002c4e:	4b20      	ldr	r3, [pc, #128]	; (8002cd0 <_ZN5MOTOR10SetVoltageEf+0xb8>)
 8002c50:	603b      	str	r3, [r7, #0]
    if (v >= 0)
 8002c52:	edd7 7a00 	vldr	s15, [r7]
 8002c56:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002c5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c5e:	db14      	blt.n	8002c8a <_ZN5MOTOR10SetVoltageEf+0x72>
    {
        PWM_SetFreq(this->OUT_A_PORT, this->OUT_A_PIN, v, 100);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6918      	ldr	r0, [r3, #16]
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	889b      	ldrh	r3, [r3, #4]
 8002c68:	2264      	movs	r2, #100	; 0x64
 8002c6a:	ed97 0a00 	vldr	s0, [r7]
 8002c6e:	4619      	mov	r1, r3
 8002c70:	f7ff fd8e 	bl	8002790 <_Z11PWM_SetFreqP12GPIO_TypeDeftfj>
        PWM_SetFreq(this->OUT_B_PORT, this->OUT_B_PIN, 0, 100);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6958      	ldr	r0, [r3, #20]
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	88db      	ldrh	r3, [r3, #6]
 8002c7c:	2264      	movs	r2, #100	; 0x64
 8002c7e:	ed9f 0a15 	vldr	s0, [pc, #84]	; 8002cd4 <_ZN5MOTOR10SetVoltageEf+0xbc>
 8002c82:	4619      	mov	r1, r3
 8002c84:	f7ff fd84 	bl	8002790 <_Z11PWM_SetFreqP12GPIO_TypeDeftfj>
    else
    {
        PWM_SetFreq(this->OUT_A_PORT, this->OUT_A_PIN, 0, 100);
        PWM_SetFreq(this->OUT_B_PORT, this->OUT_B_PIN, -v, 100);
    }
}
 8002c88:	e017      	b.n	8002cba <_ZN5MOTOR10SetVoltageEf+0xa2>
        PWM_SetFreq(this->OUT_A_PORT, this->OUT_A_PIN, 0, 100);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6918      	ldr	r0, [r3, #16]
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	889b      	ldrh	r3, [r3, #4]
 8002c92:	2264      	movs	r2, #100	; 0x64
 8002c94:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 8002cd4 <_ZN5MOTOR10SetVoltageEf+0xbc>
 8002c98:	4619      	mov	r1, r3
 8002c9a:	f7ff fd79 	bl	8002790 <_Z11PWM_SetFreqP12GPIO_TypeDeftfj>
        PWM_SetFreq(this->OUT_B_PORT, this->OUT_B_PIN, -v, 100);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6958      	ldr	r0, [r3, #20]
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	88db      	ldrh	r3, [r3, #6]
 8002ca6:	edd7 7a00 	vldr	s15, [r7]
 8002caa:	eef1 7a67 	vneg.f32	s15, s15
 8002cae:	2264      	movs	r2, #100	; 0x64
 8002cb0:	eeb0 0a67 	vmov.f32	s0, s15
 8002cb4:	4619      	mov	r1, r3
 8002cb6:	f7ff fd6b 	bl	8002790 <_Z11PWM_SetFreqP12GPIO_TypeDeftfj>
}
 8002cba:	bf00      	nop
 8002cbc:	3708      	adds	r7, #8
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bd80      	pop	{r7, pc}
 8002cc2:	bf00      	nop
 8002cc4:	42c80000 	.word	0x42c80000
 8002cc8:	42c80000 	.word	0x42c80000
 8002ccc:	c2c80000 	.word	0xc2c80000
 8002cd0:	c2c80000 	.word	0xc2c80000
 8002cd4:	00000000 	.word	0x00000000

08002cd8 <_ZN5MOTORC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP12GPIO_TypeDeftS7_tS7_tS7_t>:

//初始化
MOTOR::MOTOR(
 8002cd8:	b590      	push	{r4, r7, lr}
 8002cda:	b08b      	sub	sp, #44	; 0x2c
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	60f8      	str	r0, [r7, #12]
 8002ce0:	60b9      	str	r1, [r7, #8]
 8002ce2:	607a      	str	r2, [r7, #4]
 8002ce4:	807b      	strh	r3, [r7, #2]
    GPIO_TypeDef *IN_B_PORT,
    uint16_t IN_B_PIN,
    GPIO_TypeDef *OUT_A_PORT,
    uint16_t OUT_A_PIN,
    GPIO_TypeDef *OUT_B_PORT,
    uint16_t OUT_B_PIN)
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8002cec:	4618      	mov	r0, r3
 8002cee:	f003 f9b9 	bl	8006064 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	f7ff fbfd 	bl	80024f8 <_ZN3PIDC1Ev>
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	f503 73d2 	add.w	r3, r3, #420	; 0x1a4
 8002d04:	4618      	mov	r0, r3
 8002d06:	f7ff fbf7 	bl	80024f8 <_ZN3PIDC1Ev>
{
    //命名
    this->name = name;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8002d10:	68b9      	ldr	r1, [r7, #8]
 8002d12:	4618      	mov	r0, r3
 8002d14:	f003 f9b3 	bl	800607e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>

    //复制引脚设置-PORT
    this->IN_A_PORT = IN_A_PORT;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	687a      	ldr	r2, [r7, #4]
 8002d1c:	609a      	str	r2, [r3, #8]
    this->IN_B_PORT = IN_B_PORT;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002d22:	60da      	str	r2, [r3, #12]
    this->OUT_A_PORT = OUT_A_PORT;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002d28:	611a      	str	r2, [r3, #16]
    this->OUT_B_PORT = OUT_B_PORT;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002d2e:	615a      	str	r2, [r3, #20]
    //复制引脚设置-PIN
    this->IN_A_PIN = IN_A_PIN;
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	887a      	ldrh	r2, [r7, #2]
 8002d34:	801a      	strh	r2, [r3, #0]
    this->IN_B_PIN = IN_B_PIN;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8002d3a:	805a      	strh	r2, [r3, #2]
    this->OUT_A_PIN = OUT_A_PIN;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8002d42:	809a      	strh	r2, [r3, #4]
    this->OUT_B_PIN = OUT_B_PIN;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8002d4a:	80da      	strh	r2, [r3, #6]

    //更新初始位置
    this->state =
        ((char)HAL_GPIO_ReadPin(this->IN_A_PORT, this->IN_A_PIN)) * ((char)2) +
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	689a      	ldr	r2, [r3, #8]
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	881b      	ldrh	r3, [r3, #0]
 8002d54:	4619      	mov	r1, r3
 8002d56:	4610      	mov	r0, r2
 8002d58:	f7fe f9fe 	bl	8001158 <HAL_GPIO_ReadPin>
 8002d5c:	4603      	mov	r3, r0
 8002d5e:	005b      	lsls	r3, r3, #1
 8002d60:	b2dc      	uxtb	r4, r3
        ((char)HAL_GPIO_ReadPin(this->IN_B_PORT, this->IN_B_PIN));
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	68da      	ldr	r2, [r3, #12]
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	885b      	ldrh	r3, [r3, #2]
 8002d6a:	4619      	mov	r1, r3
 8002d6c:	4610      	mov	r0, r2
 8002d6e:	f7fe f9f3 	bl	8001158 <HAL_GPIO_ReadPin>
 8002d72:	4603      	mov	r3, r0
        ((char)HAL_GPIO_ReadPin(this->IN_A_PORT, this->IN_A_PIN)) * ((char)2) +
 8002d74:	4423      	add	r3, r4
 8002d76:	b2da      	uxtb	r2, r3
    this->state =
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	761a      	strb	r2, [r3, #24]
    this->state = states[(int)this->state];
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	7e1b      	ldrb	r3, [r3, #24]
 8002d80:	461a      	mov	r2, r3
 8002d82:	4b51      	ldr	r3, [pc, #324]	; (8002ec8 <_ZN5MOTORC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP12GPIO_TypeDeftS7_tS7_tS7_t+0x1f0>)
 8002d84:	5c9a      	ldrb	r2, [r3, r2]
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	761a      	strb	r2, [r3, #24]

    // PID初始化
    posPID.SetAttr(0.3, 0.2, 1, 500);
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8002d90:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8002d94:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8002d98:	eddf 0a4c 	vldr	s1, [pc, #304]	; 8002ecc <_ZN5MOTORC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP12GPIO_TypeDeftS7_tS7_tS7_t+0x1f4>
 8002d9c:	ed9f 0a4c 	vldr	s0, [pc, #304]	; 8002ed0 <_ZN5MOTORC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP12GPIO_TypeDeftS7_tS7_tS7_t+0x1f8>
 8002da0:	4618      	mov	r0, r3
 8002da2:	f7ff fbcf 	bl	8002544 <_ZN3PID7SetAttrEfffi>
    speedPID.SetAttr(0.5, 0.0, 0.2, 200);
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	f503 73d2 	add.w	r3, r3, #420	; 0x1a4
 8002dac:	21c8      	movs	r1, #200	; 0xc8
 8002dae:	ed9f 1a47 	vldr	s2, [pc, #284]	; 8002ecc <_ZN5MOTORC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP12GPIO_TypeDeftS7_tS7_tS7_t+0x1f4>
 8002db2:	eddf 0a48 	vldr	s1, [pc, #288]	; 8002ed4 <_ZN5MOTORC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP12GPIO_TypeDeftS7_tS7_tS7_t+0x1fc>
 8002db6:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8002dba:	4618      	mov	r0, r3
 8002dbc:	f7ff fbc2 	bl	8002544 <_ZN3PID7SetAttrEfffi>

    //位置=0
    position = 0;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	61da      	str	r2, [r3, #28]
    posPID.SetAIM(0);
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8002dcc:	ed9f 0a41 	vldr	s0, [pc, #260]	; 8002ed4 <_ZN5MOTORC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP12GPIO_TypeDeftS7_tS7_tS7_t+0x1fc>
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	f7ff fc85 	bl	80026e0 <_ZN3PID6SetAIMEf>

    std::string TaskName;
 8002dd6:	f107 0310 	add.w	r3, r7, #16
 8002dda:	4618      	mov	r0, r3
 8002ddc:	f003 f942 	bl	8006064 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>

    //启动测速任务
    TaskName = name;
 8002de0:	f107 0310 	add.w	r3, r7, #16
 8002de4:	68b9      	ldr	r1, [r7, #8]
 8002de6:	4618      	mov	r0, r3
 8002de8:	f003 f949 	bl	800607e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>
    TaskName.append("_CALSPEED");
 8002dec:	f107 0310 	add.w	r3, r7, #16
 8002df0:	4939      	ldr	r1, [pc, #228]	; (8002ed8 <_ZN5MOTORC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP12GPIO_TypeDeftS7_tS7_tS7_t+0x200>)
 8002df2:	4618      	mov	r0, r3
 8002df4:	f003 f96e 	bl	80060d4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc>
    CalSpeedTask_attributes.name = TaskName.c_str();
 8002df8:	f107 0310 	add.w	r3, r7, #16
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	f003 f97f 	bl	8006100 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 8002e02:	4602      	mov	r2, r0
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	631a      	str	r2, [r3, #48]	; 0x30
    CalSpeedTask_attributes.priority = (osPriority_t)osPriorityNormal;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	2218      	movs	r2, #24
 8002e0c:	649a      	str	r2, [r3, #72]	; 0x48
    CalSpeedTaskHandle = osThreadNew((osThreadFunc_t)GlobalCalSpeed, (void *)this->name.c_str(), &CalSpeedTask_attributes);
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8002e14:	4618      	mov	r0, r3
 8002e16:	f003 f973 	bl	8006100 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 8002e1a:	4601      	mov	r1, r0
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	3330      	adds	r3, #48	; 0x30
 8002e20:	461a      	mov	r2, r3
 8002e22:	482e      	ldr	r0, [pc, #184]	; (8002edc <_ZN5MOTORC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP12GPIO_TypeDeftS7_tS7_tS7_t+0x204>)
 8002e24:	f000 fa40 	bl	80032a8 <osThreadNew>
 8002e28:	4602      	mov	r2, r0
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	625a      	str	r2, [r3, #36]	; 0x24

    //启动Speed PID任务
    TaskName = name;
 8002e2e:	f107 0310 	add.w	r3, r7, #16
 8002e32:	68b9      	ldr	r1, [r7, #8]
 8002e34:	4618      	mov	r0, r3
 8002e36:	f003 f922 	bl	800607e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>
    TaskName.append("_SPEEDPID");
 8002e3a:	f107 0310 	add.w	r3, r7, #16
 8002e3e:	4928      	ldr	r1, [pc, #160]	; (8002ee0 <_ZN5MOTORC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP12GPIO_TypeDeftS7_tS7_tS7_t+0x208>)
 8002e40:	4618      	mov	r0, r3
 8002e42:	f003 f947 	bl	80060d4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc>
    SpeedPIDTask_attributes.name = TaskName.c_str();
 8002e46:	f107 0310 	add.w	r3, r7, #16
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	f003 f958 	bl	8006100 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 8002e50:	4602      	mov	r2, r0
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	655a      	str	r2, [r3, #84]	; 0x54
    SpeedPIDTask_attributes.priority = (osPriority_t)osPriorityNormal;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	2218      	movs	r2, #24
 8002e5a:	66da      	str	r2, [r3, #108]	; 0x6c
    SpeedPIDTaskHandle = osThreadNew((osThreadFunc_t)GlobalSpeedPID, NULL, &SpeedPIDTask_attributes);
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	3354      	adds	r3, #84	; 0x54
 8002e60:	461a      	mov	r2, r3
 8002e62:	2100      	movs	r1, #0
 8002e64:	481f      	ldr	r0, [pc, #124]	; (8002ee4 <_ZN5MOTORC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP12GPIO_TypeDeftS7_tS7_tS7_t+0x20c>)
 8002e66:	f000 fa1f 	bl	80032a8 <osThreadNew>
 8002e6a:	4602      	mov	r2, r0
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	629a      	str	r2, [r3, #40]	; 0x28

    //启动Position PID任务
    TaskName = name;
 8002e70:	f107 0310 	add.w	r3, r7, #16
 8002e74:	68b9      	ldr	r1, [r7, #8]
 8002e76:	4618      	mov	r0, r3
 8002e78:	f003 f901 	bl	800607e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>
    TaskName.append("_POSPID");
 8002e7c:	f107 0310 	add.w	r3, r7, #16
 8002e80:	4919      	ldr	r1, [pc, #100]	; (8002ee8 <_ZN5MOTORC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP12GPIO_TypeDeftS7_tS7_tS7_t+0x210>)
 8002e82:	4618      	mov	r0, r3
 8002e84:	f003 f926 	bl	80060d4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc>
    PosPIDTask_attributes.name = TaskName.c_str();
 8002e88:	f107 0310 	add.w	r3, r7, #16
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	f003 f937 	bl	8006100 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 8002e92:	4602      	mov	r2, r0
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	679a      	str	r2, [r3, #120]	; 0x78
    PosPIDTask_attributes.priority = (osPriority_t)osPriorityNormal;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	2218      	movs	r2, #24
 8002e9c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
     PosPIDTaskHandle = osThreadNew((osThreadFunc_t)GlobalPosPID, NULL, &PosPIDTask_attributes);
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	3378      	adds	r3, #120	; 0x78
 8002ea4:	461a      	mov	r2, r3
 8002ea6:	2100      	movs	r1, #0
 8002ea8:	4810      	ldr	r0, [pc, #64]	; (8002eec <_ZN5MOTORC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP12GPIO_TypeDeftS7_tS7_tS7_t+0x214>)
 8002eaa:	f000 f9fd 	bl	80032a8 <osThreadNew>
 8002eae:	4602      	mov	r2, r0
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	62da      	str	r2, [r3, #44]	; 0x2c
    std::string TaskName;
 8002eb4:	f107 0310 	add.w	r3, r7, #16
 8002eb8:	4618      	mov	r0, r3
 8002eba:	f003 f8da 	bl	8006072 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
}
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	372c      	adds	r7, #44	; 0x2c
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	bd90      	pop	{r4, r7, pc}
 8002ec8:	08006618 	.word	0x08006618
 8002ecc:	3e4ccccd 	.word	0x3e4ccccd
 8002ed0:	3e99999a 	.word	0x3e99999a
 8002ed4:	00000000 	.word	0x00000000
 8002ed8:	080065a0 	.word	0x080065a0
 8002edc:	080024a9 	.word	0x080024a9
 8002ee0:	080065ac 	.word	0x080065ac
 8002ee4:	08002481 	.word	0x08002481
 8002ee8:	080065b8 	.word	0x080065b8
 8002eec:	08002465 	.word	0x08002465

08002ef0 <_ZN5MOTORD1Ev>:

MOTOR::~MOTOR()
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b082      	sub	sp, #8
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
{
    osThreadTerminate(CalSpeedTaskHandle);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002efc:	4618      	mov	r0, r3
 8002efe:	f000 fa65 	bl	80033cc <osThreadTerminate>
     osThreadTerminate(SpeedPIDTaskHandle);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f06:	4618      	mov	r0, r3
 8002f08:	f000 fa60 	bl	80033cc <osThreadTerminate>
     osThreadTerminate(PosPIDTaskHandle);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f10:	4618      	mov	r0, r3
 8002f12:	f000 fa5b 	bl	80033cc <osThreadTerminate>
MOTOR::~MOTOR()
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	f503 73d2 	add.w	r3, r3, #420	; 0x1a4
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	f7ff fb06 	bl	800252e <_ZN3PIDD1Ev>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8002f28:	4618      	mov	r0, r3
 8002f2a:	f7ff fb00 	bl	800252e <_ZN3PIDD1Ev>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8002f34:	4618      	mov	r0, r3
 8002f36:	f003 f89c 	bl	8006072 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
}
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	3708      	adds	r7, #8
 8002f40:	46bd      	mov	sp, r7
 8002f42:	bd80      	pop	{r7, pc}

08002f44 <_ZN5MOTOR8OnPosPIDEv>:

void MOTOR::OnPosPID() //位置PID更新
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b082      	sub	sp, #8
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
    posPIDresult = posPID.Update((float)position);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	f503 72c0 	add.w	r2, r3, #384	; 0x180
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	69db      	ldr	r3, [r3, #28]
 8002f56:	ee07 3a90 	vmov	s15, r3
 8002f5a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002f5e:	eeb0 0a67 	vmov.f32	s0, s15
 8002f62:	4610      	mov	r0, r2
 8002f64:	f7ff fb17 	bl	8002596 <_ZN3PID6UpdateEf>
 8002f68:	eef0 7a40 	vmov.f32	s15, s0
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	edc3 7a5e 	vstr	s15, [r3, #376]	; 0x178
    if (
        posPIDresult <= SPEED_IGNORE_VALUE &&
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	edd3 7a5e 	vldr	s15, [r3, #376]	; 0x178
    if (
 8002f78:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8002f7c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f84:	d814      	bhi.n	8002fb0 <_ZN5MOTOR8OnPosPIDEv+0x6c>
        posPIDresult >= -SPEED_IGNORE_VALUE &&
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	edd3 7a5e 	vldr	s15, [r3, #376]	; 0x178
        posPIDresult <= SPEED_IGNORE_VALUE &&
 8002f8c:	eeb8 7a08 	vmov.f32	s14, #136	; 0xc0400000 -3.0
 8002f90:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f98:	db0a      	blt.n	8002fb0 <_ZN5MOTOR8OnPosPIDEv+0x6c>
        position == positionTarget)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	69da      	ldr	r2, [r3, #28]
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6a1b      	ldr	r3, [r3, #32]
        posPIDresult >= -SPEED_IGNORE_VALUE &&
 8002fa2:	429a      	cmp	r2, r3
 8002fa4:	d104      	bne.n	8002fb0 <_ZN5MOTOR8OnPosPIDEv+0x6c>
        posPIDresult = 0;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	f04f 0200 	mov.w	r2, #0
 8002fac:	f8c3 2178 	str.w	r2, [r3, #376]	; 0x178
    // SetVoltage(posPIDresult);
    //待改为SetSpeed
    SetSpeed(posPIDresult);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	edd3 7a5e 	vldr	s15, [r3, #376]	; 0x178
 8002fb6:	eeb0 0a67 	vmov.f32	s0, s15
 8002fba:	6878      	ldr	r0, [r7, #4]
 8002fbc:	f7ff fd88 	bl	8002ad0 <_ZN5MOTOR8SetSpeedEf>
#ifdef MOTOR_SHOW_POS_PID
    printf("posPID=%d,pos=%d\n", posPIDresult, position);
#endif
}
 8002fc0:	bf00      	nop
 8002fc2:	3708      	adds	r7, #8
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	bd80      	pop	{r7, pc}

08002fc8 <_ZN5MOTOR10OnSpeedPIDEv>:

void MOTOR::OnSpeedPID() //速度PID更新
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b082      	sub	sp, #8
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
    speedPIDresult = speedPID.Update((float)speed);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	f503 72d2 	add.w	r2, r3, #420	; 0x1a4
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	f8d3 3170 	ldr.w	r3, [r3, #368]	; 0x170
 8002fdc:	ee07 3a90 	vmov	s15, r3
 8002fe0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002fe4:	eeb0 0a67 	vmov.f32	s0, s15
 8002fe8:	4610      	mov	r0, r2
 8002fea:	f7ff fad4 	bl	8002596 <_ZN3PID6UpdateEf>
 8002fee:	eef0 7a40 	vmov.f32	s15, s0
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	edc3 7a5f 	vstr	s15, [r3, #380]	; 0x17c
    if((speed>VOLTAGE_TOGGLE_SPEED&&speedPIDresult<0)||
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	f8d3 3170 	ldr.w	r3, [r3, #368]	; 0x170
 8002ffe:	2b0a      	cmp	r3, #10
 8003000:	dd07      	ble.n	8003012 <_ZN5MOTOR10OnSpeedPIDEv+0x4a>
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	edd3 7a5f 	vldr	s15, [r3, #380]	; 0x17c
 8003008:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800300c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003010:	d40d      	bmi.n	800302e <_ZN5MOTOR10OnSpeedPIDEv+0x66>
    		(speed<-VOLTAGE_TOGGLE_SPEED&&speedPIDresult>0)){
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	f8d3 3170 	ldr.w	r3, [r3, #368]	; 0x170
    if((speed>VOLTAGE_TOGGLE_SPEED&&speedPIDresult<0)||
 8003018:	f113 0f0a 	cmn.w	r3, #10
 800301c:	da0d      	bge.n	800303a <_ZN5MOTOR10OnSpeedPIDEv+0x72>
    		(speed<-VOLTAGE_TOGGLE_SPEED&&speedPIDresult>0)){
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	edd3 7a5f 	vldr	s15, [r3, #380]	; 0x17c
 8003024:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003028:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800302c:	dd05      	ble.n	800303a <_ZN5MOTOR10OnSpeedPIDEv+0x72>
    	SetVoltage(0);
 800302e:	ed9f 0a09 	vldr	s0, [pc, #36]	; 8003054 <_ZN5MOTOR10OnSpeedPIDEv+0x8c>
 8003032:	6878      	ldr	r0, [r7, #4]
 8003034:	f7ff fdf0 	bl	8002c18 <_ZN5MOTOR10SetVoltageEf>
 8003038:	e008      	b.n	800304c <_ZN5MOTOR10OnSpeedPIDEv+0x84>
    }
    else
    	SetVoltage(speedPIDresult);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	edd3 7a5f 	vldr	s15, [r3, #380]	; 0x17c
 8003040:	eeb0 0a67 	vmov.f32	s0, s15
 8003044:	6878      	ldr	r0, [r7, #4]
 8003046:	f7ff fde7 	bl	8002c18 <_ZN5MOTOR10SetVoltageEf>
#ifdef MOTOR_SHOW_SPEED_PID
    printf("%f,%d\n", speedPIDresult, speed);
#endif
}
 800304a:	bf00      	nop
 800304c:	bf00      	nop
 800304e:	3708      	adds	r7, #8
 8003050:	46bd      	mov	sp, r7
 8003052:	bd80      	pop	{r7, pc}
 8003054:	00000000 	.word	0x00000000

08003058 <_ZStneIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EESA_>:
   *  @param __rhs  Second string.
   *  @return  True if @a __lhs.compare(@a __rhs) != 0.  False otherwise.
   */
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator!=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
 8003058:	b580      	push	{r7, lr}
 800305a:	b082      	sub	sp, #8
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
 8003060:	6039      	str	r1, [r7, #0]
	       const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return !(__lhs == __rhs); }
 8003062:	6839      	ldr	r1, [r7, #0]
 8003064:	6878      	ldr	r0, [r7, #4]
 8003066:	f000 f808 	bl	800307a <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
 800306a:	4603      	mov	r3, r0
 800306c:	f083 0301 	eor.w	r3, r3, #1
 8003070:	b2db      	uxtb	r3, r3
 8003072:	4618      	mov	r0, r3
 8003074:	3708      	adds	r7, #8
 8003076:	46bd      	mov	sp, r7
 8003078:	bd80      	pop	{r7, pc}

0800307a <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>:
    operator==(const basic_string<_CharT>& __lhs,
 800307a:	b5b0      	push	{r4, r5, r7, lr}
 800307c:	b082      	sub	sp, #8
 800307e:	af00      	add	r7, sp, #0
 8003080:	6078      	str	r0, [r7, #4]
 8003082:	6039      	str	r1, [r7, #0]
    { return (__lhs.size() == __rhs.size()
 8003084:	6878      	ldr	r0, [r7, #4]
 8003086:	f003 f800 	bl	800608a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
 800308a:	4604      	mov	r4, r0
 800308c:	6838      	ldr	r0, [r7, #0]
 800308e:	f002 fffc 	bl	800608a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
 8003092:	4603      	mov	r3, r0
	      && !std::char_traits<_CharT>::compare(__lhs.data(), __rhs.data(),
 8003094:	429c      	cmp	r4, r3
 8003096:	d115      	bne.n	80030c4 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_+0x4a>
 8003098:	6878      	ldr	r0, [r7, #4]
 800309a:	f003 f833 	bl	8006104 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4dataEv>
 800309e:	4604      	mov	r4, r0
 80030a0:	6838      	ldr	r0, [r7, #0]
 80030a2:	f003 f82f 	bl	8006104 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4dataEv>
 80030a6:	4605      	mov	r5, r0
 80030a8:	6878      	ldr	r0, [r7, #4]
 80030aa:	f002 ffee 	bl	800608a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
 80030ae:	4603      	mov	r3, r0
 80030b0:	461a      	mov	r2, r3
 80030b2:	4629      	mov	r1, r5
 80030b4:	4620      	mov	r0, r4
 80030b6:	f7ff fc83 	bl	80029c0 <_ZNSt11char_traitsIcE7compareEPKcS2_j>
 80030ba:	4603      	mov	r3, r0
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d101      	bne.n	80030c4 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_+0x4a>
 80030c0:	2301      	movs	r3, #1
 80030c2:	e000      	b.n	80030c6 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_+0x4c>
 80030c4:	2300      	movs	r3, #0
						    __lhs.size())); }
 80030c6:	4618      	mov	r0, r3
 80030c8:	3708      	adds	r7, #8
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bdb0      	pop	{r4, r5, r7, pc}
	...

080030d0 <_Z41__static_initialization_and_destruction_0ii>:
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b090      	sub	sp, #64	; 0x40
 80030d4:	af06      	add	r7, sp, #24
 80030d6:	6078      	str	r0, [r7, #4]
 80030d8:	6039      	str	r1, [r7, #0]
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2b01      	cmp	r3, #1
 80030de:	d12e      	bne.n	800313e <_Z41__static_initialization_and_destruction_0ii+0x6e>
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d129      	bne.n	800313e <_Z41__static_initialization_and_destruction_0ii+0x6e>
MOTOR motor("M0", GPIOD, GPIO_PIN_0, GPIOD, GPIO_PIN_1, GPIOE, GPIO_PIN_0, GPIOE, GPIO_PIN_1);
 80030ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80030ee:	4618      	mov	r0, r3
 80030f0:	f002 ff0c 	bl	8005f0c <_ZNSaIcEC1Ev>
 80030f4:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80030f8:	f107 030c 	add.w	r3, r7, #12
 80030fc:	4917      	ldr	r1, [pc, #92]	; (800315c <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 80030fe:	4618      	mov	r0, r3
 8003100:	f003 f826 	bl	8006150 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8003104:	f107 010c 	add.w	r1, r7, #12
 8003108:	2302      	movs	r3, #2
 800310a:	9305      	str	r3, [sp, #20]
 800310c:	4b14      	ldr	r3, [pc, #80]	; (8003160 <_Z41__static_initialization_and_destruction_0ii+0x90>)
 800310e:	9304      	str	r3, [sp, #16]
 8003110:	2301      	movs	r3, #1
 8003112:	9303      	str	r3, [sp, #12]
 8003114:	4b12      	ldr	r3, [pc, #72]	; (8003160 <_Z41__static_initialization_and_destruction_0ii+0x90>)
 8003116:	9302      	str	r3, [sp, #8]
 8003118:	2302      	movs	r3, #2
 800311a:	9301      	str	r3, [sp, #4]
 800311c:	4b11      	ldr	r3, [pc, #68]	; (8003164 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 800311e:	9300      	str	r3, [sp, #0]
 8003120:	2301      	movs	r3, #1
 8003122:	4a10      	ldr	r2, [pc, #64]	; (8003164 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 8003124:	4810      	ldr	r0, [pc, #64]	; (8003168 <_Z41__static_initialization_and_destruction_0ii+0x98>)
 8003126:	f7ff fdd7 	bl	8002cd8 <_ZN5MOTORC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP12GPIO_TypeDeftS7_tS7_tS7_t>
 800312a:	f107 030c 	add.w	r3, r7, #12
 800312e:	4618      	mov	r0, r3
 8003130:	f002 ff9f 	bl	8006072 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003134:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003138:	4618      	mov	r0, r3
 800313a:	f002 fee8 	bl	8005f0e <_ZNSaIcED1Ev>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d107      	bne.n	8003154 <_Z41__static_initialization_and_destruction_0ii+0x84>
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800314a:	4293      	cmp	r3, r2
 800314c:	d102      	bne.n	8003154 <_Z41__static_initialization_and_destruction_0ii+0x84>
 800314e:	4806      	ldr	r0, [pc, #24]	; (8003168 <_Z41__static_initialization_and_destruction_0ii+0x98>)
 8003150:	f7ff fece 	bl	8002ef0 <_ZN5MOTORD1Ev>
}
 8003154:	bf00      	nop
 8003156:	3728      	adds	r7, #40	; 0x28
 8003158:	46bd      	mov	sp, r7
 800315a:	bd80      	pop	{r7, pc}
 800315c:	080065c0 	.word	0x080065c0
 8003160:	40021000 	.word	0x40021000
 8003164:	40020c00 	.word	0x40020c00
 8003168:	200000f0 	.word	0x200000f0

0800316c <_GLOBAL__sub_I_motor>:
 800316c:	b580      	push	{r7, lr}
 800316e:	af00      	add	r7, sp, #0
 8003170:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003174:	2001      	movs	r0, #1
 8003176:	f7ff ffab 	bl	80030d0 <_Z41__static_initialization_and_destruction_0ii>
 800317a:	bd80      	pop	{r7, pc}

0800317c <_GLOBAL__sub_D_motor>:
 800317c:	b580      	push	{r7, lr}
 800317e:	af00      	add	r7, sp, #0
 8003180:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003184:	2000      	movs	r0, #0
 8003186:	f7ff ffa3 	bl	80030d0 <_Z41__static_initialization_and_destruction_0ii>
 800318a:	bd80      	pop	{r7, pc}

0800318c <__NVIC_SetPriority>:
{
 800318c:	b480      	push	{r7}
 800318e:	b083      	sub	sp, #12
 8003190:	af00      	add	r7, sp, #0
 8003192:	4603      	mov	r3, r0
 8003194:	6039      	str	r1, [r7, #0]
 8003196:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003198:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800319c:	2b00      	cmp	r3, #0
 800319e:	db0a      	blt.n	80031b6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	b2da      	uxtb	r2, r3
 80031a4:	490c      	ldr	r1, [pc, #48]	; (80031d8 <__NVIC_SetPriority+0x4c>)
 80031a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031aa:	0112      	lsls	r2, r2, #4
 80031ac:	b2d2      	uxtb	r2, r2
 80031ae:	440b      	add	r3, r1
 80031b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80031b4:	e00a      	b.n	80031cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	b2da      	uxtb	r2, r3
 80031ba:	4908      	ldr	r1, [pc, #32]	; (80031dc <__NVIC_SetPriority+0x50>)
 80031bc:	79fb      	ldrb	r3, [r7, #7]
 80031be:	f003 030f 	and.w	r3, r3, #15
 80031c2:	3b04      	subs	r3, #4
 80031c4:	0112      	lsls	r2, r2, #4
 80031c6:	b2d2      	uxtb	r2, r2
 80031c8:	440b      	add	r3, r1
 80031ca:	761a      	strb	r2, [r3, #24]
}
 80031cc:	bf00      	nop
 80031ce:	370c      	adds	r7, #12
 80031d0:	46bd      	mov	sp, r7
 80031d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d6:	4770      	bx	lr
 80031d8:	e000e100 	.word	0xe000e100
 80031dc:	e000ed00 	.word	0xe000ed00

080031e0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80031e0:	b580      	push	{r7, lr}
 80031e2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80031e4:	4b05      	ldr	r3, [pc, #20]	; (80031fc <SysTick_Handler+0x1c>)
 80031e6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80031e8:	f001 fe2c 	bl	8004e44 <xTaskGetSchedulerState>
 80031ec:	4603      	mov	r3, r0
 80031ee:	2b01      	cmp	r3, #1
 80031f0:	d001      	beq.n	80031f6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80031f2:	f002 fc11 	bl	8005a18 <xPortSysTickHandler>
  }
}
 80031f6:	bf00      	nop
 80031f8:	bd80      	pop	{r7, pc}
 80031fa:	bf00      	nop
 80031fc:	e000e010 	.word	0xe000e010

08003200 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003200:	b580      	push	{r7, lr}
 8003202:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8003204:	2100      	movs	r1, #0
 8003206:	f06f 0004 	mvn.w	r0, #4
 800320a:	f7ff ffbf 	bl	800318c <__NVIC_SetPriority>
#endif
}
 800320e:	bf00      	nop
 8003210:	bd80      	pop	{r7, pc}
	...

08003214 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003214:	b480      	push	{r7}
 8003216:	b083      	sub	sp, #12
 8003218:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800321a:	f3ef 8305 	mrs	r3, IPSR
 800321e:	603b      	str	r3, [r7, #0]
  return(result);
 8003220:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003222:	2b00      	cmp	r3, #0
 8003224:	d003      	beq.n	800322e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8003226:	f06f 0305 	mvn.w	r3, #5
 800322a:	607b      	str	r3, [r7, #4]
 800322c:	e00c      	b.n	8003248 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800322e:	4b0a      	ldr	r3, [pc, #40]	; (8003258 <osKernelInitialize+0x44>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d105      	bne.n	8003242 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8003236:	4b08      	ldr	r3, [pc, #32]	; (8003258 <osKernelInitialize+0x44>)
 8003238:	2201      	movs	r2, #1
 800323a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800323c:	2300      	movs	r3, #0
 800323e:	607b      	str	r3, [r7, #4]
 8003240:	e002      	b.n	8003248 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8003242:	f04f 33ff 	mov.w	r3, #4294967295
 8003246:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003248:	687b      	ldr	r3, [r7, #4]
}
 800324a:	4618      	mov	r0, r3
 800324c:	370c      	adds	r7, #12
 800324e:	46bd      	mov	sp, r7
 8003250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003254:	4770      	bx	lr
 8003256:	bf00      	nop
 8003258:	200002b8 	.word	0x200002b8

0800325c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800325c:	b580      	push	{r7, lr}
 800325e:	b082      	sub	sp, #8
 8003260:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003262:	f3ef 8305 	mrs	r3, IPSR
 8003266:	603b      	str	r3, [r7, #0]
  return(result);
 8003268:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800326a:	2b00      	cmp	r3, #0
 800326c:	d003      	beq.n	8003276 <osKernelStart+0x1a>
    stat = osErrorISR;
 800326e:	f06f 0305 	mvn.w	r3, #5
 8003272:	607b      	str	r3, [r7, #4]
 8003274:	e010      	b.n	8003298 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8003276:	4b0b      	ldr	r3, [pc, #44]	; (80032a4 <osKernelStart+0x48>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	2b01      	cmp	r3, #1
 800327c:	d109      	bne.n	8003292 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800327e:	f7ff ffbf 	bl	8003200 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8003282:	4b08      	ldr	r3, [pc, #32]	; (80032a4 <osKernelStart+0x48>)
 8003284:	2202      	movs	r2, #2
 8003286:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003288:	f001 f980 	bl	800458c <vTaskStartScheduler>
      stat = osOK;
 800328c:	2300      	movs	r3, #0
 800328e:	607b      	str	r3, [r7, #4]
 8003290:	e002      	b.n	8003298 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8003292:	f04f 33ff 	mov.w	r3, #4294967295
 8003296:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003298:	687b      	ldr	r3, [r7, #4]
}
 800329a:	4618      	mov	r0, r3
 800329c:	3708      	adds	r7, #8
 800329e:	46bd      	mov	sp, r7
 80032a0:	bd80      	pop	{r7, pc}
 80032a2:	bf00      	nop
 80032a4:	200002b8 	.word	0x200002b8

080032a8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b08e      	sub	sp, #56	; 0x38
 80032ac:	af04      	add	r7, sp, #16
 80032ae:	60f8      	str	r0, [r7, #12]
 80032b0:	60b9      	str	r1, [r7, #8]
 80032b2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80032b4:	2300      	movs	r3, #0
 80032b6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80032b8:	f3ef 8305 	mrs	r3, IPSR
 80032bc:	617b      	str	r3, [r7, #20]
  return(result);
 80032be:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d17e      	bne.n	80033c2 <osThreadNew+0x11a>
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d07b      	beq.n	80033c2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80032ca:	2380      	movs	r3, #128	; 0x80
 80032cc:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80032ce:	2318      	movs	r3, #24
 80032d0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80032d2:	2300      	movs	r3, #0
 80032d4:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80032d6:	f04f 33ff 	mov.w	r3, #4294967295
 80032da:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d045      	beq.n	800336e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d002      	beq.n	80032f0 <osThreadNew+0x48>
        name = attr->name;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	699b      	ldr	r3, [r3, #24]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d002      	beq.n	80032fe <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	699b      	ldr	r3, [r3, #24]
 80032fc:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80032fe:	69fb      	ldr	r3, [r7, #28]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d008      	beq.n	8003316 <osThreadNew+0x6e>
 8003304:	69fb      	ldr	r3, [r7, #28]
 8003306:	2b38      	cmp	r3, #56	; 0x38
 8003308:	d805      	bhi.n	8003316 <osThreadNew+0x6e>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	685b      	ldr	r3, [r3, #4]
 800330e:	f003 0301 	and.w	r3, r3, #1
 8003312:	2b00      	cmp	r3, #0
 8003314:	d001      	beq.n	800331a <osThreadNew+0x72>
        return (NULL);
 8003316:	2300      	movs	r3, #0
 8003318:	e054      	b.n	80033c4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	695b      	ldr	r3, [r3, #20]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d003      	beq.n	800332a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	695b      	ldr	r3, [r3, #20]
 8003326:	089b      	lsrs	r3, r3, #2
 8003328:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	689b      	ldr	r3, [r3, #8]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d00e      	beq.n	8003350 <osThreadNew+0xa8>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	68db      	ldr	r3, [r3, #12]
 8003336:	2bbb      	cmp	r3, #187	; 0xbb
 8003338:	d90a      	bls.n	8003350 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800333e:	2b00      	cmp	r3, #0
 8003340:	d006      	beq.n	8003350 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	695b      	ldr	r3, [r3, #20]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d002      	beq.n	8003350 <osThreadNew+0xa8>
        mem = 1;
 800334a:	2301      	movs	r3, #1
 800334c:	61bb      	str	r3, [r7, #24]
 800334e:	e010      	b.n	8003372 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	689b      	ldr	r3, [r3, #8]
 8003354:	2b00      	cmp	r3, #0
 8003356:	d10c      	bne.n	8003372 <osThreadNew+0xca>
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	68db      	ldr	r3, [r3, #12]
 800335c:	2b00      	cmp	r3, #0
 800335e:	d108      	bne.n	8003372 <osThreadNew+0xca>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	691b      	ldr	r3, [r3, #16]
 8003364:	2b00      	cmp	r3, #0
 8003366:	d104      	bne.n	8003372 <osThreadNew+0xca>
          mem = 0;
 8003368:	2300      	movs	r3, #0
 800336a:	61bb      	str	r3, [r7, #24]
 800336c:	e001      	b.n	8003372 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800336e:	2300      	movs	r3, #0
 8003370:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8003372:	69bb      	ldr	r3, [r7, #24]
 8003374:	2b01      	cmp	r3, #1
 8003376:	d110      	bne.n	800339a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800337c:	687a      	ldr	r2, [r7, #4]
 800337e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003380:	9202      	str	r2, [sp, #8]
 8003382:	9301      	str	r3, [sp, #4]
 8003384:	69fb      	ldr	r3, [r7, #28]
 8003386:	9300      	str	r3, [sp, #0]
 8003388:	68bb      	ldr	r3, [r7, #8]
 800338a:	6a3a      	ldr	r2, [r7, #32]
 800338c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800338e:	68f8      	ldr	r0, [r7, #12]
 8003390:	f000 fe38 	bl	8004004 <xTaskCreateStatic>
 8003394:	4603      	mov	r3, r0
 8003396:	613b      	str	r3, [r7, #16]
 8003398:	e013      	b.n	80033c2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800339a:	69bb      	ldr	r3, [r7, #24]
 800339c:	2b00      	cmp	r3, #0
 800339e:	d110      	bne.n	80033c2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80033a0:	6a3b      	ldr	r3, [r7, #32]
 80033a2:	b29a      	uxth	r2, r3
 80033a4:	f107 0310 	add.w	r3, r7, #16
 80033a8:	9301      	str	r3, [sp, #4]
 80033aa:	69fb      	ldr	r3, [r7, #28]
 80033ac:	9300      	str	r3, [sp, #0]
 80033ae:	68bb      	ldr	r3, [r7, #8]
 80033b0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80033b2:	68f8      	ldr	r0, [r7, #12]
 80033b4:	f000 fe83 	bl	80040be <xTaskCreate>
 80033b8:	4603      	mov	r3, r0
 80033ba:	2b01      	cmp	r3, #1
 80033bc:	d001      	beq.n	80033c2 <osThreadNew+0x11a>
            hTask = NULL;
 80033be:	2300      	movs	r3, #0
 80033c0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80033c2:	693b      	ldr	r3, [r7, #16]
}
 80033c4:	4618      	mov	r0, r3
 80033c6:	3728      	adds	r7, #40	; 0x28
 80033c8:	46bd      	mov	sp, r7
 80033ca:	bd80      	pop	{r7, pc}

080033cc <osThreadTerminate>:
  vTaskDelete (NULL);
#endif
  for (;;);
}

osStatus_t osThreadTerminate (osThreadId_t thread_id) {
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b086      	sub	sp, #24
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80033d8:	f3ef 8305 	mrs	r3, IPSR
 80033dc:	60bb      	str	r3, [r7, #8]
  return(result);
 80033de:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;
#ifndef USE_FreeRTOS_HEAP_1
  eTaskState tstate;

  if (IS_IRQ()) {
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d003      	beq.n	80033ec <osThreadTerminate+0x20>
    stat = osErrorISR;
 80033e4:	f06f 0305 	mvn.w	r3, #5
 80033e8:	617b      	str	r3, [r7, #20]
 80033ea:	e017      	b.n	800341c <osThreadTerminate+0x50>
  }
  else if (hTask == NULL) {
 80033ec:	693b      	ldr	r3, [r7, #16]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d103      	bne.n	80033fa <osThreadTerminate+0x2e>
    stat = osErrorParameter;
 80033f2:	f06f 0303 	mvn.w	r3, #3
 80033f6:	617b      	str	r3, [r7, #20]
 80033f8:	e010      	b.n	800341c <osThreadTerminate+0x50>
  }
  else {
    tstate = eTaskGetState (hTask);
 80033fa:	6938      	ldr	r0, [r7, #16]
 80033fc:	f001 f860 	bl	80044c0 <eTaskGetState>
 8003400:	4603      	mov	r3, r0
 8003402:	73fb      	strb	r3, [r7, #15]

    if (tstate != eDeleted) {
 8003404:	7bfb      	ldrb	r3, [r7, #15]
 8003406:	2b04      	cmp	r3, #4
 8003408:	d005      	beq.n	8003416 <osThreadTerminate+0x4a>
      stat = osOK;
 800340a:	2300      	movs	r3, #0
 800340c:	617b      	str	r3, [r7, #20]
      vTaskDelete (hTask);
 800340e:	6938      	ldr	r0, [r7, #16]
 8003410:	f000 ffb0 	bl	8004374 <vTaskDelete>
 8003414:	e002      	b.n	800341c <osThreadTerminate+0x50>
    } else {
      stat = osErrorResource;
 8003416:	f06f 0302 	mvn.w	r3, #2
 800341a:	617b      	str	r3, [r7, #20]
  }
#else
  stat = osError;
#endif

  return (stat);
 800341c:	697b      	ldr	r3, [r7, #20]
}
 800341e:	4618      	mov	r0, r3
 8003420:	3718      	adds	r7, #24
 8003422:	46bd      	mov	sp, r7
 8003424:	bd80      	pop	{r7, pc}

08003426 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8003426:	b580      	push	{r7, lr}
 8003428:	b084      	sub	sp, #16
 800342a:	af00      	add	r7, sp, #0
 800342c:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800342e:	f3ef 8305 	mrs	r3, IPSR
 8003432:	60bb      	str	r3, [r7, #8]
  return(result);
 8003434:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003436:	2b00      	cmp	r3, #0
 8003438:	d003      	beq.n	8003442 <osDelay+0x1c>
    stat = osErrorISR;
 800343a:	f06f 0305 	mvn.w	r3, #5
 800343e:	60fb      	str	r3, [r7, #12]
 8003440:	e007      	b.n	8003452 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8003442:	2300      	movs	r3, #0
 8003444:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2b00      	cmp	r3, #0
 800344a:	d002      	beq.n	8003452 <osDelay+0x2c>
      vTaskDelay(ticks);
 800344c:	6878      	ldr	r0, [r7, #4]
 800344e:	f001 f803 	bl	8004458 <vTaskDelay>
    }
  }

  return (stat);
 8003452:	68fb      	ldr	r3, [r7, #12]
}
 8003454:	4618      	mov	r0, r3
 8003456:	3710      	adds	r7, #16
 8003458:	46bd      	mov	sp, r7
 800345a:	bd80      	pop	{r7, pc}

0800345c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800345c:	b480      	push	{r7}
 800345e:	b085      	sub	sp, #20
 8003460:	af00      	add	r7, sp, #0
 8003462:	60f8      	str	r0, [r7, #12]
 8003464:	60b9      	str	r1, [r7, #8]
 8003466:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	4a07      	ldr	r2, [pc, #28]	; (8003488 <vApplicationGetIdleTaskMemory+0x2c>)
 800346c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800346e:	68bb      	ldr	r3, [r7, #8]
 8003470:	4a06      	ldr	r2, [pc, #24]	; (800348c <vApplicationGetIdleTaskMemory+0x30>)
 8003472:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2280      	movs	r2, #128	; 0x80
 8003478:	601a      	str	r2, [r3, #0]
}
 800347a:	bf00      	nop
 800347c:	3714      	adds	r7, #20
 800347e:	46bd      	mov	sp, r7
 8003480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003484:	4770      	bx	lr
 8003486:	bf00      	nop
 8003488:	200002bc 	.word	0x200002bc
 800348c:	20000378 	.word	0x20000378

08003490 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003490:	b480      	push	{r7}
 8003492:	b085      	sub	sp, #20
 8003494:	af00      	add	r7, sp, #0
 8003496:	60f8      	str	r0, [r7, #12]
 8003498:	60b9      	str	r1, [r7, #8]
 800349a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	4a07      	ldr	r2, [pc, #28]	; (80034bc <vApplicationGetTimerTaskMemory+0x2c>)
 80034a0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80034a2:	68bb      	ldr	r3, [r7, #8]
 80034a4:	4a06      	ldr	r2, [pc, #24]	; (80034c0 <vApplicationGetTimerTaskMemory+0x30>)
 80034a6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80034ae:	601a      	str	r2, [r3, #0]
}
 80034b0:	bf00      	nop
 80034b2:	3714      	adds	r7, #20
 80034b4:	46bd      	mov	sp, r7
 80034b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ba:	4770      	bx	lr
 80034bc:	20000578 	.word	0x20000578
 80034c0:	20000634 	.word	0x20000634

080034c4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80034c4:	b480      	push	{r7}
 80034c6:	b083      	sub	sp, #12
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	f103 0208 	add.w	r2, r3, #8
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	f04f 32ff 	mov.w	r2, #4294967295
 80034dc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	f103 0208 	add.w	r2, r3, #8
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	f103 0208 	add.w	r2, r3, #8
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2200      	movs	r2, #0
 80034f6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80034f8:	bf00      	nop
 80034fa:	370c      	adds	r7, #12
 80034fc:	46bd      	mov	sp, r7
 80034fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003502:	4770      	bx	lr

08003504 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003504:	b480      	push	{r7}
 8003506:	b083      	sub	sp, #12
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2200      	movs	r2, #0
 8003510:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003512:	bf00      	nop
 8003514:	370c      	adds	r7, #12
 8003516:	46bd      	mov	sp, r7
 8003518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351c:	4770      	bx	lr

0800351e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800351e:	b480      	push	{r7}
 8003520:	b085      	sub	sp, #20
 8003522:	af00      	add	r7, sp, #0
 8003524:	6078      	str	r0, [r7, #4]
 8003526:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	68fa      	ldr	r2, [r7, #12]
 8003532:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	689a      	ldr	r2, [r3, #8]
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	689b      	ldr	r3, [r3, #8]
 8003540:	683a      	ldr	r2, [r7, #0]
 8003542:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	683a      	ldr	r2, [r7, #0]
 8003548:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	687a      	ldr	r2, [r7, #4]
 800354e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	1c5a      	adds	r2, r3, #1
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	601a      	str	r2, [r3, #0]
}
 800355a:	bf00      	nop
 800355c:	3714      	adds	r7, #20
 800355e:	46bd      	mov	sp, r7
 8003560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003564:	4770      	bx	lr

08003566 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003566:	b480      	push	{r7}
 8003568:	b085      	sub	sp, #20
 800356a:	af00      	add	r7, sp, #0
 800356c:	6078      	str	r0, [r7, #4]
 800356e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003576:	68bb      	ldr	r3, [r7, #8]
 8003578:	f1b3 3fff 	cmp.w	r3, #4294967295
 800357c:	d103      	bne.n	8003586 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	691b      	ldr	r3, [r3, #16]
 8003582:	60fb      	str	r3, [r7, #12]
 8003584:	e00c      	b.n	80035a0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	3308      	adds	r3, #8
 800358a:	60fb      	str	r3, [r7, #12]
 800358c:	e002      	b.n	8003594 <vListInsert+0x2e>
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	685b      	ldr	r3, [r3, #4]
 8003592:	60fb      	str	r3, [r7, #12]
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	68ba      	ldr	r2, [r7, #8]
 800359c:	429a      	cmp	r2, r3
 800359e:	d2f6      	bcs.n	800358e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	685a      	ldr	r2, [r3, #4]
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	683a      	ldr	r2, [r7, #0]
 80035ae:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	68fa      	ldr	r2, [r7, #12]
 80035b4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	683a      	ldr	r2, [r7, #0]
 80035ba:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	687a      	ldr	r2, [r7, #4]
 80035c0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	1c5a      	adds	r2, r3, #1
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	601a      	str	r2, [r3, #0]
}
 80035cc:	bf00      	nop
 80035ce:	3714      	adds	r7, #20
 80035d0:	46bd      	mov	sp, r7
 80035d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d6:	4770      	bx	lr

080035d8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80035d8:	b480      	push	{r7}
 80035da:	b085      	sub	sp, #20
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	691b      	ldr	r3, [r3, #16]
 80035e4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	687a      	ldr	r2, [r7, #4]
 80035ec:	6892      	ldr	r2, [r2, #8]
 80035ee:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	689b      	ldr	r3, [r3, #8]
 80035f4:	687a      	ldr	r2, [r7, #4]
 80035f6:	6852      	ldr	r2, [r2, #4]
 80035f8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	685b      	ldr	r3, [r3, #4]
 80035fe:	687a      	ldr	r2, [r7, #4]
 8003600:	429a      	cmp	r2, r3
 8003602:	d103      	bne.n	800360c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	689a      	ldr	r2, [r3, #8]
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2200      	movs	r2, #0
 8003610:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	1e5a      	subs	r2, r3, #1
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
}
 8003620:	4618      	mov	r0, r3
 8003622:	3714      	adds	r7, #20
 8003624:	46bd      	mov	sp, r7
 8003626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362a:	4770      	bx	lr

0800362c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b084      	sub	sp, #16
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
 8003634:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d10a      	bne.n	8003656 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003640:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003644:	f383 8811 	msr	BASEPRI, r3
 8003648:	f3bf 8f6f 	isb	sy
 800364c:	f3bf 8f4f 	dsb	sy
 8003650:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003652:	bf00      	nop
 8003654:	e7fe      	b.n	8003654 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003656:	f002 f94d 	bl	80058f4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681a      	ldr	r2, [r3, #0]
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003662:	68f9      	ldr	r1, [r7, #12]
 8003664:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003666:	fb01 f303 	mul.w	r3, r1, r3
 800366a:	441a      	add	r2, r3
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	2200      	movs	r2, #0
 8003674:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681a      	ldr	r2, [r3, #0]
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681a      	ldr	r2, [r3, #0]
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003686:	3b01      	subs	r3, #1
 8003688:	68f9      	ldr	r1, [r7, #12]
 800368a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800368c:	fb01 f303 	mul.w	r3, r1, r3
 8003690:	441a      	add	r2, r3
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	22ff      	movs	r2, #255	; 0xff
 800369a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	22ff      	movs	r2, #255	; 0xff
 80036a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d114      	bne.n	80036d6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	691b      	ldr	r3, [r3, #16]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d01a      	beq.n	80036ea <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	3310      	adds	r3, #16
 80036b8:	4618      	mov	r0, r3
 80036ba:	f001 fa01 	bl	8004ac0 <xTaskRemoveFromEventList>
 80036be:	4603      	mov	r3, r0
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d012      	beq.n	80036ea <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80036c4:	4b0c      	ldr	r3, [pc, #48]	; (80036f8 <xQueueGenericReset+0xcc>)
 80036c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80036ca:	601a      	str	r2, [r3, #0]
 80036cc:	f3bf 8f4f 	dsb	sy
 80036d0:	f3bf 8f6f 	isb	sy
 80036d4:	e009      	b.n	80036ea <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	3310      	adds	r3, #16
 80036da:	4618      	mov	r0, r3
 80036dc:	f7ff fef2 	bl	80034c4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	3324      	adds	r3, #36	; 0x24
 80036e4:	4618      	mov	r0, r3
 80036e6:	f7ff feed 	bl	80034c4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80036ea:	f002 f933 	bl	8005954 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80036ee:	2301      	movs	r3, #1
}
 80036f0:	4618      	mov	r0, r3
 80036f2:	3710      	adds	r7, #16
 80036f4:	46bd      	mov	sp, r7
 80036f6:	bd80      	pop	{r7, pc}
 80036f8:	e000ed04 	.word	0xe000ed04

080036fc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b08e      	sub	sp, #56	; 0x38
 8003700:	af02      	add	r7, sp, #8
 8003702:	60f8      	str	r0, [r7, #12]
 8003704:	60b9      	str	r1, [r7, #8]
 8003706:	607a      	str	r2, [r7, #4]
 8003708:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	2b00      	cmp	r3, #0
 800370e:	d10a      	bne.n	8003726 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8003710:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003714:	f383 8811 	msr	BASEPRI, r3
 8003718:	f3bf 8f6f 	isb	sy
 800371c:	f3bf 8f4f 	dsb	sy
 8003720:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003722:	bf00      	nop
 8003724:	e7fe      	b.n	8003724 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	2b00      	cmp	r3, #0
 800372a:	d10a      	bne.n	8003742 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800372c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003730:	f383 8811 	msr	BASEPRI, r3
 8003734:	f3bf 8f6f 	isb	sy
 8003738:	f3bf 8f4f 	dsb	sy
 800373c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800373e:	bf00      	nop
 8003740:	e7fe      	b.n	8003740 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2b00      	cmp	r3, #0
 8003746:	d002      	beq.n	800374e <xQueueGenericCreateStatic+0x52>
 8003748:	68bb      	ldr	r3, [r7, #8]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d001      	beq.n	8003752 <xQueueGenericCreateStatic+0x56>
 800374e:	2301      	movs	r3, #1
 8003750:	e000      	b.n	8003754 <xQueueGenericCreateStatic+0x58>
 8003752:	2300      	movs	r3, #0
 8003754:	2b00      	cmp	r3, #0
 8003756:	d10a      	bne.n	800376e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8003758:	f04f 0350 	mov.w	r3, #80	; 0x50
 800375c:	f383 8811 	msr	BASEPRI, r3
 8003760:	f3bf 8f6f 	isb	sy
 8003764:	f3bf 8f4f 	dsb	sy
 8003768:	623b      	str	r3, [r7, #32]
}
 800376a:	bf00      	nop
 800376c:	e7fe      	b.n	800376c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d102      	bne.n	800377a <xQueueGenericCreateStatic+0x7e>
 8003774:	68bb      	ldr	r3, [r7, #8]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d101      	bne.n	800377e <xQueueGenericCreateStatic+0x82>
 800377a:	2301      	movs	r3, #1
 800377c:	e000      	b.n	8003780 <xQueueGenericCreateStatic+0x84>
 800377e:	2300      	movs	r3, #0
 8003780:	2b00      	cmp	r3, #0
 8003782:	d10a      	bne.n	800379a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8003784:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003788:	f383 8811 	msr	BASEPRI, r3
 800378c:	f3bf 8f6f 	isb	sy
 8003790:	f3bf 8f4f 	dsb	sy
 8003794:	61fb      	str	r3, [r7, #28]
}
 8003796:	bf00      	nop
 8003798:	e7fe      	b.n	8003798 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800379a:	2350      	movs	r3, #80	; 0x50
 800379c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800379e:	697b      	ldr	r3, [r7, #20]
 80037a0:	2b50      	cmp	r3, #80	; 0x50
 80037a2:	d00a      	beq.n	80037ba <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80037a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037a8:	f383 8811 	msr	BASEPRI, r3
 80037ac:	f3bf 8f6f 	isb	sy
 80037b0:	f3bf 8f4f 	dsb	sy
 80037b4:	61bb      	str	r3, [r7, #24]
}
 80037b6:	bf00      	nop
 80037b8:	e7fe      	b.n	80037b8 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80037ba:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80037c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d00d      	beq.n	80037e2 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80037c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037c8:	2201      	movs	r2, #1
 80037ca:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80037ce:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80037d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037d4:	9300      	str	r3, [sp, #0]
 80037d6:	4613      	mov	r3, r2
 80037d8:	687a      	ldr	r2, [r7, #4]
 80037da:	68b9      	ldr	r1, [r7, #8]
 80037dc:	68f8      	ldr	r0, [r7, #12]
 80037de:	f000 f805 	bl	80037ec <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80037e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80037e4:	4618      	mov	r0, r3
 80037e6:	3730      	adds	r7, #48	; 0x30
 80037e8:	46bd      	mov	sp, r7
 80037ea:	bd80      	pop	{r7, pc}

080037ec <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b084      	sub	sp, #16
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	60f8      	str	r0, [r7, #12]
 80037f4:	60b9      	str	r1, [r7, #8]
 80037f6:	607a      	str	r2, [r7, #4]
 80037f8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80037fa:	68bb      	ldr	r3, [r7, #8]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d103      	bne.n	8003808 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003800:	69bb      	ldr	r3, [r7, #24]
 8003802:	69ba      	ldr	r2, [r7, #24]
 8003804:	601a      	str	r2, [r3, #0]
 8003806:	e002      	b.n	800380e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003808:	69bb      	ldr	r3, [r7, #24]
 800380a:	687a      	ldr	r2, [r7, #4]
 800380c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800380e:	69bb      	ldr	r3, [r7, #24]
 8003810:	68fa      	ldr	r2, [r7, #12]
 8003812:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003814:	69bb      	ldr	r3, [r7, #24]
 8003816:	68ba      	ldr	r2, [r7, #8]
 8003818:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800381a:	2101      	movs	r1, #1
 800381c:	69b8      	ldr	r0, [r7, #24]
 800381e:	f7ff ff05 	bl	800362c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003822:	69bb      	ldr	r3, [r7, #24]
 8003824:	78fa      	ldrb	r2, [r7, #3]
 8003826:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800382a:	bf00      	nop
 800382c:	3710      	adds	r7, #16
 800382e:	46bd      	mov	sp, r7
 8003830:	bd80      	pop	{r7, pc}
	...

08003834 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b08e      	sub	sp, #56	; 0x38
 8003838:	af00      	add	r7, sp, #0
 800383a:	60f8      	str	r0, [r7, #12]
 800383c:	60b9      	str	r1, [r7, #8]
 800383e:	607a      	str	r2, [r7, #4]
 8003840:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003842:	2300      	movs	r3, #0
 8003844:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800384a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800384c:	2b00      	cmp	r3, #0
 800384e:	d10a      	bne.n	8003866 <xQueueGenericSend+0x32>
	__asm volatile
 8003850:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003854:	f383 8811 	msr	BASEPRI, r3
 8003858:	f3bf 8f6f 	isb	sy
 800385c:	f3bf 8f4f 	dsb	sy
 8003860:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003862:	bf00      	nop
 8003864:	e7fe      	b.n	8003864 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003866:	68bb      	ldr	r3, [r7, #8]
 8003868:	2b00      	cmp	r3, #0
 800386a:	d103      	bne.n	8003874 <xQueueGenericSend+0x40>
 800386c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800386e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003870:	2b00      	cmp	r3, #0
 8003872:	d101      	bne.n	8003878 <xQueueGenericSend+0x44>
 8003874:	2301      	movs	r3, #1
 8003876:	e000      	b.n	800387a <xQueueGenericSend+0x46>
 8003878:	2300      	movs	r3, #0
 800387a:	2b00      	cmp	r3, #0
 800387c:	d10a      	bne.n	8003894 <xQueueGenericSend+0x60>
	__asm volatile
 800387e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003882:	f383 8811 	msr	BASEPRI, r3
 8003886:	f3bf 8f6f 	isb	sy
 800388a:	f3bf 8f4f 	dsb	sy
 800388e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003890:	bf00      	nop
 8003892:	e7fe      	b.n	8003892 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	2b02      	cmp	r3, #2
 8003898:	d103      	bne.n	80038a2 <xQueueGenericSend+0x6e>
 800389a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800389c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800389e:	2b01      	cmp	r3, #1
 80038a0:	d101      	bne.n	80038a6 <xQueueGenericSend+0x72>
 80038a2:	2301      	movs	r3, #1
 80038a4:	e000      	b.n	80038a8 <xQueueGenericSend+0x74>
 80038a6:	2300      	movs	r3, #0
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d10a      	bne.n	80038c2 <xQueueGenericSend+0x8e>
	__asm volatile
 80038ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038b0:	f383 8811 	msr	BASEPRI, r3
 80038b4:	f3bf 8f6f 	isb	sy
 80038b8:	f3bf 8f4f 	dsb	sy
 80038bc:	623b      	str	r3, [r7, #32]
}
 80038be:	bf00      	nop
 80038c0:	e7fe      	b.n	80038c0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80038c2:	f001 fabf 	bl	8004e44 <xTaskGetSchedulerState>
 80038c6:	4603      	mov	r3, r0
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d102      	bne.n	80038d2 <xQueueGenericSend+0x9e>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d101      	bne.n	80038d6 <xQueueGenericSend+0xa2>
 80038d2:	2301      	movs	r3, #1
 80038d4:	e000      	b.n	80038d8 <xQueueGenericSend+0xa4>
 80038d6:	2300      	movs	r3, #0
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d10a      	bne.n	80038f2 <xQueueGenericSend+0xbe>
	__asm volatile
 80038dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038e0:	f383 8811 	msr	BASEPRI, r3
 80038e4:	f3bf 8f6f 	isb	sy
 80038e8:	f3bf 8f4f 	dsb	sy
 80038ec:	61fb      	str	r3, [r7, #28]
}
 80038ee:	bf00      	nop
 80038f0:	e7fe      	b.n	80038f0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80038f2:	f001 ffff 	bl	80058f4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80038f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80038fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038fe:	429a      	cmp	r2, r3
 8003900:	d302      	bcc.n	8003908 <xQueueGenericSend+0xd4>
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	2b02      	cmp	r3, #2
 8003906:	d129      	bne.n	800395c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003908:	683a      	ldr	r2, [r7, #0]
 800390a:	68b9      	ldr	r1, [r7, #8]
 800390c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800390e:	f000 fa0b 	bl	8003d28 <prvCopyDataToQueue>
 8003912:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003914:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003918:	2b00      	cmp	r3, #0
 800391a:	d010      	beq.n	800393e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800391c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800391e:	3324      	adds	r3, #36	; 0x24
 8003920:	4618      	mov	r0, r3
 8003922:	f001 f8cd 	bl	8004ac0 <xTaskRemoveFromEventList>
 8003926:	4603      	mov	r3, r0
 8003928:	2b00      	cmp	r3, #0
 800392a:	d013      	beq.n	8003954 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800392c:	4b3f      	ldr	r3, [pc, #252]	; (8003a2c <xQueueGenericSend+0x1f8>)
 800392e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003932:	601a      	str	r2, [r3, #0]
 8003934:	f3bf 8f4f 	dsb	sy
 8003938:	f3bf 8f6f 	isb	sy
 800393c:	e00a      	b.n	8003954 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800393e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003940:	2b00      	cmp	r3, #0
 8003942:	d007      	beq.n	8003954 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003944:	4b39      	ldr	r3, [pc, #228]	; (8003a2c <xQueueGenericSend+0x1f8>)
 8003946:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800394a:	601a      	str	r2, [r3, #0]
 800394c:	f3bf 8f4f 	dsb	sy
 8003950:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003954:	f001 fffe 	bl	8005954 <vPortExitCritical>
				return pdPASS;
 8003958:	2301      	movs	r3, #1
 800395a:	e063      	b.n	8003a24 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2b00      	cmp	r3, #0
 8003960:	d103      	bne.n	800396a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003962:	f001 fff7 	bl	8005954 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003966:	2300      	movs	r3, #0
 8003968:	e05c      	b.n	8003a24 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800396a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800396c:	2b00      	cmp	r3, #0
 800396e:	d106      	bne.n	800397e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003970:	f107 0314 	add.w	r3, r7, #20
 8003974:	4618      	mov	r0, r3
 8003976:	f001 f907 	bl	8004b88 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800397a:	2301      	movs	r3, #1
 800397c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800397e:	f001 ffe9 	bl	8005954 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003982:	f000 fe73 	bl	800466c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003986:	f001 ffb5 	bl	80058f4 <vPortEnterCritical>
 800398a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800398c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003990:	b25b      	sxtb	r3, r3
 8003992:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003996:	d103      	bne.n	80039a0 <xQueueGenericSend+0x16c>
 8003998:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800399a:	2200      	movs	r2, #0
 800399c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80039a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039a2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80039a6:	b25b      	sxtb	r3, r3
 80039a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039ac:	d103      	bne.n	80039b6 <xQueueGenericSend+0x182>
 80039ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039b0:	2200      	movs	r2, #0
 80039b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80039b6:	f001 ffcd 	bl	8005954 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80039ba:	1d3a      	adds	r2, r7, #4
 80039bc:	f107 0314 	add.w	r3, r7, #20
 80039c0:	4611      	mov	r1, r2
 80039c2:	4618      	mov	r0, r3
 80039c4:	f001 f8f6 	bl	8004bb4 <xTaskCheckForTimeOut>
 80039c8:	4603      	mov	r3, r0
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d124      	bne.n	8003a18 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80039ce:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80039d0:	f000 faa2 	bl	8003f18 <prvIsQueueFull>
 80039d4:	4603      	mov	r3, r0
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d018      	beq.n	8003a0c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80039da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039dc:	3310      	adds	r3, #16
 80039de:	687a      	ldr	r2, [r7, #4]
 80039e0:	4611      	mov	r1, r2
 80039e2:	4618      	mov	r0, r3
 80039e4:	f001 f81c 	bl	8004a20 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80039e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80039ea:	f000 fa2d 	bl	8003e48 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80039ee:	f000 fe4b 	bl	8004688 <xTaskResumeAll>
 80039f2:	4603      	mov	r3, r0
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	f47f af7c 	bne.w	80038f2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80039fa:	4b0c      	ldr	r3, [pc, #48]	; (8003a2c <xQueueGenericSend+0x1f8>)
 80039fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a00:	601a      	str	r2, [r3, #0]
 8003a02:	f3bf 8f4f 	dsb	sy
 8003a06:	f3bf 8f6f 	isb	sy
 8003a0a:	e772      	b.n	80038f2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003a0c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003a0e:	f000 fa1b 	bl	8003e48 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003a12:	f000 fe39 	bl	8004688 <xTaskResumeAll>
 8003a16:	e76c      	b.n	80038f2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003a18:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003a1a:	f000 fa15 	bl	8003e48 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003a1e:	f000 fe33 	bl	8004688 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003a22:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003a24:	4618      	mov	r0, r3
 8003a26:	3738      	adds	r7, #56	; 0x38
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	bd80      	pop	{r7, pc}
 8003a2c:	e000ed04 	.word	0xe000ed04

08003a30 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b090      	sub	sp, #64	; 0x40
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	60f8      	str	r0, [r7, #12]
 8003a38:	60b9      	str	r1, [r7, #8]
 8003a3a:	607a      	str	r2, [r7, #4]
 8003a3c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8003a42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d10a      	bne.n	8003a5e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8003a48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a4c:	f383 8811 	msr	BASEPRI, r3
 8003a50:	f3bf 8f6f 	isb	sy
 8003a54:	f3bf 8f4f 	dsb	sy
 8003a58:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003a5a:	bf00      	nop
 8003a5c:	e7fe      	b.n	8003a5c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003a5e:	68bb      	ldr	r3, [r7, #8]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d103      	bne.n	8003a6c <xQueueGenericSendFromISR+0x3c>
 8003a64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d101      	bne.n	8003a70 <xQueueGenericSendFromISR+0x40>
 8003a6c:	2301      	movs	r3, #1
 8003a6e:	e000      	b.n	8003a72 <xQueueGenericSendFromISR+0x42>
 8003a70:	2300      	movs	r3, #0
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d10a      	bne.n	8003a8c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8003a76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a7a:	f383 8811 	msr	BASEPRI, r3
 8003a7e:	f3bf 8f6f 	isb	sy
 8003a82:	f3bf 8f4f 	dsb	sy
 8003a86:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003a88:	bf00      	nop
 8003a8a:	e7fe      	b.n	8003a8a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	2b02      	cmp	r3, #2
 8003a90:	d103      	bne.n	8003a9a <xQueueGenericSendFromISR+0x6a>
 8003a92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a96:	2b01      	cmp	r3, #1
 8003a98:	d101      	bne.n	8003a9e <xQueueGenericSendFromISR+0x6e>
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	e000      	b.n	8003aa0 <xQueueGenericSendFromISR+0x70>
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d10a      	bne.n	8003aba <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8003aa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003aa8:	f383 8811 	msr	BASEPRI, r3
 8003aac:	f3bf 8f6f 	isb	sy
 8003ab0:	f3bf 8f4f 	dsb	sy
 8003ab4:	623b      	str	r3, [r7, #32]
}
 8003ab6:	bf00      	nop
 8003ab8:	e7fe      	b.n	8003ab8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003aba:	f001 fffd 	bl	8005ab8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003abe:	f3ef 8211 	mrs	r2, BASEPRI
 8003ac2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ac6:	f383 8811 	msr	BASEPRI, r3
 8003aca:	f3bf 8f6f 	isb	sy
 8003ace:	f3bf 8f4f 	dsb	sy
 8003ad2:	61fa      	str	r2, [r7, #28]
 8003ad4:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003ad6:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003ad8:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003ada:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003adc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ade:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ae0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ae2:	429a      	cmp	r2, r3
 8003ae4:	d302      	bcc.n	8003aec <xQueueGenericSendFromISR+0xbc>
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	2b02      	cmp	r3, #2
 8003aea:	d12f      	bne.n	8003b4c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003aec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003aee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003af2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003af6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003af8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003afa:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003afc:	683a      	ldr	r2, [r7, #0]
 8003afe:	68b9      	ldr	r1, [r7, #8]
 8003b00:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003b02:	f000 f911 	bl	8003d28 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003b06:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8003b0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b0e:	d112      	bne.n	8003b36 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003b10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d016      	beq.n	8003b46 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003b18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b1a:	3324      	adds	r3, #36	; 0x24
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	f000 ffcf 	bl	8004ac0 <xTaskRemoveFromEventList>
 8003b22:	4603      	mov	r3, r0
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d00e      	beq.n	8003b46 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d00b      	beq.n	8003b46 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2201      	movs	r2, #1
 8003b32:	601a      	str	r2, [r3, #0]
 8003b34:	e007      	b.n	8003b46 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003b36:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003b3a:	3301      	adds	r3, #1
 8003b3c:	b2db      	uxtb	r3, r3
 8003b3e:	b25a      	sxtb	r2, r3
 8003b40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b42:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003b46:	2301      	movs	r3, #1
 8003b48:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8003b4a:	e001      	b.n	8003b50 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003b50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b52:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003b54:	697b      	ldr	r3, [r7, #20]
 8003b56:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003b5a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003b5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8003b5e:	4618      	mov	r0, r3
 8003b60:	3740      	adds	r7, #64	; 0x40
 8003b62:	46bd      	mov	sp, r7
 8003b64:	bd80      	pop	{r7, pc}
	...

08003b68 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b08c      	sub	sp, #48	; 0x30
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	60f8      	str	r0, [r7, #12]
 8003b70:	60b9      	str	r1, [r7, #8]
 8003b72:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003b74:	2300      	movs	r3, #0
 8003b76:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003b7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d10a      	bne.n	8003b98 <xQueueReceive+0x30>
	__asm volatile
 8003b82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b86:	f383 8811 	msr	BASEPRI, r3
 8003b8a:	f3bf 8f6f 	isb	sy
 8003b8e:	f3bf 8f4f 	dsb	sy
 8003b92:	623b      	str	r3, [r7, #32]
}
 8003b94:	bf00      	nop
 8003b96:	e7fe      	b.n	8003b96 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003b98:	68bb      	ldr	r3, [r7, #8]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d103      	bne.n	8003ba6 <xQueueReceive+0x3e>
 8003b9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d101      	bne.n	8003baa <xQueueReceive+0x42>
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	e000      	b.n	8003bac <xQueueReceive+0x44>
 8003baa:	2300      	movs	r3, #0
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d10a      	bne.n	8003bc6 <xQueueReceive+0x5e>
	__asm volatile
 8003bb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bb4:	f383 8811 	msr	BASEPRI, r3
 8003bb8:	f3bf 8f6f 	isb	sy
 8003bbc:	f3bf 8f4f 	dsb	sy
 8003bc0:	61fb      	str	r3, [r7, #28]
}
 8003bc2:	bf00      	nop
 8003bc4:	e7fe      	b.n	8003bc4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003bc6:	f001 f93d 	bl	8004e44 <xTaskGetSchedulerState>
 8003bca:	4603      	mov	r3, r0
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d102      	bne.n	8003bd6 <xQueueReceive+0x6e>
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d101      	bne.n	8003bda <xQueueReceive+0x72>
 8003bd6:	2301      	movs	r3, #1
 8003bd8:	e000      	b.n	8003bdc <xQueueReceive+0x74>
 8003bda:	2300      	movs	r3, #0
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d10a      	bne.n	8003bf6 <xQueueReceive+0x8e>
	__asm volatile
 8003be0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003be4:	f383 8811 	msr	BASEPRI, r3
 8003be8:	f3bf 8f6f 	isb	sy
 8003bec:	f3bf 8f4f 	dsb	sy
 8003bf0:	61bb      	str	r3, [r7, #24]
}
 8003bf2:	bf00      	nop
 8003bf4:	e7fe      	b.n	8003bf4 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003bf6:	f001 fe7d 	bl	80058f4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003bfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bfe:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d01f      	beq.n	8003c46 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003c06:	68b9      	ldr	r1, [r7, #8]
 8003c08:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003c0a:	f000 f8f7 	bl	8003dfc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c10:	1e5a      	subs	r2, r3, #1
 8003c12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c14:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003c16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c18:	691b      	ldr	r3, [r3, #16]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d00f      	beq.n	8003c3e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003c1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c20:	3310      	adds	r3, #16
 8003c22:	4618      	mov	r0, r3
 8003c24:	f000 ff4c 	bl	8004ac0 <xTaskRemoveFromEventList>
 8003c28:	4603      	mov	r3, r0
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d007      	beq.n	8003c3e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003c2e:	4b3d      	ldr	r3, [pc, #244]	; (8003d24 <xQueueReceive+0x1bc>)
 8003c30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c34:	601a      	str	r2, [r3, #0]
 8003c36:	f3bf 8f4f 	dsb	sy
 8003c3a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003c3e:	f001 fe89 	bl	8005954 <vPortExitCritical>
				return pdPASS;
 8003c42:	2301      	movs	r3, #1
 8003c44:	e069      	b.n	8003d1a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d103      	bne.n	8003c54 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003c4c:	f001 fe82 	bl	8005954 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003c50:	2300      	movs	r3, #0
 8003c52:	e062      	b.n	8003d1a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003c54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d106      	bne.n	8003c68 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003c5a:	f107 0310 	add.w	r3, r7, #16
 8003c5e:	4618      	mov	r0, r3
 8003c60:	f000 ff92 	bl	8004b88 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003c64:	2301      	movs	r3, #1
 8003c66:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003c68:	f001 fe74 	bl	8005954 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003c6c:	f000 fcfe 	bl	800466c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003c70:	f001 fe40 	bl	80058f4 <vPortEnterCritical>
 8003c74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c76:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003c7a:	b25b      	sxtb	r3, r3
 8003c7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c80:	d103      	bne.n	8003c8a <xQueueReceive+0x122>
 8003c82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c84:	2200      	movs	r2, #0
 8003c86:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c8c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003c90:	b25b      	sxtb	r3, r3
 8003c92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c96:	d103      	bne.n	8003ca0 <xQueueReceive+0x138>
 8003c98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003ca0:	f001 fe58 	bl	8005954 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003ca4:	1d3a      	adds	r2, r7, #4
 8003ca6:	f107 0310 	add.w	r3, r7, #16
 8003caa:	4611      	mov	r1, r2
 8003cac:	4618      	mov	r0, r3
 8003cae:	f000 ff81 	bl	8004bb4 <xTaskCheckForTimeOut>
 8003cb2:	4603      	mov	r3, r0
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d123      	bne.n	8003d00 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003cb8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003cba:	f000 f917 	bl	8003eec <prvIsQueueEmpty>
 8003cbe:	4603      	mov	r3, r0
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d017      	beq.n	8003cf4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003cc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cc6:	3324      	adds	r3, #36	; 0x24
 8003cc8:	687a      	ldr	r2, [r7, #4]
 8003cca:	4611      	mov	r1, r2
 8003ccc:	4618      	mov	r0, r3
 8003cce:	f000 fea7 	bl	8004a20 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003cd2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003cd4:	f000 f8b8 	bl	8003e48 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003cd8:	f000 fcd6 	bl	8004688 <xTaskResumeAll>
 8003cdc:	4603      	mov	r3, r0
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d189      	bne.n	8003bf6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8003ce2:	4b10      	ldr	r3, [pc, #64]	; (8003d24 <xQueueReceive+0x1bc>)
 8003ce4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ce8:	601a      	str	r2, [r3, #0]
 8003cea:	f3bf 8f4f 	dsb	sy
 8003cee:	f3bf 8f6f 	isb	sy
 8003cf2:	e780      	b.n	8003bf6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003cf4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003cf6:	f000 f8a7 	bl	8003e48 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003cfa:	f000 fcc5 	bl	8004688 <xTaskResumeAll>
 8003cfe:	e77a      	b.n	8003bf6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003d00:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003d02:	f000 f8a1 	bl	8003e48 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003d06:	f000 fcbf 	bl	8004688 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003d0a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003d0c:	f000 f8ee 	bl	8003eec <prvIsQueueEmpty>
 8003d10:	4603      	mov	r3, r0
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	f43f af6f 	beq.w	8003bf6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003d18:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	3730      	adds	r7, #48	; 0x30
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	bd80      	pop	{r7, pc}
 8003d22:	bf00      	nop
 8003d24:	e000ed04 	.word	0xe000ed04

08003d28 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b086      	sub	sp, #24
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	60f8      	str	r0, [r7, #12]
 8003d30:	60b9      	str	r1, [r7, #8]
 8003d32:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003d34:	2300      	movs	r3, #0
 8003d36:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d3c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d10d      	bne.n	8003d62 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d14d      	bne.n	8003dea <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	689b      	ldr	r3, [r3, #8]
 8003d52:	4618      	mov	r0, r3
 8003d54:	f001 f894 	bl	8004e80 <xTaskPriorityDisinherit>
 8003d58:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	609a      	str	r2, [r3, #8]
 8003d60:	e043      	b.n	8003dea <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d119      	bne.n	8003d9c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	6858      	ldr	r0, [r3, #4]
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d70:	461a      	mov	r2, r3
 8003d72:	68b9      	ldr	r1, [r7, #8]
 8003d74:	f002 fa78 	bl	8006268 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	685a      	ldr	r2, [r3, #4]
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d80:	441a      	add	r2, r3
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	685a      	ldr	r2, [r3, #4]
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	689b      	ldr	r3, [r3, #8]
 8003d8e:	429a      	cmp	r2, r3
 8003d90:	d32b      	bcc.n	8003dea <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681a      	ldr	r2, [r3, #0]
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	605a      	str	r2, [r3, #4]
 8003d9a:	e026      	b.n	8003dea <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	68d8      	ldr	r0, [r3, #12]
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003da4:	461a      	mov	r2, r3
 8003da6:	68b9      	ldr	r1, [r7, #8]
 8003da8:	f002 fa5e 	bl	8006268 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	68da      	ldr	r2, [r3, #12]
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003db4:	425b      	negs	r3, r3
 8003db6:	441a      	add	r2, r3
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	68da      	ldr	r2, [r3, #12]
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	429a      	cmp	r2, r3
 8003dc6:	d207      	bcs.n	8003dd8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	689a      	ldr	r2, [r3, #8]
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dd0:	425b      	negs	r3, r3
 8003dd2:	441a      	add	r2, r3
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2b02      	cmp	r3, #2
 8003ddc:	d105      	bne.n	8003dea <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003dde:	693b      	ldr	r3, [r7, #16]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d002      	beq.n	8003dea <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003de4:	693b      	ldr	r3, [r7, #16]
 8003de6:	3b01      	subs	r3, #1
 8003de8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003dea:	693b      	ldr	r3, [r7, #16]
 8003dec:	1c5a      	adds	r2, r3, #1
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003df2:	697b      	ldr	r3, [r7, #20]
}
 8003df4:	4618      	mov	r0, r3
 8003df6:	3718      	adds	r7, #24
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	bd80      	pop	{r7, pc}

08003dfc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b082      	sub	sp, #8
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
 8003e04:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d018      	beq.n	8003e40 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	68da      	ldr	r2, [r3, #12]
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e16:	441a      	add	r2, r3
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	68da      	ldr	r2, [r3, #12]
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	689b      	ldr	r3, [r3, #8]
 8003e24:	429a      	cmp	r2, r3
 8003e26:	d303      	bcc.n	8003e30 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681a      	ldr	r2, [r3, #0]
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	68d9      	ldr	r1, [r3, #12]
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e38:	461a      	mov	r2, r3
 8003e3a:	6838      	ldr	r0, [r7, #0]
 8003e3c:	f002 fa14 	bl	8006268 <memcpy>
	}
}
 8003e40:	bf00      	nop
 8003e42:	3708      	adds	r7, #8
 8003e44:	46bd      	mov	sp, r7
 8003e46:	bd80      	pop	{r7, pc}

08003e48 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b084      	sub	sp, #16
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003e50:	f001 fd50 	bl	80058f4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003e5a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003e5c:	e011      	b.n	8003e82 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d012      	beq.n	8003e8c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	3324      	adds	r3, #36	; 0x24
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	f000 fe28 	bl	8004ac0 <xTaskRemoveFromEventList>
 8003e70:	4603      	mov	r3, r0
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d001      	beq.n	8003e7a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003e76:	f000 feff 	bl	8004c78 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003e7a:	7bfb      	ldrb	r3, [r7, #15]
 8003e7c:	3b01      	subs	r3, #1
 8003e7e:	b2db      	uxtb	r3, r3
 8003e80:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003e82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	dce9      	bgt.n	8003e5e <prvUnlockQueue+0x16>
 8003e8a:	e000      	b.n	8003e8e <prvUnlockQueue+0x46>
					break;
 8003e8c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	22ff      	movs	r2, #255	; 0xff
 8003e92:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003e96:	f001 fd5d 	bl	8005954 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003e9a:	f001 fd2b 	bl	80058f4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003ea4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003ea6:	e011      	b.n	8003ecc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	691b      	ldr	r3, [r3, #16]
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d012      	beq.n	8003ed6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	3310      	adds	r3, #16
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	f000 fe03 	bl	8004ac0 <xTaskRemoveFromEventList>
 8003eba:	4603      	mov	r3, r0
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d001      	beq.n	8003ec4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003ec0:	f000 feda 	bl	8004c78 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003ec4:	7bbb      	ldrb	r3, [r7, #14]
 8003ec6:	3b01      	subs	r3, #1
 8003ec8:	b2db      	uxtb	r3, r3
 8003eca:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003ecc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	dce9      	bgt.n	8003ea8 <prvUnlockQueue+0x60>
 8003ed4:	e000      	b.n	8003ed8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003ed6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	22ff      	movs	r2, #255	; 0xff
 8003edc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003ee0:	f001 fd38 	bl	8005954 <vPortExitCritical>
}
 8003ee4:	bf00      	nop
 8003ee6:	3710      	adds	r7, #16
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	bd80      	pop	{r7, pc}

08003eec <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b084      	sub	sp, #16
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003ef4:	f001 fcfe 	bl	80058f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d102      	bne.n	8003f06 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003f00:	2301      	movs	r3, #1
 8003f02:	60fb      	str	r3, [r7, #12]
 8003f04:	e001      	b.n	8003f0a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003f06:	2300      	movs	r3, #0
 8003f08:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003f0a:	f001 fd23 	bl	8005954 <vPortExitCritical>

	return xReturn;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
}
 8003f10:	4618      	mov	r0, r3
 8003f12:	3710      	adds	r7, #16
 8003f14:	46bd      	mov	sp, r7
 8003f16:	bd80      	pop	{r7, pc}

08003f18 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b084      	sub	sp, #16
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003f20:	f001 fce8 	bl	80058f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f2c:	429a      	cmp	r2, r3
 8003f2e:	d102      	bne.n	8003f36 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003f30:	2301      	movs	r3, #1
 8003f32:	60fb      	str	r3, [r7, #12]
 8003f34:	e001      	b.n	8003f3a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003f36:	2300      	movs	r3, #0
 8003f38:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003f3a:	f001 fd0b 	bl	8005954 <vPortExitCritical>

	return xReturn;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
}
 8003f40:	4618      	mov	r0, r3
 8003f42:	3710      	adds	r7, #16
 8003f44:	46bd      	mov	sp, r7
 8003f46:	bd80      	pop	{r7, pc}

08003f48 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003f48:	b480      	push	{r7}
 8003f4a:	b085      	sub	sp, #20
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
 8003f50:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003f52:	2300      	movs	r3, #0
 8003f54:	60fb      	str	r3, [r7, #12]
 8003f56:	e014      	b.n	8003f82 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003f58:	4a0f      	ldr	r2, [pc, #60]	; (8003f98 <vQueueAddToRegistry+0x50>)
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d10b      	bne.n	8003f7c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003f64:	490c      	ldr	r1, [pc, #48]	; (8003f98 <vQueueAddToRegistry+0x50>)
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	683a      	ldr	r2, [r7, #0]
 8003f6a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003f6e:	4a0a      	ldr	r2, [pc, #40]	; (8003f98 <vQueueAddToRegistry+0x50>)
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	00db      	lsls	r3, r3, #3
 8003f74:	4413      	add	r3, r2
 8003f76:	687a      	ldr	r2, [r7, #4]
 8003f78:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003f7a:	e006      	b.n	8003f8a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	3301      	adds	r3, #1
 8003f80:	60fb      	str	r3, [r7, #12]
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	2b07      	cmp	r3, #7
 8003f86:	d9e7      	bls.n	8003f58 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003f88:	bf00      	nop
 8003f8a:	bf00      	nop
 8003f8c:	3714      	adds	r7, #20
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f94:	4770      	bx	lr
 8003f96:	bf00      	nop
 8003f98:	20004ce0 	.word	0x20004ce0

08003f9c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b086      	sub	sp, #24
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	60f8      	str	r0, [r7, #12]
 8003fa4:	60b9      	str	r1, [r7, #8]
 8003fa6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003fac:	f001 fca2 	bl	80058f4 <vPortEnterCritical>
 8003fb0:	697b      	ldr	r3, [r7, #20]
 8003fb2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003fb6:	b25b      	sxtb	r3, r3
 8003fb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fbc:	d103      	bne.n	8003fc6 <vQueueWaitForMessageRestricted+0x2a>
 8003fbe:	697b      	ldr	r3, [r7, #20]
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003fc6:	697b      	ldr	r3, [r7, #20]
 8003fc8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003fcc:	b25b      	sxtb	r3, r3
 8003fce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fd2:	d103      	bne.n	8003fdc <vQueueWaitForMessageRestricted+0x40>
 8003fd4:	697b      	ldr	r3, [r7, #20]
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003fdc:	f001 fcba 	bl	8005954 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003fe0:	697b      	ldr	r3, [r7, #20]
 8003fe2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d106      	bne.n	8003ff6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003fe8:	697b      	ldr	r3, [r7, #20]
 8003fea:	3324      	adds	r3, #36	; 0x24
 8003fec:	687a      	ldr	r2, [r7, #4]
 8003fee:	68b9      	ldr	r1, [r7, #8]
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	f000 fd39 	bl	8004a68 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003ff6:	6978      	ldr	r0, [r7, #20]
 8003ff8:	f7ff ff26 	bl	8003e48 <prvUnlockQueue>
	}
 8003ffc:	bf00      	nop
 8003ffe:	3718      	adds	r7, #24
 8004000:	46bd      	mov	sp, r7
 8004002:	bd80      	pop	{r7, pc}

08004004 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004004:	b580      	push	{r7, lr}
 8004006:	b08e      	sub	sp, #56	; 0x38
 8004008:	af04      	add	r7, sp, #16
 800400a:	60f8      	str	r0, [r7, #12]
 800400c:	60b9      	str	r1, [r7, #8]
 800400e:	607a      	str	r2, [r7, #4]
 8004010:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004012:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004014:	2b00      	cmp	r3, #0
 8004016:	d10a      	bne.n	800402e <xTaskCreateStatic+0x2a>
	__asm volatile
 8004018:	f04f 0350 	mov.w	r3, #80	; 0x50
 800401c:	f383 8811 	msr	BASEPRI, r3
 8004020:	f3bf 8f6f 	isb	sy
 8004024:	f3bf 8f4f 	dsb	sy
 8004028:	623b      	str	r3, [r7, #32]
}
 800402a:	bf00      	nop
 800402c:	e7fe      	b.n	800402c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800402e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004030:	2b00      	cmp	r3, #0
 8004032:	d10a      	bne.n	800404a <xTaskCreateStatic+0x46>
	__asm volatile
 8004034:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004038:	f383 8811 	msr	BASEPRI, r3
 800403c:	f3bf 8f6f 	isb	sy
 8004040:	f3bf 8f4f 	dsb	sy
 8004044:	61fb      	str	r3, [r7, #28]
}
 8004046:	bf00      	nop
 8004048:	e7fe      	b.n	8004048 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800404a:	23bc      	movs	r3, #188	; 0xbc
 800404c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800404e:	693b      	ldr	r3, [r7, #16]
 8004050:	2bbc      	cmp	r3, #188	; 0xbc
 8004052:	d00a      	beq.n	800406a <xTaskCreateStatic+0x66>
	__asm volatile
 8004054:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004058:	f383 8811 	msr	BASEPRI, r3
 800405c:	f3bf 8f6f 	isb	sy
 8004060:	f3bf 8f4f 	dsb	sy
 8004064:	61bb      	str	r3, [r7, #24]
}
 8004066:	bf00      	nop
 8004068:	e7fe      	b.n	8004068 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800406a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800406c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800406e:	2b00      	cmp	r3, #0
 8004070:	d01e      	beq.n	80040b0 <xTaskCreateStatic+0xac>
 8004072:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004074:	2b00      	cmp	r3, #0
 8004076:	d01b      	beq.n	80040b0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004078:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800407a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800407c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800407e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004080:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004084:	2202      	movs	r2, #2
 8004086:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800408a:	2300      	movs	r3, #0
 800408c:	9303      	str	r3, [sp, #12]
 800408e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004090:	9302      	str	r3, [sp, #8]
 8004092:	f107 0314 	add.w	r3, r7, #20
 8004096:	9301      	str	r3, [sp, #4]
 8004098:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800409a:	9300      	str	r3, [sp, #0]
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	687a      	ldr	r2, [r7, #4]
 80040a0:	68b9      	ldr	r1, [r7, #8]
 80040a2:	68f8      	ldr	r0, [r7, #12]
 80040a4:	f000 f850 	bl	8004148 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80040a8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80040aa:	f000 f8f3 	bl	8004294 <prvAddNewTaskToReadyList>
 80040ae:	e001      	b.n	80040b4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80040b0:	2300      	movs	r3, #0
 80040b2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80040b4:	697b      	ldr	r3, [r7, #20]
	}
 80040b6:	4618      	mov	r0, r3
 80040b8:	3728      	adds	r7, #40	; 0x28
 80040ba:	46bd      	mov	sp, r7
 80040bc:	bd80      	pop	{r7, pc}

080040be <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80040be:	b580      	push	{r7, lr}
 80040c0:	b08c      	sub	sp, #48	; 0x30
 80040c2:	af04      	add	r7, sp, #16
 80040c4:	60f8      	str	r0, [r7, #12]
 80040c6:	60b9      	str	r1, [r7, #8]
 80040c8:	603b      	str	r3, [r7, #0]
 80040ca:	4613      	mov	r3, r2
 80040cc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80040ce:	88fb      	ldrh	r3, [r7, #6]
 80040d0:	009b      	lsls	r3, r3, #2
 80040d2:	4618      	mov	r0, r3
 80040d4:	f001 fd30 	bl	8005b38 <pvPortMalloc>
 80040d8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80040da:	697b      	ldr	r3, [r7, #20]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d00e      	beq.n	80040fe <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80040e0:	20bc      	movs	r0, #188	; 0xbc
 80040e2:	f001 fd29 	bl	8005b38 <pvPortMalloc>
 80040e6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80040e8:	69fb      	ldr	r3, [r7, #28]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d003      	beq.n	80040f6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80040ee:	69fb      	ldr	r3, [r7, #28]
 80040f0:	697a      	ldr	r2, [r7, #20]
 80040f2:	631a      	str	r2, [r3, #48]	; 0x30
 80040f4:	e005      	b.n	8004102 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80040f6:	6978      	ldr	r0, [r7, #20]
 80040f8:	f001 fdea 	bl	8005cd0 <vPortFree>
 80040fc:	e001      	b.n	8004102 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80040fe:	2300      	movs	r3, #0
 8004100:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004102:	69fb      	ldr	r3, [r7, #28]
 8004104:	2b00      	cmp	r3, #0
 8004106:	d017      	beq.n	8004138 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004108:	69fb      	ldr	r3, [r7, #28]
 800410a:	2200      	movs	r2, #0
 800410c:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004110:	88fa      	ldrh	r2, [r7, #6]
 8004112:	2300      	movs	r3, #0
 8004114:	9303      	str	r3, [sp, #12]
 8004116:	69fb      	ldr	r3, [r7, #28]
 8004118:	9302      	str	r3, [sp, #8]
 800411a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800411c:	9301      	str	r3, [sp, #4]
 800411e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004120:	9300      	str	r3, [sp, #0]
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	68b9      	ldr	r1, [r7, #8]
 8004126:	68f8      	ldr	r0, [r7, #12]
 8004128:	f000 f80e 	bl	8004148 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800412c:	69f8      	ldr	r0, [r7, #28]
 800412e:	f000 f8b1 	bl	8004294 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004132:	2301      	movs	r3, #1
 8004134:	61bb      	str	r3, [r7, #24]
 8004136:	e002      	b.n	800413e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004138:	f04f 33ff 	mov.w	r3, #4294967295
 800413c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800413e:	69bb      	ldr	r3, [r7, #24]
	}
 8004140:	4618      	mov	r0, r3
 8004142:	3720      	adds	r7, #32
 8004144:	46bd      	mov	sp, r7
 8004146:	bd80      	pop	{r7, pc}

08004148 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b088      	sub	sp, #32
 800414c:	af00      	add	r7, sp, #0
 800414e:	60f8      	str	r0, [r7, #12]
 8004150:	60b9      	str	r1, [r7, #8]
 8004152:	607a      	str	r2, [r7, #4]
 8004154:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004156:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004158:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	009b      	lsls	r3, r3, #2
 800415e:	461a      	mov	r2, r3
 8004160:	21a5      	movs	r1, #165	; 0xa5
 8004162:	f002 f88f 	bl	8006284 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004166:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004168:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004170:	3b01      	subs	r3, #1
 8004172:	009b      	lsls	r3, r3, #2
 8004174:	4413      	add	r3, r2
 8004176:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004178:	69bb      	ldr	r3, [r7, #24]
 800417a:	f023 0307 	bic.w	r3, r3, #7
 800417e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004180:	69bb      	ldr	r3, [r7, #24]
 8004182:	f003 0307 	and.w	r3, r3, #7
 8004186:	2b00      	cmp	r3, #0
 8004188:	d00a      	beq.n	80041a0 <prvInitialiseNewTask+0x58>
	__asm volatile
 800418a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800418e:	f383 8811 	msr	BASEPRI, r3
 8004192:	f3bf 8f6f 	isb	sy
 8004196:	f3bf 8f4f 	dsb	sy
 800419a:	617b      	str	r3, [r7, #20]
}
 800419c:	bf00      	nop
 800419e:	e7fe      	b.n	800419e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80041a0:	68bb      	ldr	r3, [r7, #8]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d01f      	beq.n	80041e6 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80041a6:	2300      	movs	r3, #0
 80041a8:	61fb      	str	r3, [r7, #28]
 80041aa:	e012      	b.n	80041d2 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80041ac:	68ba      	ldr	r2, [r7, #8]
 80041ae:	69fb      	ldr	r3, [r7, #28]
 80041b0:	4413      	add	r3, r2
 80041b2:	7819      	ldrb	r1, [r3, #0]
 80041b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80041b6:	69fb      	ldr	r3, [r7, #28]
 80041b8:	4413      	add	r3, r2
 80041ba:	3334      	adds	r3, #52	; 0x34
 80041bc:	460a      	mov	r2, r1
 80041be:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80041c0:	68ba      	ldr	r2, [r7, #8]
 80041c2:	69fb      	ldr	r3, [r7, #28]
 80041c4:	4413      	add	r3, r2
 80041c6:	781b      	ldrb	r3, [r3, #0]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d006      	beq.n	80041da <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80041cc:	69fb      	ldr	r3, [r7, #28]
 80041ce:	3301      	adds	r3, #1
 80041d0:	61fb      	str	r3, [r7, #28]
 80041d2:	69fb      	ldr	r3, [r7, #28]
 80041d4:	2b0f      	cmp	r3, #15
 80041d6:	d9e9      	bls.n	80041ac <prvInitialiseNewTask+0x64>
 80041d8:	e000      	b.n	80041dc <prvInitialiseNewTask+0x94>
			{
				break;
 80041da:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80041dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041de:	2200      	movs	r2, #0
 80041e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80041e4:	e003      	b.n	80041ee <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80041e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041e8:	2200      	movs	r2, #0
 80041ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80041ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041f0:	2b37      	cmp	r3, #55	; 0x37
 80041f2:	d901      	bls.n	80041f8 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80041f4:	2337      	movs	r3, #55	; 0x37
 80041f6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80041f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80041fc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80041fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004200:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004202:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004204:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004206:	2200      	movs	r2, #0
 8004208:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800420a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800420c:	3304      	adds	r3, #4
 800420e:	4618      	mov	r0, r3
 8004210:	f7ff f978 	bl	8003504 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004214:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004216:	3318      	adds	r3, #24
 8004218:	4618      	mov	r0, r3
 800421a:	f7ff f973 	bl	8003504 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800421e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004220:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004222:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004224:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004226:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800422a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800422c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800422e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004230:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004232:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004234:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004236:	2200      	movs	r2, #0
 8004238:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800423c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800423e:	2200      	movs	r2, #0
 8004240:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004244:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004246:	3354      	adds	r3, #84	; 0x54
 8004248:	2260      	movs	r2, #96	; 0x60
 800424a:	2100      	movs	r1, #0
 800424c:	4618      	mov	r0, r3
 800424e:	f002 f819 	bl	8006284 <memset>
 8004252:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004254:	4a0c      	ldr	r2, [pc, #48]	; (8004288 <prvInitialiseNewTask+0x140>)
 8004256:	659a      	str	r2, [r3, #88]	; 0x58
 8004258:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800425a:	4a0c      	ldr	r2, [pc, #48]	; (800428c <prvInitialiseNewTask+0x144>)
 800425c:	65da      	str	r2, [r3, #92]	; 0x5c
 800425e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004260:	4a0b      	ldr	r2, [pc, #44]	; (8004290 <prvInitialiseNewTask+0x148>)
 8004262:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004264:	683a      	ldr	r2, [r7, #0]
 8004266:	68f9      	ldr	r1, [r7, #12]
 8004268:	69b8      	ldr	r0, [r7, #24]
 800426a:	f001 fa19 	bl	80056a0 <pxPortInitialiseStack>
 800426e:	4602      	mov	r2, r0
 8004270:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004272:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004274:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004276:	2b00      	cmp	r3, #0
 8004278:	d002      	beq.n	8004280 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800427a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800427c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800427e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004280:	bf00      	nop
 8004282:	3720      	adds	r7, #32
 8004284:	46bd      	mov	sp, r7
 8004286:	bd80      	pop	{r7, pc}
 8004288:	08006694 	.word	0x08006694
 800428c:	080066b4 	.word	0x080066b4
 8004290:	08006674 	.word	0x08006674

08004294 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004294:	b580      	push	{r7, lr}
 8004296:	b082      	sub	sp, #8
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800429c:	f001 fb2a 	bl	80058f4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80042a0:	4b2d      	ldr	r3, [pc, #180]	; (8004358 <prvAddNewTaskToReadyList+0xc4>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	3301      	adds	r3, #1
 80042a6:	4a2c      	ldr	r2, [pc, #176]	; (8004358 <prvAddNewTaskToReadyList+0xc4>)
 80042a8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80042aa:	4b2c      	ldr	r3, [pc, #176]	; (800435c <prvAddNewTaskToReadyList+0xc8>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d109      	bne.n	80042c6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80042b2:	4a2a      	ldr	r2, [pc, #168]	; (800435c <prvAddNewTaskToReadyList+0xc8>)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80042b8:	4b27      	ldr	r3, [pc, #156]	; (8004358 <prvAddNewTaskToReadyList+0xc4>)
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	2b01      	cmp	r3, #1
 80042be:	d110      	bne.n	80042e2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80042c0:	f000 fcfe 	bl	8004cc0 <prvInitialiseTaskLists>
 80042c4:	e00d      	b.n	80042e2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80042c6:	4b26      	ldr	r3, [pc, #152]	; (8004360 <prvAddNewTaskToReadyList+0xcc>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d109      	bne.n	80042e2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80042ce:	4b23      	ldr	r3, [pc, #140]	; (800435c <prvAddNewTaskToReadyList+0xc8>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042d8:	429a      	cmp	r2, r3
 80042da:	d802      	bhi.n	80042e2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80042dc:	4a1f      	ldr	r2, [pc, #124]	; (800435c <prvAddNewTaskToReadyList+0xc8>)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80042e2:	4b20      	ldr	r3, [pc, #128]	; (8004364 <prvAddNewTaskToReadyList+0xd0>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	3301      	adds	r3, #1
 80042e8:	4a1e      	ldr	r2, [pc, #120]	; (8004364 <prvAddNewTaskToReadyList+0xd0>)
 80042ea:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80042ec:	4b1d      	ldr	r3, [pc, #116]	; (8004364 <prvAddNewTaskToReadyList+0xd0>)
 80042ee:	681a      	ldr	r2, [r3, #0]
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042f8:	4b1b      	ldr	r3, [pc, #108]	; (8004368 <prvAddNewTaskToReadyList+0xd4>)
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	429a      	cmp	r2, r3
 80042fe:	d903      	bls.n	8004308 <prvAddNewTaskToReadyList+0x74>
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004304:	4a18      	ldr	r2, [pc, #96]	; (8004368 <prvAddNewTaskToReadyList+0xd4>)
 8004306:	6013      	str	r3, [r2, #0]
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800430c:	4613      	mov	r3, r2
 800430e:	009b      	lsls	r3, r3, #2
 8004310:	4413      	add	r3, r2
 8004312:	009b      	lsls	r3, r3, #2
 8004314:	4a15      	ldr	r2, [pc, #84]	; (800436c <prvAddNewTaskToReadyList+0xd8>)
 8004316:	441a      	add	r2, r3
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	3304      	adds	r3, #4
 800431c:	4619      	mov	r1, r3
 800431e:	4610      	mov	r0, r2
 8004320:	f7ff f8fd 	bl	800351e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004324:	f001 fb16 	bl	8005954 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004328:	4b0d      	ldr	r3, [pc, #52]	; (8004360 <prvAddNewTaskToReadyList+0xcc>)
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d00e      	beq.n	800434e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004330:	4b0a      	ldr	r3, [pc, #40]	; (800435c <prvAddNewTaskToReadyList+0xc8>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800433a:	429a      	cmp	r2, r3
 800433c:	d207      	bcs.n	800434e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800433e:	4b0c      	ldr	r3, [pc, #48]	; (8004370 <prvAddNewTaskToReadyList+0xdc>)
 8004340:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004344:	601a      	str	r2, [r3, #0]
 8004346:	f3bf 8f4f 	dsb	sy
 800434a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800434e:	bf00      	nop
 8004350:	3708      	adds	r7, #8
 8004352:	46bd      	mov	sp, r7
 8004354:	bd80      	pop	{r7, pc}
 8004356:	bf00      	nop
 8004358:	20000f08 	.word	0x20000f08
 800435c:	20000a34 	.word	0x20000a34
 8004360:	20000f14 	.word	0x20000f14
 8004364:	20000f24 	.word	0x20000f24
 8004368:	20000f10 	.word	0x20000f10
 800436c:	20000a38 	.word	0x20000a38
 8004370:	e000ed04 	.word	0xe000ed04

08004374 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8004374:	b580      	push	{r7, lr}
 8004376:	b084      	sub	sp, #16
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800437c:	f001 faba 	bl	80058f4 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2b00      	cmp	r3, #0
 8004384:	d102      	bne.n	800438c <vTaskDelete+0x18>
 8004386:	4b2c      	ldr	r3, [pc, #176]	; (8004438 <vTaskDelete+0xc4>)
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	e000      	b.n	800438e <vTaskDelete+0x1a>
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	3304      	adds	r3, #4
 8004394:	4618      	mov	r0, r3
 8004396:	f7ff f91f 	bl	80035d8 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d004      	beq.n	80043ac <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	3318      	adds	r3, #24
 80043a6:	4618      	mov	r0, r3
 80043a8:	f7ff f916 	bl	80035d8 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 80043ac:	4b23      	ldr	r3, [pc, #140]	; (800443c <vTaskDelete+0xc8>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	3301      	adds	r3, #1
 80043b2:	4a22      	ldr	r2, [pc, #136]	; (800443c <vTaskDelete+0xc8>)
 80043b4:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 80043b6:	4b20      	ldr	r3, [pc, #128]	; (8004438 <vTaskDelete+0xc4>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	68fa      	ldr	r2, [r7, #12]
 80043bc:	429a      	cmp	r2, r3
 80043be:	d10b      	bne.n	80043d8 <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	3304      	adds	r3, #4
 80043c4:	4619      	mov	r1, r3
 80043c6:	481e      	ldr	r0, [pc, #120]	; (8004440 <vTaskDelete+0xcc>)
 80043c8:	f7ff f8a9 	bl	800351e <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 80043cc:	4b1d      	ldr	r3, [pc, #116]	; (8004444 <vTaskDelete+0xd0>)
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	3301      	adds	r3, #1
 80043d2:	4a1c      	ldr	r2, [pc, #112]	; (8004444 <vTaskDelete+0xd0>)
 80043d4:	6013      	str	r3, [r2, #0]
 80043d6:	e009      	b.n	80043ec <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 80043d8:	4b1b      	ldr	r3, [pc, #108]	; (8004448 <vTaskDelete+0xd4>)
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	3b01      	subs	r3, #1
 80043de:	4a1a      	ldr	r2, [pc, #104]	; (8004448 <vTaskDelete+0xd4>)
 80043e0:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 80043e2:	68f8      	ldr	r0, [r7, #12]
 80043e4:	f000 fcda 	bl	8004d9c <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 80043e8:	f000 fd0c 	bl	8004e04 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 80043ec:	f001 fab2 	bl	8005954 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 80043f0:	4b16      	ldr	r3, [pc, #88]	; (800444c <vTaskDelete+0xd8>)
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d01b      	beq.n	8004430 <vTaskDelete+0xbc>
		{
			if( pxTCB == pxCurrentTCB )
 80043f8:	4b0f      	ldr	r3, [pc, #60]	; (8004438 <vTaskDelete+0xc4>)
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	68fa      	ldr	r2, [r7, #12]
 80043fe:	429a      	cmp	r2, r3
 8004400:	d116      	bne.n	8004430 <vTaskDelete+0xbc>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8004402:	4b13      	ldr	r3, [pc, #76]	; (8004450 <vTaskDelete+0xdc>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	2b00      	cmp	r3, #0
 8004408:	d00a      	beq.n	8004420 <vTaskDelete+0xac>
	__asm volatile
 800440a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800440e:	f383 8811 	msr	BASEPRI, r3
 8004412:	f3bf 8f6f 	isb	sy
 8004416:	f3bf 8f4f 	dsb	sy
 800441a:	60bb      	str	r3, [r7, #8]
}
 800441c:	bf00      	nop
 800441e:	e7fe      	b.n	800441e <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 8004420:	4b0c      	ldr	r3, [pc, #48]	; (8004454 <vTaskDelete+0xe0>)
 8004422:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004426:	601a      	str	r2, [r3, #0]
 8004428:	f3bf 8f4f 	dsb	sy
 800442c:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004430:	bf00      	nop
 8004432:	3710      	adds	r7, #16
 8004434:	46bd      	mov	sp, r7
 8004436:	bd80      	pop	{r7, pc}
 8004438:	20000a34 	.word	0x20000a34
 800443c:	20000f24 	.word	0x20000f24
 8004440:	20000edc 	.word	0x20000edc
 8004444:	20000ef0 	.word	0x20000ef0
 8004448:	20000f08 	.word	0x20000f08
 800444c:	20000f14 	.word	0x20000f14
 8004450:	20000f30 	.word	0x20000f30
 8004454:	e000ed04 	.word	0xe000ed04

08004458 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004458:	b580      	push	{r7, lr}
 800445a:	b084      	sub	sp, #16
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004460:	2300      	movs	r3, #0
 8004462:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d017      	beq.n	800449a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800446a:	4b13      	ldr	r3, [pc, #76]	; (80044b8 <vTaskDelay+0x60>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d00a      	beq.n	8004488 <vTaskDelay+0x30>
	__asm volatile
 8004472:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004476:	f383 8811 	msr	BASEPRI, r3
 800447a:	f3bf 8f6f 	isb	sy
 800447e:	f3bf 8f4f 	dsb	sy
 8004482:	60bb      	str	r3, [r7, #8]
}
 8004484:	bf00      	nop
 8004486:	e7fe      	b.n	8004486 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004488:	f000 f8f0 	bl	800466c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800448c:	2100      	movs	r1, #0
 800448e:	6878      	ldr	r0, [r7, #4]
 8004490:	f000 fd64 	bl	8004f5c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004494:	f000 f8f8 	bl	8004688 <xTaskResumeAll>
 8004498:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	2b00      	cmp	r3, #0
 800449e:	d107      	bne.n	80044b0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80044a0:	4b06      	ldr	r3, [pc, #24]	; (80044bc <vTaskDelay+0x64>)
 80044a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80044a6:	601a      	str	r2, [r3, #0]
 80044a8:	f3bf 8f4f 	dsb	sy
 80044ac:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80044b0:	bf00      	nop
 80044b2:	3710      	adds	r7, #16
 80044b4:	46bd      	mov	sp, r7
 80044b6:	bd80      	pop	{r7, pc}
 80044b8:	20000f30 	.word	0x20000f30
 80044bc:	e000ed04 	.word	0xe000ed04

080044c0 <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b088      	sub	sp, #32
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
	const TCB_t * const pxTCB = xTask;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	61bb      	str	r3, [r7, #24]

		configASSERT( pxTCB );
 80044cc:	69bb      	ldr	r3, [r7, #24]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d10a      	bne.n	80044e8 <eTaskGetState+0x28>
	__asm volatile
 80044d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044d6:	f383 8811 	msr	BASEPRI, r3
 80044da:	f3bf 8f6f 	isb	sy
 80044de:	f3bf 8f4f 	dsb	sy
 80044e2:	60bb      	str	r3, [r7, #8]
}
 80044e4:	bf00      	nop
 80044e6:	e7fe      	b.n	80044e6 <eTaskGetState+0x26>

		if( pxTCB == pxCurrentTCB )
 80044e8:	4b23      	ldr	r3, [pc, #140]	; (8004578 <eTaskGetState+0xb8>)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	69ba      	ldr	r2, [r7, #24]
 80044ee:	429a      	cmp	r2, r3
 80044f0:	d102      	bne.n	80044f8 <eTaskGetState+0x38>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 80044f2:	2300      	movs	r3, #0
 80044f4:	77fb      	strb	r3, [r7, #31]
 80044f6:	e03a      	b.n	800456e <eTaskGetState+0xae>
		}
		else
		{
			taskENTER_CRITICAL();
 80044f8:	f001 f9fc 	bl	80058f4 <vPortEnterCritical>
			{
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 80044fc:	69bb      	ldr	r3, [r7, #24]
 80044fe:	695b      	ldr	r3, [r3, #20]
 8004500:	617b      	str	r3, [r7, #20]
				pxDelayedList = pxDelayedTaskList;
 8004502:	4b1e      	ldr	r3, [pc, #120]	; (800457c <eTaskGetState+0xbc>)
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	613b      	str	r3, [r7, #16]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 8004508:	4b1d      	ldr	r3, [pc, #116]	; (8004580 <eTaskGetState+0xc0>)
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 800450e:	f001 fa21 	bl	8005954 <vPortExitCritical>

			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 8004512:	697a      	ldr	r2, [r7, #20]
 8004514:	693b      	ldr	r3, [r7, #16]
 8004516:	429a      	cmp	r2, r3
 8004518:	d003      	beq.n	8004522 <eTaskGetState+0x62>
 800451a:	697a      	ldr	r2, [r7, #20]
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	429a      	cmp	r2, r3
 8004520:	d102      	bne.n	8004528 <eTaskGetState+0x68>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 8004522:	2302      	movs	r3, #2
 8004524:	77fb      	strb	r3, [r7, #31]
 8004526:	e022      	b.n	800456e <eTaskGetState+0xae>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 8004528:	697b      	ldr	r3, [r7, #20]
 800452a:	4a16      	ldr	r2, [pc, #88]	; (8004584 <eTaskGetState+0xc4>)
 800452c:	4293      	cmp	r3, r2
 800452e:	d112      	bne.n	8004556 <eTaskGetState+0x96>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it blocked
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 8004530:	69bb      	ldr	r3, [r7, #24]
 8004532:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004534:	2b00      	cmp	r3, #0
 8004536:	d10b      	bne.n	8004550 <eTaskGetState+0x90>
						{
							/* The task does not appear on the event list item of
							and of the RTOS objects, but could still be in the
							blocked state if it is waiting on its notification
							rather than waiting on an object. */
							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8004538:	69bb      	ldr	r3, [r7, #24]
 800453a:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 800453e:	b2db      	uxtb	r3, r3
 8004540:	2b01      	cmp	r3, #1
 8004542:	d102      	bne.n	800454a <eTaskGetState+0x8a>
							{
								eReturn = eBlocked;
 8004544:	2302      	movs	r3, #2
 8004546:	77fb      	strb	r3, [r7, #31]
 8004548:	e011      	b.n	800456e <eTaskGetState+0xae>
							}
							else
							{
								eReturn = eSuspended;
 800454a:	2303      	movs	r3, #3
 800454c:	77fb      	strb	r3, [r7, #31]
 800454e:	e00e      	b.n	800456e <eTaskGetState+0xae>
						}
						#endif
					}
					else
					{
						eReturn = eBlocked;
 8004550:	2302      	movs	r3, #2
 8004552:	77fb      	strb	r3, [r7, #31]
 8004554:	e00b      	b.n	800456e <eTaskGetState+0xae>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 8004556:	697b      	ldr	r3, [r7, #20]
 8004558:	4a0b      	ldr	r2, [pc, #44]	; (8004588 <eTaskGetState+0xc8>)
 800455a:	4293      	cmp	r3, r2
 800455c:	d002      	beq.n	8004564 <eTaskGetState+0xa4>
 800455e:	697b      	ldr	r3, [r7, #20]
 8004560:	2b00      	cmp	r3, #0
 8004562:	d102      	bne.n	800456a <eTaskGetState+0xaa>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 8004564:	2304      	movs	r3, #4
 8004566:	77fb      	strb	r3, [r7, #31]
 8004568:	e001      	b.n	800456e <eTaskGetState+0xae>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 800456a:	2301      	movs	r3, #1
 800456c:	77fb      	strb	r3, [r7, #31]
			}
		}

		return eReturn;
 800456e:	7ffb      	ldrb	r3, [r7, #31]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8004570:	4618      	mov	r0, r3
 8004572:	3720      	adds	r7, #32
 8004574:	46bd      	mov	sp, r7
 8004576:	bd80      	pop	{r7, pc}
 8004578:	20000a34 	.word	0x20000a34
 800457c:	20000ec0 	.word	0x20000ec0
 8004580:	20000ec4 	.word	0x20000ec4
 8004584:	20000ef4 	.word	0x20000ef4
 8004588:	20000edc 	.word	0x20000edc

0800458c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800458c:	b580      	push	{r7, lr}
 800458e:	b08a      	sub	sp, #40	; 0x28
 8004590:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004592:	2300      	movs	r3, #0
 8004594:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004596:	2300      	movs	r3, #0
 8004598:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800459a:	463a      	mov	r2, r7
 800459c:	1d39      	adds	r1, r7, #4
 800459e:	f107 0308 	add.w	r3, r7, #8
 80045a2:	4618      	mov	r0, r3
 80045a4:	f7fe ff5a 	bl	800345c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80045a8:	6839      	ldr	r1, [r7, #0]
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	68ba      	ldr	r2, [r7, #8]
 80045ae:	9202      	str	r2, [sp, #8]
 80045b0:	9301      	str	r3, [sp, #4]
 80045b2:	2300      	movs	r3, #0
 80045b4:	9300      	str	r3, [sp, #0]
 80045b6:	2300      	movs	r3, #0
 80045b8:	460a      	mov	r2, r1
 80045ba:	4924      	ldr	r1, [pc, #144]	; (800464c <vTaskStartScheduler+0xc0>)
 80045bc:	4824      	ldr	r0, [pc, #144]	; (8004650 <vTaskStartScheduler+0xc4>)
 80045be:	f7ff fd21 	bl	8004004 <xTaskCreateStatic>
 80045c2:	4603      	mov	r3, r0
 80045c4:	4a23      	ldr	r2, [pc, #140]	; (8004654 <vTaskStartScheduler+0xc8>)
 80045c6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80045c8:	4b22      	ldr	r3, [pc, #136]	; (8004654 <vTaskStartScheduler+0xc8>)
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d002      	beq.n	80045d6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80045d0:	2301      	movs	r3, #1
 80045d2:	617b      	str	r3, [r7, #20]
 80045d4:	e001      	b.n	80045da <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80045d6:	2300      	movs	r3, #0
 80045d8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80045da:	697b      	ldr	r3, [r7, #20]
 80045dc:	2b01      	cmp	r3, #1
 80045de:	d102      	bne.n	80045e6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80045e0:	f000 fd10 	bl	8005004 <xTimerCreateTimerTask>
 80045e4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80045e6:	697b      	ldr	r3, [r7, #20]
 80045e8:	2b01      	cmp	r3, #1
 80045ea:	d11b      	bne.n	8004624 <vTaskStartScheduler+0x98>
	__asm volatile
 80045ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045f0:	f383 8811 	msr	BASEPRI, r3
 80045f4:	f3bf 8f6f 	isb	sy
 80045f8:	f3bf 8f4f 	dsb	sy
 80045fc:	613b      	str	r3, [r7, #16]
}
 80045fe:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004600:	4b15      	ldr	r3, [pc, #84]	; (8004658 <vTaskStartScheduler+0xcc>)
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	3354      	adds	r3, #84	; 0x54
 8004606:	4a15      	ldr	r2, [pc, #84]	; (800465c <vTaskStartScheduler+0xd0>)
 8004608:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800460a:	4b15      	ldr	r3, [pc, #84]	; (8004660 <vTaskStartScheduler+0xd4>)
 800460c:	f04f 32ff 	mov.w	r2, #4294967295
 8004610:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004612:	4b14      	ldr	r3, [pc, #80]	; (8004664 <vTaskStartScheduler+0xd8>)
 8004614:	2201      	movs	r2, #1
 8004616:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004618:	4b13      	ldr	r3, [pc, #76]	; (8004668 <vTaskStartScheduler+0xdc>)
 800461a:	2200      	movs	r2, #0
 800461c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800461e:	f001 f8c7 	bl	80057b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004622:	e00e      	b.n	8004642 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004624:	697b      	ldr	r3, [r7, #20]
 8004626:	f1b3 3fff 	cmp.w	r3, #4294967295
 800462a:	d10a      	bne.n	8004642 <vTaskStartScheduler+0xb6>
	__asm volatile
 800462c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004630:	f383 8811 	msr	BASEPRI, r3
 8004634:	f3bf 8f6f 	isb	sy
 8004638:	f3bf 8f4f 	dsb	sy
 800463c:	60fb      	str	r3, [r7, #12]
}
 800463e:	bf00      	nop
 8004640:	e7fe      	b.n	8004640 <vTaskStartScheduler+0xb4>
}
 8004642:	bf00      	nop
 8004644:	3718      	adds	r7, #24
 8004646:	46bd      	mov	sp, r7
 8004648:	bd80      	pop	{r7, pc}
 800464a:	bf00      	nop
 800464c:	080065c4 	.word	0x080065c4
 8004650:	08004c91 	.word	0x08004c91
 8004654:	20000f2c 	.word	0x20000f2c
 8004658:	20000a34 	.word	0x20000a34
 800465c:	20000010 	.word	0x20000010
 8004660:	20000f28 	.word	0x20000f28
 8004664:	20000f14 	.word	0x20000f14
 8004668:	20000f0c 	.word	0x20000f0c

0800466c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800466c:	b480      	push	{r7}
 800466e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004670:	4b04      	ldr	r3, [pc, #16]	; (8004684 <vTaskSuspendAll+0x18>)
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	3301      	adds	r3, #1
 8004676:	4a03      	ldr	r2, [pc, #12]	; (8004684 <vTaskSuspendAll+0x18>)
 8004678:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800467a:	bf00      	nop
 800467c:	46bd      	mov	sp, r7
 800467e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004682:	4770      	bx	lr
 8004684:	20000f30 	.word	0x20000f30

08004688 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b084      	sub	sp, #16
 800468c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800468e:	2300      	movs	r3, #0
 8004690:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004692:	2300      	movs	r3, #0
 8004694:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004696:	4b42      	ldr	r3, [pc, #264]	; (80047a0 <xTaskResumeAll+0x118>)
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d10a      	bne.n	80046b4 <xTaskResumeAll+0x2c>
	__asm volatile
 800469e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046a2:	f383 8811 	msr	BASEPRI, r3
 80046a6:	f3bf 8f6f 	isb	sy
 80046aa:	f3bf 8f4f 	dsb	sy
 80046ae:	603b      	str	r3, [r7, #0]
}
 80046b0:	bf00      	nop
 80046b2:	e7fe      	b.n	80046b2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80046b4:	f001 f91e 	bl	80058f4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80046b8:	4b39      	ldr	r3, [pc, #228]	; (80047a0 <xTaskResumeAll+0x118>)
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	3b01      	subs	r3, #1
 80046be:	4a38      	ldr	r2, [pc, #224]	; (80047a0 <xTaskResumeAll+0x118>)
 80046c0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80046c2:	4b37      	ldr	r3, [pc, #220]	; (80047a0 <xTaskResumeAll+0x118>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d162      	bne.n	8004790 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80046ca:	4b36      	ldr	r3, [pc, #216]	; (80047a4 <xTaskResumeAll+0x11c>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d05e      	beq.n	8004790 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80046d2:	e02f      	b.n	8004734 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80046d4:	4b34      	ldr	r3, [pc, #208]	; (80047a8 <xTaskResumeAll+0x120>)
 80046d6:	68db      	ldr	r3, [r3, #12]
 80046d8:	68db      	ldr	r3, [r3, #12]
 80046da:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	3318      	adds	r3, #24
 80046e0:	4618      	mov	r0, r3
 80046e2:	f7fe ff79 	bl	80035d8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	3304      	adds	r3, #4
 80046ea:	4618      	mov	r0, r3
 80046ec:	f7fe ff74 	bl	80035d8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046f4:	4b2d      	ldr	r3, [pc, #180]	; (80047ac <xTaskResumeAll+0x124>)
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	429a      	cmp	r2, r3
 80046fa:	d903      	bls.n	8004704 <xTaskResumeAll+0x7c>
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004700:	4a2a      	ldr	r2, [pc, #168]	; (80047ac <xTaskResumeAll+0x124>)
 8004702:	6013      	str	r3, [r2, #0]
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004708:	4613      	mov	r3, r2
 800470a:	009b      	lsls	r3, r3, #2
 800470c:	4413      	add	r3, r2
 800470e:	009b      	lsls	r3, r3, #2
 8004710:	4a27      	ldr	r2, [pc, #156]	; (80047b0 <xTaskResumeAll+0x128>)
 8004712:	441a      	add	r2, r3
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	3304      	adds	r3, #4
 8004718:	4619      	mov	r1, r3
 800471a:	4610      	mov	r0, r2
 800471c:	f7fe feff 	bl	800351e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004724:	4b23      	ldr	r3, [pc, #140]	; (80047b4 <xTaskResumeAll+0x12c>)
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800472a:	429a      	cmp	r2, r3
 800472c:	d302      	bcc.n	8004734 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800472e:	4b22      	ldr	r3, [pc, #136]	; (80047b8 <xTaskResumeAll+0x130>)
 8004730:	2201      	movs	r2, #1
 8004732:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004734:	4b1c      	ldr	r3, [pc, #112]	; (80047a8 <xTaskResumeAll+0x120>)
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	2b00      	cmp	r3, #0
 800473a:	d1cb      	bne.n	80046d4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	2b00      	cmp	r3, #0
 8004740:	d001      	beq.n	8004746 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004742:	f000 fb5f 	bl	8004e04 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004746:	4b1d      	ldr	r3, [pc, #116]	; (80047bc <xTaskResumeAll+0x134>)
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2b00      	cmp	r3, #0
 8004750:	d010      	beq.n	8004774 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004752:	f000 f847 	bl	80047e4 <xTaskIncrementTick>
 8004756:	4603      	mov	r3, r0
 8004758:	2b00      	cmp	r3, #0
 800475a:	d002      	beq.n	8004762 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800475c:	4b16      	ldr	r3, [pc, #88]	; (80047b8 <xTaskResumeAll+0x130>)
 800475e:	2201      	movs	r2, #1
 8004760:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	3b01      	subs	r3, #1
 8004766:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d1f1      	bne.n	8004752 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800476e:	4b13      	ldr	r3, [pc, #76]	; (80047bc <xTaskResumeAll+0x134>)
 8004770:	2200      	movs	r2, #0
 8004772:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004774:	4b10      	ldr	r3, [pc, #64]	; (80047b8 <xTaskResumeAll+0x130>)
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	2b00      	cmp	r3, #0
 800477a:	d009      	beq.n	8004790 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800477c:	2301      	movs	r3, #1
 800477e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004780:	4b0f      	ldr	r3, [pc, #60]	; (80047c0 <xTaskResumeAll+0x138>)
 8004782:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004786:	601a      	str	r2, [r3, #0]
 8004788:	f3bf 8f4f 	dsb	sy
 800478c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004790:	f001 f8e0 	bl	8005954 <vPortExitCritical>

	return xAlreadyYielded;
 8004794:	68bb      	ldr	r3, [r7, #8]
}
 8004796:	4618      	mov	r0, r3
 8004798:	3710      	adds	r7, #16
 800479a:	46bd      	mov	sp, r7
 800479c:	bd80      	pop	{r7, pc}
 800479e:	bf00      	nop
 80047a0:	20000f30 	.word	0x20000f30
 80047a4:	20000f08 	.word	0x20000f08
 80047a8:	20000ec8 	.word	0x20000ec8
 80047ac:	20000f10 	.word	0x20000f10
 80047b0:	20000a38 	.word	0x20000a38
 80047b4:	20000a34 	.word	0x20000a34
 80047b8:	20000f1c 	.word	0x20000f1c
 80047bc:	20000f18 	.word	0x20000f18
 80047c0:	e000ed04 	.word	0xe000ed04

080047c4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80047c4:	b480      	push	{r7}
 80047c6:	b083      	sub	sp, #12
 80047c8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80047ca:	4b05      	ldr	r3, [pc, #20]	; (80047e0 <xTaskGetTickCount+0x1c>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80047d0:	687b      	ldr	r3, [r7, #4]
}
 80047d2:	4618      	mov	r0, r3
 80047d4:	370c      	adds	r7, #12
 80047d6:	46bd      	mov	sp, r7
 80047d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047dc:	4770      	bx	lr
 80047de:	bf00      	nop
 80047e0:	20000f0c 	.word	0x20000f0c

080047e4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80047e4:	b580      	push	{r7, lr}
 80047e6:	b086      	sub	sp, #24
 80047e8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80047ea:	2300      	movs	r3, #0
 80047ec:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80047ee:	4b4f      	ldr	r3, [pc, #316]	; (800492c <xTaskIncrementTick+0x148>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	f040 808f 	bne.w	8004916 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80047f8:	4b4d      	ldr	r3, [pc, #308]	; (8004930 <xTaskIncrementTick+0x14c>)
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	3301      	adds	r3, #1
 80047fe:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004800:	4a4b      	ldr	r2, [pc, #300]	; (8004930 <xTaskIncrementTick+0x14c>)
 8004802:	693b      	ldr	r3, [r7, #16]
 8004804:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004806:	693b      	ldr	r3, [r7, #16]
 8004808:	2b00      	cmp	r3, #0
 800480a:	d120      	bne.n	800484e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800480c:	4b49      	ldr	r3, [pc, #292]	; (8004934 <xTaskIncrementTick+0x150>)
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	2b00      	cmp	r3, #0
 8004814:	d00a      	beq.n	800482c <xTaskIncrementTick+0x48>
	__asm volatile
 8004816:	f04f 0350 	mov.w	r3, #80	; 0x50
 800481a:	f383 8811 	msr	BASEPRI, r3
 800481e:	f3bf 8f6f 	isb	sy
 8004822:	f3bf 8f4f 	dsb	sy
 8004826:	603b      	str	r3, [r7, #0]
}
 8004828:	bf00      	nop
 800482a:	e7fe      	b.n	800482a <xTaskIncrementTick+0x46>
 800482c:	4b41      	ldr	r3, [pc, #260]	; (8004934 <xTaskIncrementTick+0x150>)
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	60fb      	str	r3, [r7, #12]
 8004832:	4b41      	ldr	r3, [pc, #260]	; (8004938 <xTaskIncrementTick+0x154>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	4a3f      	ldr	r2, [pc, #252]	; (8004934 <xTaskIncrementTick+0x150>)
 8004838:	6013      	str	r3, [r2, #0]
 800483a:	4a3f      	ldr	r2, [pc, #252]	; (8004938 <xTaskIncrementTick+0x154>)
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	6013      	str	r3, [r2, #0]
 8004840:	4b3e      	ldr	r3, [pc, #248]	; (800493c <xTaskIncrementTick+0x158>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	3301      	adds	r3, #1
 8004846:	4a3d      	ldr	r2, [pc, #244]	; (800493c <xTaskIncrementTick+0x158>)
 8004848:	6013      	str	r3, [r2, #0]
 800484a:	f000 fadb 	bl	8004e04 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800484e:	4b3c      	ldr	r3, [pc, #240]	; (8004940 <xTaskIncrementTick+0x15c>)
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	693a      	ldr	r2, [r7, #16]
 8004854:	429a      	cmp	r2, r3
 8004856:	d349      	bcc.n	80048ec <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004858:	4b36      	ldr	r3, [pc, #216]	; (8004934 <xTaskIncrementTick+0x150>)
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	2b00      	cmp	r3, #0
 8004860:	d104      	bne.n	800486c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004862:	4b37      	ldr	r3, [pc, #220]	; (8004940 <xTaskIncrementTick+0x15c>)
 8004864:	f04f 32ff 	mov.w	r2, #4294967295
 8004868:	601a      	str	r2, [r3, #0]
					break;
 800486a:	e03f      	b.n	80048ec <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800486c:	4b31      	ldr	r3, [pc, #196]	; (8004934 <xTaskIncrementTick+0x150>)
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	68db      	ldr	r3, [r3, #12]
 8004872:	68db      	ldr	r3, [r3, #12]
 8004874:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004876:	68bb      	ldr	r3, [r7, #8]
 8004878:	685b      	ldr	r3, [r3, #4]
 800487a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800487c:	693a      	ldr	r2, [r7, #16]
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	429a      	cmp	r2, r3
 8004882:	d203      	bcs.n	800488c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004884:	4a2e      	ldr	r2, [pc, #184]	; (8004940 <xTaskIncrementTick+0x15c>)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800488a:	e02f      	b.n	80048ec <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800488c:	68bb      	ldr	r3, [r7, #8]
 800488e:	3304      	adds	r3, #4
 8004890:	4618      	mov	r0, r3
 8004892:	f7fe fea1 	bl	80035d8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004896:	68bb      	ldr	r3, [r7, #8]
 8004898:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800489a:	2b00      	cmp	r3, #0
 800489c:	d004      	beq.n	80048a8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800489e:	68bb      	ldr	r3, [r7, #8]
 80048a0:	3318      	adds	r3, #24
 80048a2:	4618      	mov	r0, r3
 80048a4:	f7fe fe98 	bl	80035d8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80048a8:	68bb      	ldr	r3, [r7, #8]
 80048aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048ac:	4b25      	ldr	r3, [pc, #148]	; (8004944 <xTaskIncrementTick+0x160>)
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	429a      	cmp	r2, r3
 80048b2:	d903      	bls.n	80048bc <xTaskIncrementTick+0xd8>
 80048b4:	68bb      	ldr	r3, [r7, #8]
 80048b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048b8:	4a22      	ldr	r2, [pc, #136]	; (8004944 <xTaskIncrementTick+0x160>)
 80048ba:	6013      	str	r3, [r2, #0]
 80048bc:	68bb      	ldr	r3, [r7, #8]
 80048be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048c0:	4613      	mov	r3, r2
 80048c2:	009b      	lsls	r3, r3, #2
 80048c4:	4413      	add	r3, r2
 80048c6:	009b      	lsls	r3, r3, #2
 80048c8:	4a1f      	ldr	r2, [pc, #124]	; (8004948 <xTaskIncrementTick+0x164>)
 80048ca:	441a      	add	r2, r3
 80048cc:	68bb      	ldr	r3, [r7, #8]
 80048ce:	3304      	adds	r3, #4
 80048d0:	4619      	mov	r1, r3
 80048d2:	4610      	mov	r0, r2
 80048d4:	f7fe fe23 	bl	800351e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80048d8:	68bb      	ldr	r3, [r7, #8]
 80048da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048dc:	4b1b      	ldr	r3, [pc, #108]	; (800494c <xTaskIncrementTick+0x168>)
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048e2:	429a      	cmp	r2, r3
 80048e4:	d3b8      	bcc.n	8004858 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80048e6:	2301      	movs	r3, #1
 80048e8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80048ea:	e7b5      	b.n	8004858 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80048ec:	4b17      	ldr	r3, [pc, #92]	; (800494c <xTaskIncrementTick+0x168>)
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048f2:	4915      	ldr	r1, [pc, #84]	; (8004948 <xTaskIncrementTick+0x164>)
 80048f4:	4613      	mov	r3, r2
 80048f6:	009b      	lsls	r3, r3, #2
 80048f8:	4413      	add	r3, r2
 80048fa:	009b      	lsls	r3, r3, #2
 80048fc:	440b      	add	r3, r1
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	2b01      	cmp	r3, #1
 8004902:	d901      	bls.n	8004908 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8004904:	2301      	movs	r3, #1
 8004906:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004908:	4b11      	ldr	r3, [pc, #68]	; (8004950 <xTaskIncrementTick+0x16c>)
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	2b00      	cmp	r3, #0
 800490e:	d007      	beq.n	8004920 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8004910:	2301      	movs	r3, #1
 8004912:	617b      	str	r3, [r7, #20]
 8004914:	e004      	b.n	8004920 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004916:	4b0f      	ldr	r3, [pc, #60]	; (8004954 <xTaskIncrementTick+0x170>)
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	3301      	adds	r3, #1
 800491c:	4a0d      	ldr	r2, [pc, #52]	; (8004954 <xTaskIncrementTick+0x170>)
 800491e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004920:	697b      	ldr	r3, [r7, #20]
}
 8004922:	4618      	mov	r0, r3
 8004924:	3718      	adds	r7, #24
 8004926:	46bd      	mov	sp, r7
 8004928:	bd80      	pop	{r7, pc}
 800492a:	bf00      	nop
 800492c:	20000f30 	.word	0x20000f30
 8004930:	20000f0c 	.word	0x20000f0c
 8004934:	20000ec0 	.word	0x20000ec0
 8004938:	20000ec4 	.word	0x20000ec4
 800493c:	20000f20 	.word	0x20000f20
 8004940:	20000f28 	.word	0x20000f28
 8004944:	20000f10 	.word	0x20000f10
 8004948:	20000a38 	.word	0x20000a38
 800494c:	20000a34 	.word	0x20000a34
 8004950:	20000f1c 	.word	0x20000f1c
 8004954:	20000f18 	.word	0x20000f18

08004958 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004958:	b480      	push	{r7}
 800495a:	b085      	sub	sp, #20
 800495c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800495e:	4b2a      	ldr	r3, [pc, #168]	; (8004a08 <vTaskSwitchContext+0xb0>)
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	2b00      	cmp	r3, #0
 8004964:	d003      	beq.n	800496e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004966:	4b29      	ldr	r3, [pc, #164]	; (8004a0c <vTaskSwitchContext+0xb4>)
 8004968:	2201      	movs	r2, #1
 800496a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800496c:	e046      	b.n	80049fc <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800496e:	4b27      	ldr	r3, [pc, #156]	; (8004a0c <vTaskSwitchContext+0xb4>)
 8004970:	2200      	movs	r2, #0
 8004972:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004974:	4b26      	ldr	r3, [pc, #152]	; (8004a10 <vTaskSwitchContext+0xb8>)
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	60fb      	str	r3, [r7, #12]
 800497a:	e010      	b.n	800499e <vTaskSwitchContext+0x46>
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	2b00      	cmp	r3, #0
 8004980:	d10a      	bne.n	8004998 <vTaskSwitchContext+0x40>
	__asm volatile
 8004982:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004986:	f383 8811 	msr	BASEPRI, r3
 800498a:	f3bf 8f6f 	isb	sy
 800498e:	f3bf 8f4f 	dsb	sy
 8004992:	607b      	str	r3, [r7, #4]
}
 8004994:	bf00      	nop
 8004996:	e7fe      	b.n	8004996 <vTaskSwitchContext+0x3e>
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	3b01      	subs	r3, #1
 800499c:	60fb      	str	r3, [r7, #12]
 800499e:	491d      	ldr	r1, [pc, #116]	; (8004a14 <vTaskSwitchContext+0xbc>)
 80049a0:	68fa      	ldr	r2, [r7, #12]
 80049a2:	4613      	mov	r3, r2
 80049a4:	009b      	lsls	r3, r3, #2
 80049a6:	4413      	add	r3, r2
 80049a8:	009b      	lsls	r3, r3, #2
 80049aa:	440b      	add	r3, r1
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d0e4      	beq.n	800497c <vTaskSwitchContext+0x24>
 80049b2:	68fa      	ldr	r2, [r7, #12]
 80049b4:	4613      	mov	r3, r2
 80049b6:	009b      	lsls	r3, r3, #2
 80049b8:	4413      	add	r3, r2
 80049ba:	009b      	lsls	r3, r3, #2
 80049bc:	4a15      	ldr	r2, [pc, #84]	; (8004a14 <vTaskSwitchContext+0xbc>)
 80049be:	4413      	add	r3, r2
 80049c0:	60bb      	str	r3, [r7, #8]
 80049c2:	68bb      	ldr	r3, [r7, #8]
 80049c4:	685b      	ldr	r3, [r3, #4]
 80049c6:	685a      	ldr	r2, [r3, #4]
 80049c8:	68bb      	ldr	r3, [r7, #8]
 80049ca:	605a      	str	r2, [r3, #4]
 80049cc:	68bb      	ldr	r3, [r7, #8]
 80049ce:	685a      	ldr	r2, [r3, #4]
 80049d0:	68bb      	ldr	r3, [r7, #8]
 80049d2:	3308      	adds	r3, #8
 80049d4:	429a      	cmp	r2, r3
 80049d6:	d104      	bne.n	80049e2 <vTaskSwitchContext+0x8a>
 80049d8:	68bb      	ldr	r3, [r7, #8]
 80049da:	685b      	ldr	r3, [r3, #4]
 80049dc:	685a      	ldr	r2, [r3, #4]
 80049de:	68bb      	ldr	r3, [r7, #8]
 80049e0:	605a      	str	r2, [r3, #4]
 80049e2:	68bb      	ldr	r3, [r7, #8]
 80049e4:	685b      	ldr	r3, [r3, #4]
 80049e6:	68db      	ldr	r3, [r3, #12]
 80049e8:	4a0b      	ldr	r2, [pc, #44]	; (8004a18 <vTaskSwitchContext+0xc0>)
 80049ea:	6013      	str	r3, [r2, #0]
 80049ec:	4a08      	ldr	r2, [pc, #32]	; (8004a10 <vTaskSwitchContext+0xb8>)
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80049f2:	4b09      	ldr	r3, [pc, #36]	; (8004a18 <vTaskSwitchContext+0xc0>)
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	3354      	adds	r3, #84	; 0x54
 80049f8:	4a08      	ldr	r2, [pc, #32]	; (8004a1c <vTaskSwitchContext+0xc4>)
 80049fa:	6013      	str	r3, [r2, #0]
}
 80049fc:	bf00      	nop
 80049fe:	3714      	adds	r7, #20
 8004a00:	46bd      	mov	sp, r7
 8004a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a06:	4770      	bx	lr
 8004a08:	20000f30 	.word	0x20000f30
 8004a0c:	20000f1c 	.word	0x20000f1c
 8004a10:	20000f10 	.word	0x20000f10
 8004a14:	20000a38 	.word	0x20000a38
 8004a18:	20000a34 	.word	0x20000a34
 8004a1c:	20000010 	.word	0x20000010

08004a20 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b084      	sub	sp, #16
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
 8004a28:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d10a      	bne.n	8004a46 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8004a30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a34:	f383 8811 	msr	BASEPRI, r3
 8004a38:	f3bf 8f6f 	isb	sy
 8004a3c:	f3bf 8f4f 	dsb	sy
 8004a40:	60fb      	str	r3, [r7, #12]
}
 8004a42:	bf00      	nop
 8004a44:	e7fe      	b.n	8004a44 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004a46:	4b07      	ldr	r3, [pc, #28]	; (8004a64 <vTaskPlaceOnEventList+0x44>)
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	3318      	adds	r3, #24
 8004a4c:	4619      	mov	r1, r3
 8004a4e:	6878      	ldr	r0, [r7, #4]
 8004a50:	f7fe fd89 	bl	8003566 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004a54:	2101      	movs	r1, #1
 8004a56:	6838      	ldr	r0, [r7, #0]
 8004a58:	f000 fa80 	bl	8004f5c <prvAddCurrentTaskToDelayedList>
}
 8004a5c:	bf00      	nop
 8004a5e:	3710      	adds	r7, #16
 8004a60:	46bd      	mov	sp, r7
 8004a62:	bd80      	pop	{r7, pc}
 8004a64:	20000a34 	.word	0x20000a34

08004a68 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	b086      	sub	sp, #24
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	60f8      	str	r0, [r7, #12]
 8004a70:	60b9      	str	r1, [r7, #8]
 8004a72:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d10a      	bne.n	8004a90 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8004a7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a7e:	f383 8811 	msr	BASEPRI, r3
 8004a82:	f3bf 8f6f 	isb	sy
 8004a86:	f3bf 8f4f 	dsb	sy
 8004a8a:	617b      	str	r3, [r7, #20]
}
 8004a8c:	bf00      	nop
 8004a8e:	e7fe      	b.n	8004a8e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004a90:	4b0a      	ldr	r3, [pc, #40]	; (8004abc <vTaskPlaceOnEventListRestricted+0x54>)
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	3318      	adds	r3, #24
 8004a96:	4619      	mov	r1, r3
 8004a98:	68f8      	ldr	r0, [r7, #12]
 8004a9a:	f7fe fd40 	bl	800351e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d002      	beq.n	8004aaa <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8004aa4:	f04f 33ff 	mov.w	r3, #4294967295
 8004aa8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004aaa:	6879      	ldr	r1, [r7, #4]
 8004aac:	68b8      	ldr	r0, [r7, #8]
 8004aae:	f000 fa55 	bl	8004f5c <prvAddCurrentTaskToDelayedList>
	}
 8004ab2:	bf00      	nop
 8004ab4:	3718      	adds	r7, #24
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	bd80      	pop	{r7, pc}
 8004aba:	bf00      	nop
 8004abc:	20000a34 	.word	0x20000a34

08004ac0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b086      	sub	sp, #24
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	68db      	ldr	r3, [r3, #12]
 8004acc:	68db      	ldr	r3, [r3, #12]
 8004ace:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004ad0:	693b      	ldr	r3, [r7, #16]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d10a      	bne.n	8004aec <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8004ad6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ada:	f383 8811 	msr	BASEPRI, r3
 8004ade:	f3bf 8f6f 	isb	sy
 8004ae2:	f3bf 8f4f 	dsb	sy
 8004ae6:	60fb      	str	r3, [r7, #12]
}
 8004ae8:	bf00      	nop
 8004aea:	e7fe      	b.n	8004aea <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004aec:	693b      	ldr	r3, [r7, #16]
 8004aee:	3318      	adds	r3, #24
 8004af0:	4618      	mov	r0, r3
 8004af2:	f7fe fd71 	bl	80035d8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004af6:	4b1e      	ldr	r3, [pc, #120]	; (8004b70 <xTaskRemoveFromEventList+0xb0>)
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d11d      	bne.n	8004b3a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004afe:	693b      	ldr	r3, [r7, #16]
 8004b00:	3304      	adds	r3, #4
 8004b02:	4618      	mov	r0, r3
 8004b04:	f7fe fd68 	bl	80035d8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004b08:	693b      	ldr	r3, [r7, #16]
 8004b0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b0c:	4b19      	ldr	r3, [pc, #100]	; (8004b74 <xTaskRemoveFromEventList+0xb4>)
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	429a      	cmp	r2, r3
 8004b12:	d903      	bls.n	8004b1c <xTaskRemoveFromEventList+0x5c>
 8004b14:	693b      	ldr	r3, [r7, #16]
 8004b16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b18:	4a16      	ldr	r2, [pc, #88]	; (8004b74 <xTaskRemoveFromEventList+0xb4>)
 8004b1a:	6013      	str	r3, [r2, #0]
 8004b1c:	693b      	ldr	r3, [r7, #16]
 8004b1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b20:	4613      	mov	r3, r2
 8004b22:	009b      	lsls	r3, r3, #2
 8004b24:	4413      	add	r3, r2
 8004b26:	009b      	lsls	r3, r3, #2
 8004b28:	4a13      	ldr	r2, [pc, #76]	; (8004b78 <xTaskRemoveFromEventList+0xb8>)
 8004b2a:	441a      	add	r2, r3
 8004b2c:	693b      	ldr	r3, [r7, #16]
 8004b2e:	3304      	adds	r3, #4
 8004b30:	4619      	mov	r1, r3
 8004b32:	4610      	mov	r0, r2
 8004b34:	f7fe fcf3 	bl	800351e <vListInsertEnd>
 8004b38:	e005      	b.n	8004b46 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004b3a:	693b      	ldr	r3, [r7, #16]
 8004b3c:	3318      	adds	r3, #24
 8004b3e:	4619      	mov	r1, r3
 8004b40:	480e      	ldr	r0, [pc, #56]	; (8004b7c <xTaskRemoveFromEventList+0xbc>)
 8004b42:	f7fe fcec 	bl	800351e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004b46:	693b      	ldr	r3, [r7, #16]
 8004b48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b4a:	4b0d      	ldr	r3, [pc, #52]	; (8004b80 <xTaskRemoveFromEventList+0xc0>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b50:	429a      	cmp	r2, r3
 8004b52:	d905      	bls.n	8004b60 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004b54:	2301      	movs	r3, #1
 8004b56:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004b58:	4b0a      	ldr	r3, [pc, #40]	; (8004b84 <xTaskRemoveFromEventList+0xc4>)
 8004b5a:	2201      	movs	r2, #1
 8004b5c:	601a      	str	r2, [r3, #0]
 8004b5e:	e001      	b.n	8004b64 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8004b60:	2300      	movs	r3, #0
 8004b62:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004b64:	697b      	ldr	r3, [r7, #20]
}
 8004b66:	4618      	mov	r0, r3
 8004b68:	3718      	adds	r7, #24
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	bd80      	pop	{r7, pc}
 8004b6e:	bf00      	nop
 8004b70:	20000f30 	.word	0x20000f30
 8004b74:	20000f10 	.word	0x20000f10
 8004b78:	20000a38 	.word	0x20000a38
 8004b7c:	20000ec8 	.word	0x20000ec8
 8004b80:	20000a34 	.word	0x20000a34
 8004b84:	20000f1c 	.word	0x20000f1c

08004b88 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004b88:	b480      	push	{r7}
 8004b8a:	b083      	sub	sp, #12
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004b90:	4b06      	ldr	r3, [pc, #24]	; (8004bac <vTaskInternalSetTimeOutState+0x24>)
 8004b92:	681a      	ldr	r2, [r3, #0]
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004b98:	4b05      	ldr	r3, [pc, #20]	; (8004bb0 <vTaskInternalSetTimeOutState+0x28>)
 8004b9a:	681a      	ldr	r2, [r3, #0]
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	605a      	str	r2, [r3, #4]
}
 8004ba0:	bf00      	nop
 8004ba2:	370c      	adds	r7, #12
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004baa:	4770      	bx	lr
 8004bac:	20000f20 	.word	0x20000f20
 8004bb0:	20000f0c 	.word	0x20000f0c

08004bb4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	b088      	sub	sp, #32
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
 8004bbc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d10a      	bne.n	8004bda <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8004bc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bc8:	f383 8811 	msr	BASEPRI, r3
 8004bcc:	f3bf 8f6f 	isb	sy
 8004bd0:	f3bf 8f4f 	dsb	sy
 8004bd4:	613b      	str	r3, [r7, #16]
}
 8004bd6:	bf00      	nop
 8004bd8:	e7fe      	b.n	8004bd8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004bda:	683b      	ldr	r3, [r7, #0]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d10a      	bne.n	8004bf6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8004be0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004be4:	f383 8811 	msr	BASEPRI, r3
 8004be8:	f3bf 8f6f 	isb	sy
 8004bec:	f3bf 8f4f 	dsb	sy
 8004bf0:	60fb      	str	r3, [r7, #12]
}
 8004bf2:	bf00      	nop
 8004bf4:	e7fe      	b.n	8004bf4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8004bf6:	f000 fe7d 	bl	80058f4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004bfa:	4b1d      	ldr	r3, [pc, #116]	; (8004c70 <xTaskCheckForTimeOut+0xbc>)
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	685b      	ldr	r3, [r3, #4]
 8004c04:	69ba      	ldr	r2, [r7, #24]
 8004c06:	1ad3      	subs	r3, r2, r3
 8004c08:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c12:	d102      	bne.n	8004c1a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004c14:	2300      	movs	r3, #0
 8004c16:	61fb      	str	r3, [r7, #28]
 8004c18:	e023      	b.n	8004c62 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681a      	ldr	r2, [r3, #0]
 8004c1e:	4b15      	ldr	r3, [pc, #84]	; (8004c74 <xTaskCheckForTimeOut+0xc0>)
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	429a      	cmp	r2, r3
 8004c24:	d007      	beq.n	8004c36 <xTaskCheckForTimeOut+0x82>
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	685b      	ldr	r3, [r3, #4]
 8004c2a:	69ba      	ldr	r2, [r7, #24]
 8004c2c:	429a      	cmp	r2, r3
 8004c2e:	d302      	bcc.n	8004c36 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004c30:	2301      	movs	r3, #1
 8004c32:	61fb      	str	r3, [r7, #28]
 8004c34:	e015      	b.n	8004c62 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	697a      	ldr	r2, [r7, #20]
 8004c3c:	429a      	cmp	r2, r3
 8004c3e:	d20b      	bcs.n	8004c58 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	681a      	ldr	r2, [r3, #0]
 8004c44:	697b      	ldr	r3, [r7, #20]
 8004c46:	1ad2      	subs	r2, r2, r3
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004c4c:	6878      	ldr	r0, [r7, #4]
 8004c4e:	f7ff ff9b 	bl	8004b88 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004c52:	2300      	movs	r3, #0
 8004c54:	61fb      	str	r3, [r7, #28]
 8004c56:	e004      	b.n	8004c62 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004c5e:	2301      	movs	r3, #1
 8004c60:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004c62:	f000 fe77 	bl	8005954 <vPortExitCritical>

	return xReturn;
 8004c66:	69fb      	ldr	r3, [r7, #28]
}
 8004c68:	4618      	mov	r0, r3
 8004c6a:	3720      	adds	r7, #32
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	bd80      	pop	{r7, pc}
 8004c70:	20000f0c 	.word	0x20000f0c
 8004c74:	20000f20 	.word	0x20000f20

08004c78 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004c78:	b480      	push	{r7}
 8004c7a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004c7c:	4b03      	ldr	r3, [pc, #12]	; (8004c8c <vTaskMissedYield+0x14>)
 8004c7e:	2201      	movs	r2, #1
 8004c80:	601a      	str	r2, [r3, #0]
}
 8004c82:	bf00      	nop
 8004c84:	46bd      	mov	sp, r7
 8004c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8a:	4770      	bx	lr
 8004c8c:	20000f1c 	.word	0x20000f1c

08004c90 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b082      	sub	sp, #8
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004c98:	f000 f852 	bl	8004d40 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004c9c:	4b06      	ldr	r3, [pc, #24]	; (8004cb8 <prvIdleTask+0x28>)
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	2b01      	cmp	r3, #1
 8004ca2:	d9f9      	bls.n	8004c98 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004ca4:	4b05      	ldr	r3, [pc, #20]	; (8004cbc <prvIdleTask+0x2c>)
 8004ca6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004caa:	601a      	str	r2, [r3, #0]
 8004cac:	f3bf 8f4f 	dsb	sy
 8004cb0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004cb4:	e7f0      	b.n	8004c98 <prvIdleTask+0x8>
 8004cb6:	bf00      	nop
 8004cb8:	20000a38 	.word	0x20000a38
 8004cbc:	e000ed04 	.word	0xe000ed04

08004cc0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b082      	sub	sp, #8
 8004cc4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	607b      	str	r3, [r7, #4]
 8004cca:	e00c      	b.n	8004ce6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004ccc:	687a      	ldr	r2, [r7, #4]
 8004cce:	4613      	mov	r3, r2
 8004cd0:	009b      	lsls	r3, r3, #2
 8004cd2:	4413      	add	r3, r2
 8004cd4:	009b      	lsls	r3, r3, #2
 8004cd6:	4a12      	ldr	r2, [pc, #72]	; (8004d20 <prvInitialiseTaskLists+0x60>)
 8004cd8:	4413      	add	r3, r2
 8004cda:	4618      	mov	r0, r3
 8004cdc:	f7fe fbf2 	bl	80034c4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	3301      	adds	r3, #1
 8004ce4:	607b      	str	r3, [r7, #4]
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	2b37      	cmp	r3, #55	; 0x37
 8004cea:	d9ef      	bls.n	8004ccc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004cec:	480d      	ldr	r0, [pc, #52]	; (8004d24 <prvInitialiseTaskLists+0x64>)
 8004cee:	f7fe fbe9 	bl	80034c4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004cf2:	480d      	ldr	r0, [pc, #52]	; (8004d28 <prvInitialiseTaskLists+0x68>)
 8004cf4:	f7fe fbe6 	bl	80034c4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004cf8:	480c      	ldr	r0, [pc, #48]	; (8004d2c <prvInitialiseTaskLists+0x6c>)
 8004cfa:	f7fe fbe3 	bl	80034c4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004cfe:	480c      	ldr	r0, [pc, #48]	; (8004d30 <prvInitialiseTaskLists+0x70>)
 8004d00:	f7fe fbe0 	bl	80034c4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004d04:	480b      	ldr	r0, [pc, #44]	; (8004d34 <prvInitialiseTaskLists+0x74>)
 8004d06:	f7fe fbdd 	bl	80034c4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004d0a:	4b0b      	ldr	r3, [pc, #44]	; (8004d38 <prvInitialiseTaskLists+0x78>)
 8004d0c:	4a05      	ldr	r2, [pc, #20]	; (8004d24 <prvInitialiseTaskLists+0x64>)
 8004d0e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004d10:	4b0a      	ldr	r3, [pc, #40]	; (8004d3c <prvInitialiseTaskLists+0x7c>)
 8004d12:	4a05      	ldr	r2, [pc, #20]	; (8004d28 <prvInitialiseTaskLists+0x68>)
 8004d14:	601a      	str	r2, [r3, #0]
}
 8004d16:	bf00      	nop
 8004d18:	3708      	adds	r7, #8
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	bd80      	pop	{r7, pc}
 8004d1e:	bf00      	nop
 8004d20:	20000a38 	.word	0x20000a38
 8004d24:	20000e98 	.word	0x20000e98
 8004d28:	20000eac 	.word	0x20000eac
 8004d2c:	20000ec8 	.word	0x20000ec8
 8004d30:	20000edc 	.word	0x20000edc
 8004d34:	20000ef4 	.word	0x20000ef4
 8004d38:	20000ec0 	.word	0x20000ec0
 8004d3c:	20000ec4 	.word	0x20000ec4

08004d40 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004d40:	b580      	push	{r7, lr}
 8004d42:	b082      	sub	sp, #8
 8004d44:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004d46:	e019      	b.n	8004d7c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004d48:	f000 fdd4 	bl	80058f4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004d4c:	4b10      	ldr	r3, [pc, #64]	; (8004d90 <prvCheckTasksWaitingTermination+0x50>)
 8004d4e:	68db      	ldr	r3, [r3, #12]
 8004d50:	68db      	ldr	r3, [r3, #12]
 8004d52:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	3304      	adds	r3, #4
 8004d58:	4618      	mov	r0, r3
 8004d5a:	f7fe fc3d 	bl	80035d8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004d5e:	4b0d      	ldr	r3, [pc, #52]	; (8004d94 <prvCheckTasksWaitingTermination+0x54>)
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	3b01      	subs	r3, #1
 8004d64:	4a0b      	ldr	r2, [pc, #44]	; (8004d94 <prvCheckTasksWaitingTermination+0x54>)
 8004d66:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004d68:	4b0b      	ldr	r3, [pc, #44]	; (8004d98 <prvCheckTasksWaitingTermination+0x58>)
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	3b01      	subs	r3, #1
 8004d6e:	4a0a      	ldr	r2, [pc, #40]	; (8004d98 <prvCheckTasksWaitingTermination+0x58>)
 8004d70:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004d72:	f000 fdef 	bl	8005954 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004d76:	6878      	ldr	r0, [r7, #4]
 8004d78:	f000 f810 	bl	8004d9c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004d7c:	4b06      	ldr	r3, [pc, #24]	; (8004d98 <prvCheckTasksWaitingTermination+0x58>)
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d1e1      	bne.n	8004d48 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004d84:	bf00      	nop
 8004d86:	bf00      	nop
 8004d88:	3708      	adds	r7, #8
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	bd80      	pop	{r7, pc}
 8004d8e:	bf00      	nop
 8004d90:	20000edc 	.word	0x20000edc
 8004d94:	20000f08 	.word	0x20000f08
 8004d98:	20000ef0 	.word	0x20000ef0

08004d9c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b084      	sub	sp, #16
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	3354      	adds	r3, #84	; 0x54
 8004da8:	4618      	mov	r0, r3
 8004daa:	f001 fb2b 	bl	8006404 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d108      	bne.n	8004dca <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	f000 ff87 	bl	8005cd0 <vPortFree>
				vPortFree( pxTCB );
 8004dc2:	6878      	ldr	r0, [r7, #4]
 8004dc4:	f000 ff84 	bl	8005cd0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004dc8:	e018      	b.n	8004dfc <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8004dd0:	2b01      	cmp	r3, #1
 8004dd2:	d103      	bne.n	8004ddc <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8004dd4:	6878      	ldr	r0, [r7, #4]
 8004dd6:	f000 ff7b 	bl	8005cd0 <vPortFree>
	}
 8004dda:	e00f      	b.n	8004dfc <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8004de2:	2b02      	cmp	r3, #2
 8004de4:	d00a      	beq.n	8004dfc <prvDeleteTCB+0x60>
	__asm volatile
 8004de6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dea:	f383 8811 	msr	BASEPRI, r3
 8004dee:	f3bf 8f6f 	isb	sy
 8004df2:	f3bf 8f4f 	dsb	sy
 8004df6:	60fb      	str	r3, [r7, #12]
}
 8004df8:	bf00      	nop
 8004dfa:	e7fe      	b.n	8004dfa <prvDeleteTCB+0x5e>
	}
 8004dfc:	bf00      	nop
 8004dfe:	3710      	adds	r7, #16
 8004e00:	46bd      	mov	sp, r7
 8004e02:	bd80      	pop	{r7, pc}

08004e04 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004e04:	b480      	push	{r7}
 8004e06:	b083      	sub	sp, #12
 8004e08:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004e0a:	4b0c      	ldr	r3, [pc, #48]	; (8004e3c <prvResetNextTaskUnblockTime+0x38>)
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d104      	bne.n	8004e1e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004e14:	4b0a      	ldr	r3, [pc, #40]	; (8004e40 <prvResetNextTaskUnblockTime+0x3c>)
 8004e16:	f04f 32ff 	mov.w	r2, #4294967295
 8004e1a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004e1c:	e008      	b.n	8004e30 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004e1e:	4b07      	ldr	r3, [pc, #28]	; (8004e3c <prvResetNextTaskUnblockTime+0x38>)
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	68db      	ldr	r3, [r3, #12]
 8004e24:	68db      	ldr	r3, [r3, #12]
 8004e26:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	685b      	ldr	r3, [r3, #4]
 8004e2c:	4a04      	ldr	r2, [pc, #16]	; (8004e40 <prvResetNextTaskUnblockTime+0x3c>)
 8004e2e:	6013      	str	r3, [r2, #0]
}
 8004e30:	bf00      	nop
 8004e32:	370c      	adds	r7, #12
 8004e34:	46bd      	mov	sp, r7
 8004e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3a:	4770      	bx	lr
 8004e3c:	20000ec0 	.word	0x20000ec0
 8004e40:	20000f28 	.word	0x20000f28

08004e44 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004e44:	b480      	push	{r7}
 8004e46:	b083      	sub	sp, #12
 8004e48:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004e4a:	4b0b      	ldr	r3, [pc, #44]	; (8004e78 <xTaskGetSchedulerState+0x34>)
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d102      	bne.n	8004e58 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004e52:	2301      	movs	r3, #1
 8004e54:	607b      	str	r3, [r7, #4]
 8004e56:	e008      	b.n	8004e6a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004e58:	4b08      	ldr	r3, [pc, #32]	; (8004e7c <xTaskGetSchedulerState+0x38>)
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d102      	bne.n	8004e66 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004e60:	2302      	movs	r3, #2
 8004e62:	607b      	str	r3, [r7, #4]
 8004e64:	e001      	b.n	8004e6a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004e66:	2300      	movs	r3, #0
 8004e68:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004e6a:	687b      	ldr	r3, [r7, #4]
	}
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	370c      	adds	r7, #12
 8004e70:	46bd      	mov	sp, r7
 8004e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e76:	4770      	bx	lr
 8004e78:	20000f14 	.word	0x20000f14
 8004e7c:	20000f30 	.word	0x20000f30

08004e80 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b086      	sub	sp, #24
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004e8c:	2300      	movs	r3, #0
 8004e8e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d056      	beq.n	8004f44 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004e96:	4b2e      	ldr	r3, [pc, #184]	; (8004f50 <xTaskPriorityDisinherit+0xd0>)
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	693a      	ldr	r2, [r7, #16]
 8004e9c:	429a      	cmp	r2, r3
 8004e9e:	d00a      	beq.n	8004eb6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8004ea0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ea4:	f383 8811 	msr	BASEPRI, r3
 8004ea8:	f3bf 8f6f 	isb	sy
 8004eac:	f3bf 8f4f 	dsb	sy
 8004eb0:	60fb      	str	r3, [r7, #12]
}
 8004eb2:	bf00      	nop
 8004eb4:	e7fe      	b.n	8004eb4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004eb6:	693b      	ldr	r3, [r7, #16]
 8004eb8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d10a      	bne.n	8004ed4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8004ebe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ec2:	f383 8811 	msr	BASEPRI, r3
 8004ec6:	f3bf 8f6f 	isb	sy
 8004eca:	f3bf 8f4f 	dsb	sy
 8004ece:	60bb      	str	r3, [r7, #8]
}
 8004ed0:	bf00      	nop
 8004ed2:	e7fe      	b.n	8004ed2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8004ed4:	693b      	ldr	r3, [r7, #16]
 8004ed6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ed8:	1e5a      	subs	r2, r3, #1
 8004eda:	693b      	ldr	r3, [r7, #16]
 8004edc:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004ede:	693b      	ldr	r3, [r7, #16]
 8004ee0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ee2:	693b      	ldr	r3, [r7, #16]
 8004ee4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ee6:	429a      	cmp	r2, r3
 8004ee8:	d02c      	beq.n	8004f44 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004eea:	693b      	ldr	r3, [r7, #16]
 8004eec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d128      	bne.n	8004f44 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004ef2:	693b      	ldr	r3, [r7, #16]
 8004ef4:	3304      	adds	r3, #4
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	f7fe fb6e 	bl	80035d8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004efc:	693b      	ldr	r3, [r7, #16]
 8004efe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004f00:	693b      	ldr	r3, [r7, #16]
 8004f02:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004f04:	693b      	ldr	r3, [r7, #16]
 8004f06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f08:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004f0c:	693b      	ldr	r3, [r7, #16]
 8004f0e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004f10:	693b      	ldr	r3, [r7, #16]
 8004f12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f14:	4b0f      	ldr	r3, [pc, #60]	; (8004f54 <xTaskPriorityDisinherit+0xd4>)
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	429a      	cmp	r2, r3
 8004f1a:	d903      	bls.n	8004f24 <xTaskPriorityDisinherit+0xa4>
 8004f1c:	693b      	ldr	r3, [r7, #16]
 8004f1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f20:	4a0c      	ldr	r2, [pc, #48]	; (8004f54 <xTaskPriorityDisinherit+0xd4>)
 8004f22:	6013      	str	r3, [r2, #0]
 8004f24:	693b      	ldr	r3, [r7, #16]
 8004f26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f28:	4613      	mov	r3, r2
 8004f2a:	009b      	lsls	r3, r3, #2
 8004f2c:	4413      	add	r3, r2
 8004f2e:	009b      	lsls	r3, r3, #2
 8004f30:	4a09      	ldr	r2, [pc, #36]	; (8004f58 <xTaskPriorityDisinherit+0xd8>)
 8004f32:	441a      	add	r2, r3
 8004f34:	693b      	ldr	r3, [r7, #16]
 8004f36:	3304      	adds	r3, #4
 8004f38:	4619      	mov	r1, r3
 8004f3a:	4610      	mov	r0, r2
 8004f3c:	f7fe faef 	bl	800351e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004f40:	2301      	movs	r3, #1
 8004f42:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004f44:	697b      	ldr	r3, [r7, #20]
	}
 8004f46:	4618      	mov	r0, r3
 8004f48:	3718      	adds	r7, #24
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	bd80      	pop	{r7, pc}
 8004f4e:	bf00      	nop
 8004f50:	20000a34 	.word	0x20000a34
 8004f54:	20000f10 	.word	0x20000f10
 8004f58:	20000a38 	.word	0x20000a38

08004f5c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	b084      	sub	sp, #16
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]
 8004f64:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004f66:	4b21      	ldr	r3, [pc, #132]	; (8004fec <prvAddCurrentTaskToDelayedList+0x90>)
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004f6c:	4b20      	ldr	r3, [pc, #128]	; (8004ff0 <prvAddCurrentTaskToDelayedList+0x94>)
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	3304      	adds	r3, #4
 8004f72:	4618      	mov	r0, r3
 8004f74:	f7fe fb30 	bl	80035d8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f7e:	d10a      	bne.n	8004f96 <prvAddCurrentTaskToDelayedList+0x3a>
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d007      	beq.n	8004f96 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004f86:	4b1a      	ldr	r3, [pc, #104]	; (8004ff0 <prvAddCurrentTaskToDelayedList+0x94>)
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	3304      	adds	r3, #4
 8004f8c:	4619      	mov	r1, r3
 8004f8e:	4819      	ldr	r0, [pc, #100]	; (8004ff4 <prvAddCurrentTaskToDelayedList+0x98>)
 8004f90:	f7fe fac5 	bl	800351e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004f94:	e026      	b.n	8004fe4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004f96:	68fa      	ldr	r2, [r7, #12]
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	4413      	add	r3, r2
 8004f9c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004f9e:	4b14      	ldr	r3, [pc, #80]	; (8004ff0 <prvAddCurrentTaskToDelayedList+0x94>)
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	68ba      	ldr	r2, [r7, #8]
 8004fa4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004fa6:	68ba      	ldr	r2, [r7, #8]
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	429a      	cmp	r2, r3
 8004fac:	d209      	bcs.n	8004fc2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004fae:	4b12      	ldr	r3, [pc, #72]	; (8004ff8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8004fb0:	681a      	ldr	r2, [r3, #0]
 8004fb2:	4b0f      	ldr	r3, [pc, #60]	; (8004ff0 <prvAddCurrentTaskToDelayedList+0x94>)
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	3304      	adds	r3, #4
 8004fb8:	4619      	mov	r1, r3
 8004fba:	4610      	mov	r0, r2
 8004fbc:	f7fe fad3 	bl	8003566 <vListInsert>
}
 8004fc0:	e010      	b.n	8004fe4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004fc2:	4b0e      	ldr	r3, [pc, #56]	; (8004ffc <prvAddCurrentTaskToDelayedList+0xa0>)
 8004fc4:	681a      	ldr	r2, [r3, #0]
 8004fc6:	4b0a      	ldr	r3, [pc, #40]	; (8004ff0 <prvAddCurrentTaskToDelayedList+0x94>)
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	3304      	adds	r3, #4
 8004fcc:	4619      	mov	r1, r3
 8004fce:	4610      	mov	r0, r2
 8004fd0:	f7fe fac9 	bl	8003566 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004fd4:	4b0a      	ldr	r3, [pc, #40]	; (8005000 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	68ba      	ldr	r2, [r7, #8]
 8004fda:	429a      	cmp	r2, r3
 8004fdc:	d202      	bcs.n	8004fe4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004fde:	4a08      	ldr	r2, [pc, #32]	; (8005000 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004fe0:	68bb      	ldr	r3, [r7, #8]
 8004fe2:	6013      	str	r3, [r2, #0]
}
 8004fe4:	bf00      	nop
 8004fe6:	3710      	adds	r7, #16
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	bd80      	pop	{r7, pc}
 8004fec:	20000f0c 	.word	0x20000f0c
 8004ff0:	20000a34 	.word	0x20000a34
 8004ff4:	20000ef4 	.word	0x20000ef4
 8004ff8:	20000ec4 	.word	0x20000ec4
 8004ffc:	20000ec0 	.word	0x20000ec0
 8005000:	20000f28 	.word	0x20000f28

08005004 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005004:	b580      	push	{r7, lr}
 8005006:	b08a      	sub	sp, #40	; 0x28
 8005008:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800500a:	2300      	movs	r3, #0
 800500c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800500e:	f000 fb07 	bl	8005620 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005012:	4b1c      	ldr	r3, [pc, #112]	; (8005084 <xTimerCreateTimerTask+0x80>)
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	2b00      	cmp	r3, #0
 8005018:	d021      	beq.n	800505e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800501a:	2300      	movs	r3, #0
 800501c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800501e:	2300      	movs	r3, #0
 8005020:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005022:	1d3a      	adds	r2, r7, #4
 8005024:	f107 0108 	add.w	r1, r7, #8
 8005028:	f107 030c 	add.w	r3, r7, #12
 800502c:	4618      	mov	r0, r3
 800502e:	f7fe fa2f 	bl	8003490 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005032:	6879      	ldr	r1, [r7, #4]
 8005034:	68bb      	ldr	r3, [r7, #8]
 8005036:	68fa      	ldr	r2, [r7, #12]
 8005038:	9202      	str	r2, [sp, #8]
 800503a:	9301      	str	r3, [sp, #4]
 800503c:	2302      	movs	r3, #2
 800503e:	9300      	str	r3, [sp, #0]
 8005040:	2300      	movs	r3, #0
 8005042:	460a      	mov	r2, r1
 8005044:	4910      	ldr	r1, [pc, #64]	; (8005088 <xTimerCreateTimerTask+0x84>)
 8005046:	4811      	ldr	r0, [pc, #68]	; (800508c <xTimerCreateTimerTask+0x88>)
 8005048:	f7fe ffdc 	bl	8004004 <xTaskCreateStatic>
 800504c:	4603      	mov	r3, r0
 800504e:	4a10      	ldr	r2, [pc, #64]	; (8005090 <xTimerCreateTimerTask+0x8c>)
 8005050:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005052:	4b0f      	ldr	r3, [pc, #60]	; (8005090 <xTimerCreateTimerTask+0x8c>)
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d001      	beq.n	800505e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800505a:	2301      	movs	r3, #1
 800505c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800505e:	697b      	ldr	r3, [r7, #20]
 8005060:	2b00      	cmp	r3, #0
 8005062:	d10a      	bne.n	800507a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8005064:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005068:	f383 8811 	msr	BASEPRI, r3
 800506c:	f3bf 8f6f 	isb	sy
 8005070:	f3bf 8f4f 	dsb	sy
 8005074:	613b      	str	r3, [r7, #16]
}
 8005076:	bf00      	nop
 8005078:	e7fe      	b.n	8005078 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800507a:	697b      	ldr	r3, [r7, #20]
}
 800507c:	4618      	mov	r0, r3
 800507e:	3718      	adds	r7, #24
 8005080:	46bd      	mov	sp, r7
 8005082:	bd80      	pop	{r7, pc}
 8005084:	20000f64 	.word	0x20000f64
 8005088:	080065cc 	.word	0x080065cc
 800508c:	080051c9 	.word	0x080051c9
 8005090:	20000f68 	.word	0x20000f68

08005094 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005094:	b580      	push	{r7, lr}
 8005096:	b08a      	sub	sp, #40	; 0x28
 8005098:	af00      	add	r7, sp, #0
 800509a:	60f8      	str	r0, [r7, #12]
 800509c:	60b9      	str	r1, [r7, #8]
 800509e:	607a      	str	r2, [r7, #4]
 80050a0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80050a2:	2300      	movs	r3, #0
 80050a4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d10a      	bne.n	80050c2 <xTimerGenericCommand+0x2e>
	__asm volatile
 80050ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050b0:	f383 8811 	msr	BASEPRI, r3
 80050b4:	f3bf 8f6f 	isb	sy
 80050b8:	f3bf 8f4f 	dsb	sy
 80050bc:	623b      	str	r3, [r7, #32]
}
 80050be:	bf00      	nop
 80050c0:	e7fe      	b.n	80050c0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80050c2:	4b1a      	ldr	r3, [pc, #104]	; (800512c <xTimerGenericCommand+0x98>)
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d02a      	beq.n	8005120 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80050ca:	68bb      	ldr	r3, [r7, #8]
 80050cc:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80050d6:	68bb      	ldr	r3, [r7, #8]
 80050d8:	2b05      	cmp	r3, #5
 80050da:	dc18      	bgt.n	800510e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80050dc:	f7ff feb2 	bl	8004e44 <xTaskGetSchedulerState>
 80050e0:	4603      	mov	r3, r0
 80050e2:	2b02      	cmp	r3, #2
 80050e4:	d109      	bne.n	80050fa <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80050e6:	4b11      	ldr	r3, [pc, #68]	; (800512c <xTimerGenericCommand+0x98>)
 80050e8:	6818      	ldr	r0, [r3, #0]
 80050ea:	f107 0110 	add.w	r1, r7, #16
 80050ee:	2300      	movs	r3, #0
 80050f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80050f2:	f7fe fb9f 	bl	8003834 <xQueueGenericSend>
 80050f6:	6278      	str	r0, [r7, #36]	; 0x24
 80050f8:	e012      	b.n	8005120 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80050fa:	4b0c      	ldr	r3, [pc, #48]	; (800512c <xTimerGenericCommand+0x98>)
 80050fc:	6818      	ldr	r0, [r3, #0]
 80050fe:	f107 0110 	add.w	r1, r7, #16
 8005102:	2300      	movs	r3, #0
 8005104:	2200      	movs	r2, #0
 8005106:	f7fe fb95 	bl	8003834 <xQueueGenericSend>
 800510a:	6278      	str	r0, [r7, #36]	; 0x24
 800510c:	e008      	b.n	8005120 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800510e:	4b07      	ldr	r3, [pc, #28]	; (800512c <xTimerGenericCommand+0x98>)
 8005110:	6818      	ldr	r0, [r3, #0]
 8005112:	f107 0110 	add.w	r1, r7, #16
 8005116:	2300      	movs	r3, #0
 8005118:	683a      	ldr	r2, [r7, #0]
 800511a:	f7fe fc89 	bl	8003a30 <xQueueGenericSendFromISR>
 800511e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005122:	4618      	mov	r0, r3
 8005124:	3728      	adds	r7, #40	; 0x28
 8005126:	46bd      	mov	sp, r7
 8005128:	bd80      	pop	{r7, pc}
 800512a:	bf00      	nop
 800512c:	20000f64 	.word	0x20000f64

08005130 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005130:	b580      	push	{r7, lr}
 8005132:	b088      	sub	sp, #32
 8005134:	af02      	add	r7, sp, #8
 8005136:	6078      	str	r0, [r7, #4]
 8005138:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800513a:	4b22      	ldr	r3, [pc, #136]	; (80051c4 <prvProcessExpiredTimer+0x94>)
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	68db      	ldr	r3, [r3, #12]
 8005140:	68db      	ldr	r3, [r3, #12]
 8005142:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005144:	697b      	ldr	r3, [r7, #20]
 8005146:	3304      	adds	r3, #4
 8005148:	4618      	mov	r0, r3
 800514a:	f7fe fa45 	bl	80035d8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800514e:	697b      	ldr	r3, [r7, #20]
 8005150:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005154:	f003 0304 	and.w	r3, r3, #4
 8005158:	2b00      	cmp	r3, #0
 800515a:	d022      	beq.n	80051a2 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800515c:	697b      	ldr	r3, [r7, #20]
 800515e:	699a      	ldr	r2, [r3, #24]
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	18d1      	adds	r1, r2, r3
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	683a      	ldr	r2, [r7, #0]
 8005168:	6978      	ldr	r0, [r7, #20]
 800516a:	f000 f8d1 	bl	8005310 <prvInsertTimerInActiveList>
 800516e:	4603      	mov	r3, r0
 8005170:	2b00      	cmp	r3, #0
 8005172:	d01f      	beq.n	80051b4 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005174:	2300      	movs	r3, #0
 8005176:	9300      	str	r3, [sp, #0]
 8005178:	2300      	movs	r3, #0
 800517a:	687a      	ldr	r2, [r7, #4]
 800517c:	2100      	movs	r1, #0
 800517e:	6978      	ldr	r0, [r7, #20]
 8005180:	f7ff ff88 	bl	8005094 <xTimerGenericCommand>
 8005184:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005186:	693b      	ldr	r3, [r7, #16]
 8005188:	2b00      	cmp	r3, #0
 800518a:	d113      	bne.n	80051b4 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800518c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005190:	f383 8811 	msr	BASEPRI, r3
 8005194:	f3bf 8f6f 	isb	sy
 8005198:	f3bf 8f4f 	dsb	sy
 800519c:	60fb      	str	r3, [r7, #12]
}
 800519e:	bf00      	nop
 80051a0:	e7fe      	b.n	80051a0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80051a2:	697b      	ldr	r3, [r7, #20]
 80051a4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80051a8:	f023 0301 	bic.w	r3, r3, #1
 80051ac:	b2da      	uxtb	r2, r3
 80051ae:	697b      	ldr	r3, [r7, #20]
 80051b0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80051b4:	697b      	ldr	r3, [r7, #20]
 80051b6:	6a1b      	ldr	r3, [r3, #32]
 80051b8:	6978      	ldr	r0, [r7, #20]
 80051ba:	4798      	blx	r3
}
 80051bc:	bf00      	nop
 80051be:	3718      	adds	r7, #24
 80051c0:	46bd      	mov	sp, r7
 80051c2:	bd80      	pop	{r7, pc}
 80051c4:	20000f5c 	.word	0x20000f5c

080051c8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80051c8:	b580      	push	{r7, lr}
 80051ca:	b084      	sub	sp, #16
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80051d0:	f107 0308 	add.w	r3, r7, #8
 80051d4:	4618      	mov	r0, r3
 80051d6:	f000 f857 	bl	8005288 <prvGetNextExpireTime>
 80051da:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80051dc:	68bb      	ldr	r3, [r7, #8]
 80051de:	4619      	mov	r1, r3
 80051e0:	68f8      	ldr	r0, [r7, #12]
 80051e2:	f000 f803 	bl	80051ec <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80051e6:	f000 f8d5 	bl	8005394 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80051ea:	e7f1      	b.n	80051d0 <prvTimerTask+0x8>

080051ec <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80051ec:	b580      	push	{r7, lr}
 80051ee:	b084      	sub	sp, #16
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
 80051f4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80051f6:	f7ff fa39 	bl	800466c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80051fa:	f107 0308 	add.w	r3, r7, #8
 80051fe:	4618      	mov	r0, r3
 8005200:	f000 f866 	bl	80052d0 <prvSampleTimeNow>
 8005204:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005206:	68bb      	ldr	r3, [r7, #8]
 8005208:	2b00      	cmp	r3, #0
 800520a:	d130      	bne.n	800526e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800520c:	683b      	ldr	r3, [r7, #0]
 800520e:	2b00      	cmp	r3, #0
 8005210:	d10a      	bne.n	8005228 <prvProcessTimerOrBlockTask+0x3c>
 8005212:	687a      	ldr	r2, [r7, #4]
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	429a      	cmp	r2, r3
 8005218:	d806      	bhi.n	8005228 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800521a:	f7ff fa35 	bl	8004688 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800521e:	68f9      	ldr	r1, [r7, #12]
 8005220:	6878      	ldr	r0, [r7, #4]
 8005222:	f7ff ff85 	bl	8005130 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005226:	e024      	b.n	8005272 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	2b00      	cmp	r3, #0
 800522c:	d008      	beq.n	8005240 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800522e:	4b13      	ldr	r3, [pc, #76]	; (800527c <prvProcessTimerOrBlockTask+0x90>)
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d101      	bne.n	800523c <prvProcessTimerOrBlockTask+0x50>
 8005238:	2301      	movs	r3, #1
 800523a:	e000      	b.n	800523e <prvProcessTimerOrBlockTask+0x52>
 800523c:	2300      	movs	r3, #0
 800523e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005240:	4b0f      	ldr	r3, [pc, #60]	; (8005280 <prvProcessTimerOrBlockTask+0x94>)
 8005242:	6818      	ldr	r0, [r3, #0]
 8005244:	687a      	ldr	r2, [r7, #4]
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	1ad3      	subs	r3, r2, r3
 800524a:	683a      	ldr	r2, [r7, #0]
 800524c:	4619      	mov	r1, r3
 800524e:	f7fe fea5 	bl	8003f9c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005252:	f7ff fa19 	bl	8004688 <xTaskResumeAll>
 8005256:	4603      	mov	r3, r0
 8005258:	2b00      	cmp	r3, #0
 800525a:	d10a      	bne.n	8005272 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800525c:	4b09      	ldr	r3, [pc, #36]	; (8005284 <prvProcessTimerOrBlockTask+0x98>)
 800525e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005262:	601a      	str	r2, [r3, #0]
 8005264:	f3bf 8f4f 	dsb	sy
 8005268:	f3bf 8f6f 	isb	sy
}
 800526c:	e001      	b.n	8005272 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800526e:	f7ff fa0b 	bl	8004688 <xTaskResumeAll>
}
 8005272:	bf00      	nop
 8005274:	3710      	adds	r7, #16
 8005276:	46bd      	mov	sp, r7
 8005278:	bd80      	pop	{r7, pc}
 800527a:	bf00      	nop
 800527c:	20000f60 	.word	0x20000f60
 8005280:	20000f64 	.word	0x20000f64
 8005284:	e000ed04 	.word	0xe000ed04

08005288 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005288:	b480      	push	{r7}
 800528a:	b085      	sub	sp, #20
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005290:	4b0e      	ldr	r3, [pc, #56]	; (80052cc <prvGetNextExpireTime+0x44>)
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	2b00      	cmp	r3, #0
 8005298:	d101      	bne.n	800529e <prvGetNextExpireTime+0x16>
 800529a:	2201      	movs	r2, #1
 800529c:	e000      	b.n	80052a0 <prvGetNextExpireTime+0x18>
 800529e:	2200      	movs	r2, #0
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d105      	bne.n	80052b8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80052ac:	4b07      	ldr	r3, [pc, #28]	; (80052cc <prvGetNextExpireTime+0x44>)
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	68db      	ldr	r3, [r3, #12]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	60fb      	str	r3, [r7, #12]
 80052b6:	e001      	b.n	80052bc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80052b8:	2300      	movs	r3, #0
 80052ba:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80052bc:	68fb      	ldr	r3, [r7, #12]
}
 80052be:	4618      	mov	r0, r3
 80052c0:	3714      	adds	r7, #20
 80052c2:	46bd      	mov	sp, r7
 80052c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c8:	4770      	bx	lr
 80052ca:	bf00      	nop
 80052cc:	20000f5c 	.word	0x20000f5c

080052d0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80052d0:	b580      	push	{r7, lr}
 80052d2:	b084      	sub	sp, #16
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80052d8:	f7ff fa74 	bl	80047c4 <xTaskGetTickCount>
 80052dc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80052de:	4b0b      	ldr	r3, [pc, #44]	; (800530c <prvSampleTimeNow+0x3c>)
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	68fa      	ldr	r2, [r7, #12]
 80052e4:	429a      	cmp	r2, r3
 80052e6:	d205      	bcs.n	80052f4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80052e8:	f000 f936 	bl	8005558 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2201      	movs	r2, #1
 80052f0:	601a      	str	r2, [r3, #0]
 80052f2:	e002      	b.n	80052fa <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2200      	movs	r2, #0
 80052f8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80052fa:	4a04      	ldr	r2, [pc, #16]	; (800530c <prvSampleTimeNow+0x3c>)
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005300:	68fb      	ldr	r3, [r7, #12]
}
 8005302:	4618      	mov	r0, r3
 8005304:	3710      	adds	r7, #16
 8005306:	46bd      	mov	sp, r7
 8005308:	bd80      	pop	{r7, pc}
 800530a:	bf00      	nop
 800530c:	20000f6c 	.word	0x20000f6c

08005310 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005310:	b580      	push	{r7, lr}
 8005312:	b086      	sub	sp, #24
 8005314:	af00      	add	r7, sp, #0
 8005316:	60f8      	str	r0, [r7, #12]
 8005318:	60b9      	str	r1, [r7, #8]
 800531a:	607a      	str	r2, [r7, #4]
 800531c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800531e:	2300      	movs	r3, #0
 8005320:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	68ba      	ldr	r2, [r7, #8]
 8005326:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	68fa      	ldr	r2, [r7, #12]
 800532c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800532e:	68ba      	ldr	r2, [r7, #8]
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	429a      	cmp	r2, r3
 8005334:	d812      	bhi.n	800535c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005336:	687a      	ldr	r2, [r7, #4]
 8005338:	683b      	ldr	r3, [r7, #0]
 800533a:	1ad2      	subs	r2, r2, r3
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	699b      	ldr	r3, [r3, #24]
 8005340:	429a      	cmp	r2, r3
 8005342:	d302      	bcc.n	800534a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005344:	2301      	movs	r3, #1
 8005346:	617b      	str	r3, [r7, #20]
 8005348:	e01b      	b.n	8005382 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800534a:	4b10      	ldr	r3, [pc, #64]	; (800538c <prvInsertTimerInActiveList+0x7c>)
 800534c:	681a      	ldr	r2, [r3, #0]
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	3304      	adds	r3, #4
 8005352:	4619      	mov	r1, r3
 8005354:	4610      	mov	r0, r2
 8005356:	f7fe f906 	bl	8003566 <vListInsert>
 800535a:	e012      	b.n	8005382 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800535c:	687a      	ldr	r2, [r7, #4]
 800535e:	683b      	ldr	r3, [r7, #0]
 8005360:	429a      	cmp	r2, r3
 8005362:	d206      	bcs.n	8005372 <prvInsertTimerInActiveList+0x62>
 8005364:	68ba      	ldr	r2, [r7, #8]
 8005366:	683b      	ldr	r3, [r7, #0]
 8005368:	429a      	cmp	r2, r3
 800536a:	d302      	bcc.n	8005372 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800536c:	2301      	movs	r3, #1
 800536e:	617b      	str	r3, [r7, #20]
 8005370:	e007      	b.n	8005382 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005372:	4b07      	ldr	r3, [pc, #28]	; (8005390 <prvInsertTimerInActiveList+0x80>)
 8005374:	681a      	ldr	r2, [r3, #0]
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	3304      	adds	r3, #4
 800537a:	4619      	mov	r1, r3
 800537c:	4610      	mov	r0, r2
 800537e:	f7fe f8f2 	bl	8003566 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005382:	697b      	ldr	r3, [r7, #20]
}
 8005384:	4618      	mov	r0, r3
 8005386:	3718      	adds	r7, #24
 8005388:	46bd      	mov	sp, r7
 800538a:	bd80      	pop	{r7, pc}
 800538c:	20000f60 	.word	0x20000f60
 8005390:	20000f5c 	.word	0x20000f5c

08005394 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005394:	b580      	push	{r7, lr}
 8005396:	b08e      	sub	sp, #56	; 0x38
 8005398:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800539a:	e0ca      	b.n	8005532 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	da18      	bge.n	80053d4 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80053a2:	1d3b      	adds	r3, r7, #4
 80053a4:	3304      	adds	r3, #4
 80053a6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80053a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d10a      	bne.n	80053c4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80053ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053b2:	f383 8811 	msr	BASEPRI, r3
 80053b6:	f3bf 8f6f 	isb	sy
 80053ba:	f3bf 8f4f 	dsb	sy
 80053be:	61fb      	str	r3, [r7, #28]
}
 80053c0:	bf00      	nop
 80053c2:	e7fe      	b.n	80053c2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80053c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80053ca:	6850      	ldr	r0, [r2, #4]
 80053cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80053ce:	6892      	ldr	r2, [r2, #8]
 80053d0:	4611      	mov	r1, r2
 80053d2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	f2c0 80aa 	blt.w	8005530 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80053e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053e2:	695b      	ldr	r3, [r3, #20]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d004      	beq.n	80053f2 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80053e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053ea:	3304      	adds	r3, #4
 80053ec:	4618      	mov	r0, r3
 80053ee:	f7fe f8f3 	bl	80035d8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80053f2:	463b      	mov	r3, r7
 80053f4:	4618      	mov	r0, r3
 80053f6:	f7ff ff6b 	bl	80052d0 <prvSampleTimeNow>
 80053fa:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2b09      	cmp	r3, #9
 8005400:	f200 8097 	bhi.w	8005532 <prvProcessReceivedCommands+0x19e>
 8005404:	a201      	add	r2, pc, #4	; (adr r2, 800540c <prvProcessReceivedCommands+0x78>)
 8005406:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800540a:	bf00      	nop
 800540c:	08005435 	.word	0x08005435
 8005410:	08005435 	.word	0x08005435
 8005414:	08005435 	.word	0x08005435
 8005418:	080054a9 	.word	0x080054a9
 800541c:	080054bd 	.word	0x080054bd
 8005420:	08005507 	.word	0x08005507
 8005424:	08005435 	.word	0x08005435
 8005428:	08005435 	.word	0x08005435
 800542c:	080054a9 	.word	0x080054a9
 8005430:	080054bd 	.word	0x080054bd
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005434:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005436:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800543a:	f043 0301 	orr.w	r3, r3, #1
 800543e:	b2da      	uxtb	r2, r3
 8005440:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005442:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005446:	68ba      	ldr	r2, [r7, #8]
 8005448:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800544a:	699b      	ldr	r3, [r3, #24]
 800544c:	18d1      	adds	r1, r2, r3
 800544e:	68bb      	ldr	r3, [r7, #8]
 8005450:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005452:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005454:	f7ff ff5c 	bl	8005310 <prvInsertTimerInActiveList>
 8005458:	4603      	mov	r3, r0
 800545a:	2b00      	cmp	r3, #0
 800545c:	d069      	beq.n	8005532 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800545e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005460:	6a1b      	ldr	r3, [r3, #32]
 8005462:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005464:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005466:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005468:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800546c:	f003 0304 	and.w	r3, r3, #4
 8005470:	2b00      	cmp	r3, #0
 8005472:	d05e      	beq.n	8005532 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005474:	68ba      	ldr	r2, [r7, #8]
 8005476:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005478:	699b      	ldr	r3, [r3, #24]
 800547a:	441a      	add	r2, r3
 800547c:	2300      	movs	r3, #0
 800547e:	9300      	str	r3, [sp, #0]
 8005480:	2300      	movs	r3, #0
 8005482:	2100      	movs	r1, #0
 8005484:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005486:	f7ff fe05 	bl	8005094 <xTimerGenericCommand>
 800548a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800548c:	6a3b      	ldr	r3, [r7, #32]
 800548e:	2b00      	cmp	r3, #0
 8005490:	d14f      	bne.n	8005532 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8005492:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005496:	f383 8811 	msr	BASEPRI, r3
 800549a:	f3bf 8f6f 	isb	sy
 800549e:	f3bf 8f4f 	dsb	sy
 80054a2:	61bb      	str	r3, [r7, #24]
}
 80054a4:	bf00      	nop
 80054a6:	e7fe      	b.n	80054a6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80054a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054aa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80054ae:	f023 0301 	bic.w	r3, r3, #1
 80054b2:	b2da      	uxtb	r2, r3
 80054b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054b6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80054ba:	e03a      	b.n	8005532 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80054bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054be:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80054c2:	f043 0301 	orr.w	r3, r3, #1
 80054c6:	b2da      	uxtb	r2, r3
 80054c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054ca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80054ce:	68ba      	ldr	r2, [r7, #8]
 80054d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054d2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80054d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054d6:	699b      	ldr	r3, [r3, #24]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d10a      	bne.n	80054f2 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80054dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054e0:	f383 8811 	msr	BASEPRI, r3
 80054e4:	f3bf 8f6f 	isb	sy
 80054e8:	f3bf 8f4f 	dsb	sy
 80054ec:	617b      	str	r3, [r7, #20]
}
 80054ee:	bf00      	nop
 80054f0:	e7fe      	b.n	80054f0 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80054f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054f4:	699a      	ldr	r2, [r3, #24]
 80054f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054f8:	18d1      	adds	r1, r2, r3
 80054fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005500:	f7ff ff06 	bl	8005310 <prvInsertTimerInActiveList>
					break;
 8005504:	e015      	b.n	8005532 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005506:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005508:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800550c:	f003 0302 	and.w	r3, r3, #2
 8005510:	2b00      	cmp	r3, #0
 8005512:	d103      	bne.n	800551c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8005514:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005516:	f000 fbdb 	bl	8005cd0 <vPortFree>
 800551a:	e00a      	b.n	8005532 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800551c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800551e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005522:	f023 0301 	bic.w	r3, r3, #1
 8005526:	b2da      	uxtb	r2, r3
 8005528:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800552a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800552e:	e000      	b.n	8005532 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8005530:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005532:	4b08      	ldr	r3, [pc, #32]	; (8005554 <prvProcessReceivedCommands+0x1c0>)
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	1d39      	adds	r1, r7, #4
 8005538:	2200      	movs	r2, #0
 800553a:	4618      	mov	r0, r3
 800553c:	f7fe fb14 	bl	8003b68 <xQueueReceive>
 8005540:	4603      	mov	r3, r0
 8005542:	2b00      	cmp	r3, #0
 8005544:	f47f af2a 	bne.w	800539c <prvProcessReceivedCommands+0x8>
	}
}
 8005548:	bf00      	nop
 800554a:	bf00      	nop
 800554c:	3730      	adds	r7, #48	; 0x30
 800554e:	46bd      	mov	sp, r7
 8005550:	bd80      	pop	{r7, pc}
 8005552:	bf00      	nop
 8005554:	20000f64 	.word	0x20000f64

08005558 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005558:	b580      	push	{r7, lr}
 800555a:	b088      	sub	sp, #32
 800555c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800555e:	e048      	b.n	80055f2 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005560:	4b2d      	ldr	r3, [pc, #180]	; (8005618 <prvSwitchTimerLists+0xc0>)
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	68db      	ldr	r3, [r3, #12]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800556a:	4b2b      	ldr	r3, [pc, #172]	; (8005618 <prvSwitchTimerLists+0xc0>)
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	68db      	ldr	r3, [r3, #12]
 8005570:	68db      	ldr	r3, [r3, #12]
 8005572:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	3304      	adds	r3, #4
 8005578:	4618      	mov	r0, r3
 800557a:	f7fe f82d 	bl	80035d8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	6a1b      	ldr	r3, [r3, #32]
 8005582:	68f8      	ldr	r0, [r7, #12]
 8005584:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800558c:	f003 0304 	and.w	r3, r3, #4
 8005590:	2b00      	cmp	r3, #0
 8005592:	d02e      	beq.n	80055f2 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	699b      	ldr	r3, [r3, #24]
 8005598:	693a      	ldr	r2, [r7, #16]
 800559a:	4413      	add	r3, r2
 800559c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800559e:	68ba      	ldr	r2, [r7, #8]
 80055a0:	693b      	ldr	r3, [r7, #16]
 80055a2:	429a      	cmp	r2, r3
 80055a4:	d90e      	bls.n	80055c4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	68ba      	ldr	r2, [r7, #8]
 80055aa:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	68fa      	ldr	r2, [r7, #12]
 80055b0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80055b2:	4b19      	ldr	r3, [pc, #100]	; (8005618 <prvSwitchTimerLists+0xc0>)
 80055b4:	681a      	ldr	r2, [r3, #0]
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	3304      	adds	r3, #4
 80055ba:	4619      	mov	r1, r3
 80055bc:	4610      	mov	r0, r2
 80055be:	f7fd ffd2 	bl	8003566 <vListInsert>
 80055c2:	e016      	b.n	80055f2 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80055c4:	2300      	movs	r3, #0
 80055c6:	9300      	str	r3, [sp, #0]
 80055c8:	2300      	movs	r3, #0
 80055ca:	693a      	ldr	r2, [r7, #16]
 80055cc:	2100      	movs	r1, #0
 80055ce:	68f8      	ldr	r0, [r7, #12]
 80055d0:	f7ff fd60 	bl	8005094 <xTimerGenericCommand>
 80055d4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d10a      	bne.n	80055f2 <prvSwitchTimerLists+0x9a>
	__asm volatile
 80055dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055e0:	f383 8811 	msr	BASEPRI, r3
 80055e4:	f3bf 8f6f 	isb	sy
 80055e8:	f3bf 8f4f 	dsb	sy
 80055ec:	603b      	str	r3, [r7, #0]
}
 80055ee:	bf00      	nop
 80055f0:	e7fe      	b.n	80055f0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80055f2:	4b09      	ldr	r3, [pc, #36]	; (8005618 <prvSwitchTimerLists+0xc0>)
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d1b1      	bne.n	8005560 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80055fc:	4b06      	ldr	r3, [pc, #24]	; (8005618 <prvSwitchTimerLists+0xc0>)
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005602:	4b06      	ldr	r3, [pc, #24]	; (800561c <prvSwitchTimerLists+0xc4>)
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	4a04      	ldr	r2, [pc, #16]	; (8005618 <prvSwitchTimerLists+0xc0>)
 8005608:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800560a:	4a04      	ldr	r2, [pc, #16]	; (800561c <prvSwitchTimerLists+0xc4>)
 800560c:	697b      	ldr	r3, [r7, #20]
 800560e:	6013      	str	r3, [r2, #0]
}
 8005610:	bf00      	nop
 8005612:	3718      	adds	r7, #24
 8005614:	46bd      	mov	sp, r7
 8005616:	bd80      	pop	{r7, pc}
 8005618:	20000f5c 	.word	0x20000f5c
 800561c:	20000f60 	.word	0x20000f60

08005620 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005620:	b580      	push	{r7, lr}
 8005622:	b082      	sub	sp, #8
 8005624:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005626:	f000 f965 	bl	80058f4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800562a:	4b15      	ldr	r3, [pc, #84]	; (8005680 <prvCheckForValidListAndQueue+0x60>)
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	2b00      	cmp	r3, #0
 8005630:	d120      	bne.n	8005674 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005632:	4814      	ldr	r0, [pc, #80]	; (8005684 <prvCheckForValidListAndQueue+0x64>)
 8005634:	f7fd ff46 	bl	80034c4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005638:	4813      	ldr	r0, [pc, #76]	; (8005688 <prvCheckForValidListAndQueue+0x68>)
 800563a:	f7fd ff43 	bl	80034c4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800563e:	4b13      	ldr	r3, [pc, #76]	; (800568c <prvCheckForValidListAndQueue+0x6c>)
 8005640:	4a10      	ldr	r2, [pc, #64]	; (8005684 <prvCheckForValidListAndQueue+0x64>)
 8005642:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005644:	4b12      	ldr	r3, [pc, #72]	; (8005690 <prvCheckForValidListAndQueue+0x70>)
 8005646:	4a10      	ldr	r2, [pc, #64]	; (8005688 <prvCheckForValidListAndQueue+0x68>)
 8005648:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800564a:	2300      	movs	r3, #0
 800564c:	9300      	str	r3, [sp, #0]
 800564e:	4b11      	ldr	r3, [pc, #68]	; (8005694 <prvCheckForValidListAndQueue+0x74>)
 8005650:	4a11      	ldr	r2, [pc, #68]	; (8005698 <prvCheckForValidListAndQueue+0x78>)
 8005652:	2110      	movs	r1, #16
 8005654:	200a      	movs	r0, #10
 8005656:	f7fe f851 	bl	80036fc <xQueueGenericCreateStatic>
 800565a:	4603      	mov	r3, r0
 800565c:	4a08      	ldr	r2, [pc, #32]	; (8005680 <prvCheckForValidListAndQueue+0x60>)
 800565e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005660:	4b07      	ldr	r3, [pc, #28]	; (8005680 <prvCheckForValidListAndQueue+0x60>)
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	2b00      	cmp	r3, #0
 8005666:	d005      	beq.n	8005674 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005668:	4b05      	ldr	r3, [pc, #20]	; (8005680 <prvCheckForValidListAndQueue+0x60>)
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	490b      	ldr	r1, [pc, #44]	; (800569c <prvCheckForValidListAndQueue+0x7c>)
 800566e:	4618      	mov	r0, r3
 8005670:	f7fe fc6a 	bl	8003f48 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005674:	f000 f96e 	bl	8005954 <vPortExitCritical>
}
 8005678:	bf00      	nop
 800567a:	46bd      	mov	sp, r7
 800567c:	bd80      	pop	{r7, pc}
 800567e:	bf00      	nop
 8005680:	20000f64 	.word	0x20000f64
 8005684:	20000f34 	.word	0x20000f34
 8005688:	20000f48 	.word	0x20000f48
 800568c:	20000f5c 	.word	0x20000f5c
 8005690:	20000f60 	.word	0x20000f60
 8005694:	20001010 	.word	0x20001010
 8005698:	20000f70 	.word	0x20000f70
 800569c:	080065d4 	.word	0x080065d4

080056a0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80056a0:	b480      	push	{r7}
 80056a2:	b085      	sub	sp, #20
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	60f8      	str	r0, [r7, #12]
 80056a8:	60b9      	str	r1, [r7, #8]
 80056aa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	3b04      	subs	r3, #4
 80056b0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80056b8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	3b04      	subs	r3, #4
 80056be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80056c0:	68bb      	ldr	r3, [r7, #8]
 80056c2:	f023 0201 	bic.w	r2, r3, #1
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	3b04      	subs	r3, #4
 80056ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80056d0:	4a0c      	ldr	r2, [pc, #48]	; (8005704 <pxPortInitialiseStack+0x64>)
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	3b14      	subs	r3, #20
 80056da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80056dc:	687a      	ldr	r2, [r7, #4]
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	3b04      	subs	r3, #4
 80056e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	f06f 0202 	mvn.w	r2, #2
 80056ee:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	3b20      	subs	r3, #32
 80056f4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80056f6:	68fb      	ldr	r3, [r7, #12]
}
 80056f8:	4618      	mov	r0, r3
 80056fa:	3714      	adds	r7, #20
 80056fc:	46bd      	mov	sp, r7
 80056fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005702:	4770      	bx	lr
 8005704:	08005709 	.word	0x08005709

08005708 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005708:	b480      	push	{r7}
 800570a:	b085      	sub	sp, #20
 800570c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800570e:	2300      	movs	r3, #0
 8005710:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005712:	4b12      	ldr	r3, [pc, #72]	; (800575c <prvTaskExitError+0x54>)
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f1b3 3fff 	cmp.w	r3, #4294967295
 800571a:	d00a      	beq.n	8005732 <prvTaskExitError+0x2a>
	__asm volatile
 800571c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005720:	f383 8811 	msr	BASEPRI, r3
 8005724:	f3bf 8f6f 	isb	sy
 8005728:	f3bf 8f4f 	dsb	sy
 800572c:	60fb      	str	r3, [r7, #12]
}
 800572e:	bf00      	nop
 8005730:	e7fe      	b.n	8005730 <prvTaskExitError+0x28>
	__asm volatile
 8005732:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005736:	f383 8811 	msr	BASEPRI, r3
 800573a:	f3bf 8f6f 	isb	sy
 800573e:	f3bf 8f4f 	dsb	sy
 8005742:	60bb      	str	r3, [r7, #8]
}
 8005744:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005746:	bf00      	nop
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2b00      	cmp	r3, #0
 800574c:	d0fc      	beq.n	8005748 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800574e:	bf00      	nop
 8005750:	bf00      	nop
 8005752:	3714      	adds	r7, #20
 8005754:	46bd      	mov	sp, r7
 8005756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575a:	4770      	bx	lr
 800575c:	2000000c 	.word	0x2000000c

08005760 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005760:	4b07      	ldr	r3, [pc, #28]	; (8005780 <pxCurrentTCBConst2>)
 8005762:	6819      	ldr	r1, [r3, #0]
 8005764:	6808      	ldr	r0, [r1, #0]
 8005766:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800576a:	f380 8809 	msr	PSP, r0
 800576e:	f3bf 8f6f 	isb	sy
 8005772:	f04f 0000 	mov.w	r0, #0
 8005776:	f380 8811 	msr	BASEPRI, r0
 800577a:	4770      	bx	lr
 800577c:	f3af 8000 	nop.w

08005780 <pxCurrentTCBConst2>:
 8005780:	20000a34 	.word	0x20000a34
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005784:	bf00      	nop
 8005786:	bf00      	nop

08005788 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005788:	4808      	ldr	r0, [pc, #32]	; (80057ac <prvPortStartFirstTask+0x24>)
 800578a:	6800      	ldr	r0, [r0, #0]
 800578c:	6800      	ldr	r0, [r0, #0]
 800578e:	f380 8808 	msr	MSP, r0
 8005792:	f04f 0000 	mov.w	r0, #0
 8005796:	f380 8814 	msr	CONTROL, r0
 800579a:	b662      	cpsie	i
 800579c:	b661      	cpsie	f
 800579e:	f3bf 8f4f 	dsb	sy
 80057a2:	f3bf 8f6f 	isb	sy
 80057a6:	df00      	svc	0
 80057a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80057aa:	bf00      	nop
 80057ac:	e000ed08 	.word	0xe000ed08

080057b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80057b0:	b580      	push	{r7, lr}
 80057b2:	b086      	sub	sp, #24
 80057b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80057b6:	4b46      	ldr	r3, [pc, #280]	; (80058d0 <xPortStartScheduler+0x120>)
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	4a46      	ldr	r2, [pc, #280]	; (80058d4 <xPortStartScheduler+0x124>)
 80057bc:	4293      	cmp	r3, r2
 80057be:	d10a      	bne.n	80057d6 <xPortStartScheduler+0x26>
	__asm volatile
 80057c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057c4:	f383 8811 	msr	BASEPRI, r3
 80057c8:	f3bf 8f6f 	isb	sy
 80057cc:	f3bf 8f4f 	dsb	sy
 80057d0:	613b      	str	r3, [r7, #16]
}
 80057d2:	bf00      	nop
 80057d4:	e7fe      	b.n	80057d4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80057d6:	4b3e      	ldr	r3, [pc, #248]	; (80058d0 <xPortStartScheduler+0x120>)
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	4a3f      	ldr	r2, [pc, #252]	; (80058d8 <xPortStartScheduler+0x128>)
 80057dc:	4293      	cmp	r3, r2
 80057de:	d10a      	bne.n	80057f6 <xPortStartScheduler+0x46>
	__asm volatile
 80057e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057e4:	f383 8811 	msr	BASEPRI, r3
 80057e8:	f3bf 8f6f 	isb	sy
 80057ec:	f3bf 8f4f 	dsb	sy
 80057f0:	60fb      	str	r3, [r7, #12]
}
 80057f2:	bf00      	nop
 80057f4:	e7fe      	b.n	80057f4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80057f6:	4b39      	ldr	r3, [pc, #228]	; (80058dc <xPortStartScheduler+0x12c>)
 80057f8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80057fa:	697b      	ldr	r3, [r7, #20]
 80057fc:	781b      	ldrb	r3, [r3, #0]
 80057fe:	b2db      	uxtb	r3, r3
 8005800:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005802:	697b      	ldr	r3, [r7, #20]
 8005804:	22ff      	movs	r2, #255	; 0xff
 8005806:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005808:	697b      	ldr	r3, [r7, #20]
 800580a:	781b      	ldrb	r3, [r3, #0]
 800580c:	b2db      	uxtb	r3, r3
 800580e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005810:	78fb      	ldrb	r3, [r7, #3]
 8005812:	b2db      	uxtb	r3, r3
 8005814:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005818:	b2da      	uxtb	r2, r3
 800581a:	4b31      	ldr	r3, [pc, #196]	; (80058e0 <xPortStartScheduler+0x130>)
 800581c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800581e:	4b31      	ldr	r3, [pc, #196]	; (80058e4 <xPortStartScheduler+0x134>)
 8005820:	2207      	movs	r2, #7
 8005822:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005824:	e009      	b.n	800583a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8005826:	4b2f      	ldr	r3, [pc, #188]	; (80058e4 <xPortStartScheduler+0x134>)
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	3b01      	subs	r3, #1
 800582c:	4a2d      	ldr	r2, [pc, #180]	; (80058e4 <xPortStartScheduler+0x134>)
 800582e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005830:	78fb      	ldrb	r3, [r7, #3]
 8005832:	b2db      	uxtb	r3, r3
 8005834:	005b      	lsls	r3, r3, #1
 8005836:	b2db      	uxtb	r3, r3
 8005838:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800583a:	78fb      	ldrb	r3, [r7, #3]
 800583c:	b2db      	uxtb	r3, r3
 800583e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005842:	2b80      	cmp	r3, #128	; 0x80
 8005844:	d0ef      	beq.n	8005826 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005846:	4b27      	ldr	r3, [pc, #156]	; (80058e4 <xPortStartScheduler+0x134>)
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f1c3 0307 	rsb	r3, r3, #7
 800584e:	2b04      	cmp	r3, #4
 8005850:	d00a      	beq.n	8005868 <xPortStartScheduler+0xb8>
	__asm volatile
 8005852:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005856:	f383 8811 	msr	BASEPRI, r3
 800585a:	f3bf 8f6f 	isb	sy
 800585e:	f3bf 8f4f 	dsb	sy
 8005862:	60bb      	str	r3, [r7, #8]
}
 8005864:	bf00      	nop
 8005866:	e7fe      	b.n	8005866 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005868:	4b1e      	ldr	r3, [pc, #120]	; (80058e4 <xPortStartScheduler+0x134>)
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	021b      	lsls	r3, r3, #8
 800586e:	4a1d      	ldr	r2, [pc, #116]	; (80058e4 <xPortStartScheduler+0x134>)
 8005870:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005872:	4b1c      	ldr	r3, [pc, #112]	; (80058e4 <xPortStartScheduler+0x134>)
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800587a:	4a1a      	ldr	r2, [pc, #104]	; (80058e4 <xPortStartScheduler+0x134>)
 800587c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	b2da      	uxtb	r2, r3
 8005882:	697b      	ldr	r3, [r7, #20]
 8005884:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005886:	4b18      	ldr	r3, [pc, #96]	; (80058e8 <xPortStartScheduler+0x138>)
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	4a17      	ldr	r2, [pc, #92]	; (80058e8 <xPortStartScheduler+0x138>)
 800588c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005890:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005892:	4b15      	ldr	r3, [pc, #84]	; (80058e8 <xPortStartScheduler+0x138>)
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	4a14      	ldr	r2, [pc, #80]	; (80058e8 <xPortStartScheduler+0x138>)
 8005898:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800589c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800589e:	f000 f8dd 	bl	8005a5c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80058a2:	4b12      	ldr	r3, [pc, #72]	; (80058ec <xPortStartScheduler+0x13c>)
 80058a4:	2200      	movs	r2, #0
 80058a6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80058a8:	f000 f8fc 	bl	8005aa4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80058ac:	4b10      	ldr	r3, [pc, #64]	; (80058f0 <xPortStartScheduler+0x140>)
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	4a0f      	ldr	r2, [pc, #60]	; (80058f0 <xPortStartScheduler+0x140>)
 80058b2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80058b6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80058b8:	f7ff ff66 	bl	8005788 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80058bc:	f7ff f84c 	bl	8004958 <vTaskSwitchContext>
	prvTaskExitError();
 80058c0:	f7ff ff22 	bl	8005708 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80058c4:	2300      	movs	r3, #0
}
 80058c6:	4618      	mov	r0, r3
 80058c8:	3718      	adds	r7, #24
 80058ca:	46bd      	mov	sp, r7
 80058cc:	bd80      	pop	{r7, pc}
 80058ce:	bf00      	nop
 80058d0:	e000ed00 	.word	0xe000ed00
 80058d4:	410fc271 	.word	0x410fc271
 80058d8:	410fc270 	.word	0x410fc270
 80058dc:	e000e400 	.word	0xe000e400
 80058e0:	20001060 	.word	0x20001060
 80058e4:	20001064 	.word	0x20001064
 80058e8:	e000ed20 	.word	0xe000ed20
 80058ec:	2000000c 	.word	0x2000000c
 80058f0:	e000ef34 	.word	0xe000ef34

080058f4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80058f4:	b480      	push	{r7}
 80058f6:	b083      	sub	sp, #12
 80058f8:	af00      	add	r7, sp, #0
	__asm volatile
 80058fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058fe:	f383 8811 	msr	BASEPRI, r3
 8005902:	f3bf 8f6f 	isb	sy
 8005906:	f3bf 8f4f 	dsb	sy
 800590a:	607b      	str	r3, [r7, #4]
}
 800590c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800590e:	4b0f      	ldr	r3, [pc, #60]	; (800594c <vPortEnterCritical+0x58>)
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	3301      	adds	r3, #1
 8005914:	4a0d      	ldr	r2, [pc, #52]	; (800594c <vPortEnterCritical+0x58>)
 8005916:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005918:	4b0c      	ldr	r3, [pc, #48]	; (800594c <vPortEnterCritical+0x58>)
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	2b01      	cmp	r3, #1
 800591e:	d10f      	bne.n	8005940 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005920:	4b0b      	ldr	r3, [pc, #44]	; (8005950 <vPortEnterCritical+0x5c>)
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	b2db      	uxtb	r3, r3
 8005926:	2b00      	cmp	r3, #0
 8005928:	d00a      	beq.n	8005940 <vPortEnterCritical+0x4c>
	__asm volatile
 800592a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800592e:	f383 8811 	msr	BASEPRI, r3
 8005932:	f3bf 8f6f 	isb	sy
 8005936:	f3bf 8f4f 	dsb	sy
 800593a:	603b      	str	r3, [r7, #0]
}
 800593c:	bf00      	nop
 800593e:	e7fe      	b.n	800593e <vPortEnterCritical+0x4a>
	}
}
 8005940:	bf00      	nop
 8005942:	370c      	adds	r7, #12
 8005944:	46bd      	mov	sp, r7
 8005946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594a:	4770      	bx	lr
 800594c:	2000000c 	.word	0x2000000c
 8005950:	e000ed04 	.word	0xe000ed04

08005954 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005954:	b480      	push	{r7}
 8005956:	b083      	sub	sp, #12
 8005958:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800595a:	4b12      	ldr	r3, [pc, #72]	; (80059a4 <vPortExitCritical+0x50>)
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	2b00      	cmp	r3, #0
 8005960:	d10a      	bne.n	8005978 <vPortExitCritical+0x24>
	__asm volatile
 8005962:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005966:	f383 8811 	msr	BASEPRI, r3
 800596a:	f3bf 8f6f 	isb	sy
 800596e:	f3bf 8f4f 	dsb	sy
 8005972:	607b      	str	r3, [r7, #4]
}
 8005974:	bf00      	nop
 8005976:	e7fe      	b.n	8005976 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005978:	4b0a      	ldr	r3, [pc, #40]	; (80059a4 <vPortExitCritical+0x50>)
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	3b01      	subs	r3, #1
 800597e:	4a09      	ldr	r2, [pc, #36]	; (80059a4 <vPortExitCritical+0x50>)
 8005980:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005982:	4b08      	ldr	r3, [pc, #32]	; (80059a4 <vPortExitCritical+0x50>)
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	2b00      	cmp	r3, #0
 8005988:	d105      	bne.n	8005996 <vPortExitCritical+0x42>
 800598a:	2300      	movs	r3, #0
 800598c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800598e:	683b      	ldr	r3, [r7, #0]
 8005990:	f383 8811 	msr	BASEPRI, r3
}
 8005994:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005996:	bf00      	nop
 8005998:	370c      	adds	r7, #12
 800599a:	46bd      	mov	sp, r7
 800599c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a0:	4770      	bx	lr
 80059a2:	bf00      	nop
 80059a4:	2000000c 	.word	0x2000000c
	...

080059b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80059b0:	f3ef 8009 	mrs	r0, PSP
 80059b4:	f3bf 8f6f 	isb	sy
 80059b8:	4b15      	ldr	r3, [pc, #84]	; (8005a10 <pxCurrentTCBConst>)
 80059ba:	681a      	ldr	r2, [r3, #0]
 80059bc:	f01e 0f10 	tst.w	lr, #16
 80059c0:	bf08      	it	eq
 80059c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80059c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059ca:	6010      	str	r0, [r2, #0]
 80059cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80059d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80059d4:	f380 8811 	msr	BASEPRI, r0
 80059d8:	f3bf 8f4f 	dsb	sy
 80059dc:	f3bf 8f6f 	isb	sy
 80059e0:	f7fe ffba 	bl	8004958 <vTaskSwitchContext>
 80059e4:	f04f 0000 	mov.w	r0, #0
 80059e8:	f380 8811 	msr	BASEPRI, r0
 80059ec:	bc09      	pop	{r0, r3}
 80059ee:	6819      	ldr	r1, [r3, #0]
 80059f0:	6808      	ldr	r0, [r1, #0]
 80059f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059f6:	f01e 0f10 	tst.w	lr, #16
 80059fa:	bf08      	it	eq
 80059fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005a00:	f380 8809 	msr	PSP, r0
 8005a04:	f3bf 8f6f 	isb	sy
 8005a08:	4770      	bx	lr
 8005a0a:	bf00      	nop
 8005a0c:	f3af 8000 	nop.w

08005a10 <pxCurrentTCBConst>:
 8005a10:	20000a34 	.word	0x20000a34
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005a14:	bf00      	nop
 8005a16:	bf00      	nop

08005a18 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005a18:	b580      	push	{r7, lr}
 8005a1a:	b082      	sub	sp, #8
 8005a1c:	af00      	add	r7, sp, #0
	__asm volatile
 8005a1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a22:	f383 8811 	msr	BASEPRI, r3
 8005a26:	f3bf 8f6f 	isb	sy
 8005a2a:	f3bf 8f4f 	dsb	sy
 8005a2e:	607b      	str	r3, [r7, #4]
}
 8005a30:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005a32:	f7fe fed7 	bl	80047e4 <xTaskIncrementTick>
 8005a36:	4603      	mov	r3, r0
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d003      	beq.n	8005a44 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005a3c:	4b06      	ldr	r3, [pc, #24]	; (8005a58 <xPortSysTickHandler+0x40>)
 8005a3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a42:	601a      	str	r2, [r3, #0]
 8005a44:	2300      	movs	r3, #0
 8005a46:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005a48:	683b      	ldr	r3, [r7, #0]
 8005a4a:	f383 8811 	msr	BASEPRI, r3
}
 8005a4e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005a50:	bf00      	nop
 8005a52:	3708      	adds	r7, #8
 8005a54:	46bd      	mov	sp, r7
 8005a56:	bd80      	pop	{r7, pc}
 8005a58:	e000ed04 	.word	0xe000ed04

08005a5c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005a5c:	b480      	push	{r7}
 8005a5e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005a60:	4b0b      	ldr	r3, [pc, #44]	; (8005a90 <vPortSetupTimerInterrupt+0x34>)
 8005a62:	2200      	movs	r2, #0
 8005a64:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005a66:	4b0b      	ldr	r3, [pc, #44]	; (8005a94 <vPortSetupTimerInterrupt+0x38>)
 8005a68:	2200      	movs	r2, #0
 8005a6a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005a6c:	4b0a      	ldr	r3, [pc, #40]	; (8005a98 <vPortSetupTimerInterrupt+0x3c>)
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	4a0a      	ldr	r2, [pc, #40]	; (8005a9c <vPortSetupTimerInterrupt+0x40>)
 8005a72:	fba2 2303 	umull	r2, r3, r2, r3
 8005a76:	099b      	lsrs	r3, r3, #6
 8005a78:	4a09      	ldr	r2, [pc, #36]	; (8005aa0 <vPortSetupTimerInterrupt+0x44>)
 8005a7a:	3b01      	subs	r3, #1
 8005a7c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005a7e:	4b04      	ldr	r3, [pc, #16]	; (8005a90 <vPortSetupTimerInterrupt+0x34>)
 8005a80:	2207      	movs	r2, #7
 8005a82:	601a      	str	r2, [r3, #0]
}
 8005a84:	bf00      	nop
 8005a86:	46bd      	mov	sp, r7
 8005a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8c:	4770      	bx	lr
 8005a8e:	bf00      	nop
 8005a90:	e000e010 	.word	0xe000e010
 8005a94:	e000e018 	.word	0xe000e018
 8005a98:	20000000 	.word	0x20000000
 8005a9c:	10624dd3 	.word	0x10624dd3
 8005aa0:	e000e014 	.word	0xe000e014

08005aa4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005aa4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005ab4 <vPortEnableVFP+0x10>
 8005aa8:	6801      	ldr	r1, [r0, #0]
 8005aaa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005aae:	6001      	str	r1, [r0, #0]
 8005ab0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005ab2:	bf00      	nop
 8005ab4:	e000ed88 	.word	0xe000ed88

08005ab8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005ab8:	b480      	push	{r7}
 8005aba:	b085      	sub	sp, #20
 8005abc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005abe:	f3ef 8305 	mrs	r3, IPSR
 8005ac2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	2b0f      	cmp	r3, #15
 8005ac8:	d914      	bls.n	8005af4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005aca:	4a17      	ldr	r2, [pc, #92]	; (8005b28 <vPortValidateInterruptPriority+0x70>)
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	4413      	add	r3, r2
 8005ad0:	781b      	ldrb	r3, [r3, #0]
 8005ad2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005ad4:	4b15      	ldr	r3, [pc, #84]	; (8005b2c <vPortValidateInterruptPriority+0x74>)
 8005ad6:	781b      	ldrb	r3, [r3, #0]
 8005ad8:	7afa      	ldrb	r2, [r7, #11]
 8005ada:	429a      	cmp	r2, r3
 8005adc:	d20a      	bcs.n	8005af4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8005ade:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ae2:	f383 8811 	msr	BASEPRI, r3
 8005ae6:	f3bf 8f6f 	isb	sy
 8005aea:	f3bf 8f4f 	dsb	sy
 8005aee:	607b      	str	r3, [r7, #4]
}
 8005af0:	bf00      	nop
 8005af2:	e7fe      	b.n	8005af2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005af4:	4b0e      	ldr	r3, [pc, #56]	; (8005b30 <vPortValidateInterruptPriority+0x78>)
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005afc:	4b0d      	ldr	r3, [pc, #52]	; (8005b34 <vPortValidateInterruptPriority+0x7c>)
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	429a      	cmp	r2, r3
 8005b02:	d90a      	bls.n	8005b1a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8005b04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b08:	f383 8811 	msr	BASEPRI, r3
 8005b0c:	f3bf 8f6f 	isb	sy
 8005b10:	f3bf 8f4f 	dsb	sy
 8005b14:	603b      	str	r3, [r7, #0]
}
 8005b16:	bf00      	nop
 8005b18:	e7fe      	b.n	8005b18 <vPortValidateInterruptPriority+0x60>
	}
 8005b1a:	bf00      	nop
 8005b1c:	3714      	adds	r7, #20
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b24:	4770      	bx	lr
 8005b26:	bf00      	nop
 8005b28:	e000e3f0 	.word	0xe000e3f0
 8005b2c:	20001060 	.word	0x20001060
 8005b30:	e000ed0c 	.word	0xe000ed0c
 8005b34:	20001064 	.word	0x20001064

08005b38 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005b38:	b580      	push	{r7, lr}
 8005b3a:	b08a      	sub	sp, #40	; 0x28
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005b40:	2300      	movs	r3, #0
 8005b42:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005b44:	f7fe fd92 	bl	800466c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005b48:	4b5b      	ldr	r3, [pc, #364]	; (8005cb8 <pvPortMalloc+0x180>)
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d101      	bne.n	8005b54 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005b50:	f000 f920 	bl	8005d94 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005b54:	4b59      	ldr	r3, [pc, #356]	; (8005cbc <pvPortMalloc+0x184>)
 8005b56:	681a      	ldr	r2, [r3, #0]
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	4013      	ands	r3, r2
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	f040 8093 	bne.w	8005c88 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d01d      	beq.n	8005ba4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005b68:	2208      	movs	r2, #8
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	4413      	add	r3, r2
 8005b6e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	f003 0307 	and.w	r3, r3, #7
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d014      	beq.n	8005ba4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	f023 0307 	bic.w	r3, r3, #7
 8005b80:	3308      	adds	r3, #8
 8005b82:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	f003 0307 	and.w	r3, r3, #7
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d00a      	beq.n	8005ba4 <pvPortMalloc+0x6c>
	__asm volatile
 8005b8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b92:	f383 8811 	msr	BASEPRI, r3
 8005b96:	f3bf 8f6f 	isb	sy
 8005b9a:	f3bf 8f4f 	dsb	sy
 8005b9e:	617b      	str	r3, [r7, #20]
}
 8005ba0:	bf00      	nop
 8005ba2:	e7fe      	b.n	8005ba2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d06e      	beq.n	8005c88 <pvPortMalloc+0x150>
 8005baa:	4b45      	ldr	r3, [pc, #276]	; (8005cc0 <pvPortMalloc+0x188>)
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	687a      	ldr	r2, [r7, #4]
 8005bb0:	429a      	cmp	r2, r3
 8005bb2:	d869      	bhi.n	8005c88 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005bb4:	4b43      	ldr	r3, [pc, #268]	; (8005cc4 <pvPortMalloc+0x18c>)
 8005bb6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005bb8:	4b42      	ldr	r3, [pc, #264]	; (8005cc4 <pvPortMalloc+0x18c>)
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005bbe:	e004      	b.n	8005bca <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bc2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bcc:	685b      	ldr	r3, [r3, #4]
 8005bce:	687a      	ldr	r2, [r7, #4]
 8005bd0:	429a      	cmp	r2, r3
 8005bd2:	d903      	bls.n	8005bdc <pvPortMalloc+0xa4>
 8005bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d1f1      	bne.n	8005bc0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005bdc:	4b36      	ldr	r3, [pc, #216]	; (8005cb8 <pvPortMalloc+0x180>)
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005be2:	429a      	cmp	r2, r3
 8005be4:	d050      	beq.n	8005c88 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005be6:	6a3b      	ldr	r3, [r7, #32]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	2208      	movs	r2, #8
 8005bec:	4413      	add	r3, r2
 8005bee:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bf2:	681a      	ldr	r2, [r3, #0]
 8005bf4:	6a3b      	ldr	r3, [r7, #32]
 8005bf6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bfa:	685a      	ldr	r2, [r3, #4]
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	1ad2      	subs	r2, r2, r3
 8005c00:	2308      	movs	r3, #8
 8005c02:	005b      	lsls	r3, r3, #1
 8005c04:	429a      	cmp	r2, r3
 8005c06:	d91f      	bls.n	8005c48 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005c08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	4413      	add	r3, r2
 8005c0e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005c10:	69bb      	ldr	r3, [r7, #24]
 8005c12:	f003 0307 	and.w	r3, r3, #7
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d00a      	beq.n	8005c30 <pvPortMalloc+0xf8>
	__asm volatile
 8005c1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c1e:	f383 8811 	msr	BASEPRI, r3
 8005c22:	f3bf 8f6f 	isb	sy
 8005c26:	f3bf 8f4f 	dsb	sy
 8005c2a:	613b      	str	r3, [r7, #16]
}
 8005c2c:	bf00      	nop
 8005c2e:	e7fe      	b.n	8005c2e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c32:	685a      	ldr	r2, [r3, #4]
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	1ad2      	subs	r2, r2, r3
 8005c38:	69bb      	ldr	r3, [r7, #24]
 8005c3a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c3e:	687a      	ldr	r2, [r7, #4]
 8005c40:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005c42:	69b8      	ldr	r0, [r7, #24]
 8005c44:	f000 f908 	bl	8005e58 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005c48:	4b1d      	ldr	r3, [pc, #116]	; (8005cc0 <pvPortMalloc+0x188>)
 8005c4a:	681a      	ldr	r2, [r3, #0]
 8005c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c4e:	685b      	ldr	r3, [r3, #4]
 8005c50:	1ad3      	subs	r3, r2, r3
 8005c52:	4a1b      	ldr	r2, [pc, #108]	; (8005cc0 <pvPortMalloc+0x188>)
 8005c54:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005c56:	4b1a      	ldr	r3, [pc, #104]	; (8005cc0 <pvPortMalloc+0x188>)
 8005c58:	681a      	ldr	r2, [r3, #0]
 8005c5a:	4b1b      	ldr	r3, [pc, #108]	; (8005cc8 <pvPortMalloc+0x190>)
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	429a      	cmp	r2, r3
 8005c60:	d203      	bcs.n	8005c6a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005c62:	4b17      	ldr	r3, [pc, #92]	; (8005cc0 <pvPortMalloc+0x188>)
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	4a18      	ldr	r2, [pc, #96]	; (8005cc8 <pvPortMalloc+0x190>)
 8005c68:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c6c:	685a      	ldr	r2, [r3, #4]
 8005c6e:	4b13      	ldr	r3, [pc, #76]	; (8005cbc <pvPortMalloc+0x184>)
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	431a      	orrs	r2, r3
 8005c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c76:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c7a:	2200      	movs	r2, #0
 8005c7c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005c7e:	4b13      	ldr	r3, [pc, #76]	; (8005ccc <pvPortMalloc+0x194>)
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	3301      	adds	r3, #1
 8005c84:	4a11      	ldr	r2, [pc, #68]	; (8005ccc <pvPortMalloc+0x194>)
 8005c86:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005c88:	f7fe fcfe 	bl	8004688 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005c8c:	69fb      	ldr	r3, [r7, #28]
 8005c8e:	f003 0307 	and.w	r3, r3, #7
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d00a      	beq.n	8005cac <pvPortMalloc+0x174>
	__asm volatile
 8005c96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c9a:	f383 8811 	msr	BASEPRI, r3
 8005c9e:	f3bf 8f6f 	isb	sy
 8005ca2:	f3bf 8f4f 	dsb	sy
 8005ca6:	60fb      	str	r3, [r7, #12]
}
 8005ca8:	bf00      	nop
 8005caa:	e7fe      	b.n	8005caa <pvPortMalloc+0x172>
	return pvReturn;
 8005cac:	69fb      	ldr	r3, [r7, #28]
}
 8005cae:	4618      	mov	r0, r3
 8005cb0:	3728      	adds	r7, #40	; 0x28
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	bd80      	pop	{r7, pc}
 8005cb6:	bf00      	nop
 8005cb8:	20004c70 	.word	0x20004c70
 8005cbc:	20004c84 	.word	0x20004c84
 8005cc0:	20004c74 	.word	0x20004c74
 8005cc4:	20004c68 	.word	0x20004c68
 8005cc8:	20004c78 	.word	0x20004c78
 8005ccc:	20004c7c 	.word	0x20004c7c

08005cd0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005cd0:	b580      	push	{r7, lr}
 8005cd2:	b086      	sub	sp, #24
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d04d      	beq.n	8005d7e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005ce2:	2308      	movs	r3, #8
 8005ce4:	425b      	negs	r3, r3
 8005ce6:	697a      	ldr	r2, [r7, #20]
 8005ce8:	4413      	add	r3, r2
 8005cea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005cec:	697b      	ldr	r3, [r7, #20]
 8005cee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005cf0:	693b      	ldr	r3, [r7, #16]
 8005cf2:	685a      	ldr	r2, [r3, #4]
 8005cf4:	4b24      	ldr	r3, [pc, #144]	; (8005d88 <vPortFree+0xb8>)
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	4013      	ands	r3, r2
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d10a      	bne.n	8005d14 <vPortFree+0x44>
	__asm volatile
 8005cfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d02:	f383 8811 	msr	BASEPRI, r3
 8005d06:	f3bf 8f6f 	isb	sy
 8005d0a:	f3bf 8f4f 	dsb	sy
 8005d0e:	60fb      	str	r3, [r7, #12]
}
 8005d10:	bf00      	nop
 8005d12:	e7fe      	b.n	8005d12 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005d14:	693b      	ldr	r3, [r7, #16]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d00a      	beq.n	8005d32 <vPortFree+0x62>
	__asm volatile
 8005d1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d20:	f383 8811 	msr	BASEPRI, r3
 8005d24:	f3bf 8f6f 	isb	sy
 8005d28:	f3bf 8f4f 	dsb	sy
 8005d2c:	60bb      	str	r3, [r7, #8]
}
 8005d2e:	bf00      	nop
 8005d30:	e7fe      	b.n	8005d30 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005d32:	693b      	ldr	r3, [r7, #16]
 8005d34:	685a      	ldr	r2, [r3, #4]
 8005d36:	4b14      	ldr	r3, [pc, #80]	; (8005d88 <vPortFree+0xb8>)
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	4013      	ands	r3, r2
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d01e      	beq.n	8005d7e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005d40:	693b      	ldr	r3, [r7, #16]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d11a      	bne.n	8005d7e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005d48:	693b      	ldr	r3, [r7, #16]
 8005d4a:	685a      	ldr	r2, [r3, #4]
 8005d4c:	4b0e      	ldr	r3, [pc, #56]	; (8005d88 <vPortFree+0xb8>)
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	43db      	mvns	r3, r3
 8005d52:	401a      	ands	r2, r3
 8005d54:	693b      	ldr	r3, [r7, #16]
 8005d56:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005d58:	f7fe fc88 	bl	800466c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005d5c:	693b      	ldr	r3, [r7, #16]
 8005d5e:	685a      	ldr	r2, [r3, #4]
 8005d60:	4b0a      	ldr	r3, [pc, #40]	; (8005d8c <vPortFree+0xbc>)
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	4413      	add	r3, r2
 8005d66:	4a09      	ldr	r2, [pc, #36]	; (8005d8c <vPortFree+0xbc>)
 8005d68:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005d6a:	6938      	ldr	r0, [r7, #16]
 8005d6c:	f000 f874 	bl	8005e58 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005d70:	4b07      	ldr	r3, [pc, #28]	; (8005d90 <vPortFree+0xc0>)
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	3301      	adds	r3, #1
 8005d76:	4a06      	ldr	r2, [pc, #24]	; (8005d90 <vPortFree+0xc0>)
 8005d78:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005d7a:	f7fe fc85 	bl	8004688 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005d7e:	bf00      	nop
 8005d80:	3718      	adds	r7, #24
 8005d82:	46bd      	mov	sp, r7
 8005d84:	bd80      	pop	{r7, pc}
 8005d86:	bf00      	nop
 8005d88:	20004c84 	.word	0x20004c84
 8005d8c:	20004c74 	.word	0x20004c74
 8005d90:	20004c80 	.word	0x20004c80

08005d94 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005d94:	b480      	push	{r7}
 8005d96:	b085      	sub	sp, #20
 8005d98:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005d9a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8005d9e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005da0:	4b27      	ldr	r3, [pc, #156]	; (8005e40 <prvHeapInit+0xac>)
 8005da2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	f003 0307 	and.w	r3, r3, #7
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d00c      	beq.n	8005dc8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	3307      	adds	r3, #7
 8005db2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	f023 0307 	bic.w	r3, r3, #7
 8005dba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005dbc:	68ba      	ldr	r2, [r7, #8]
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	1ad3      	subs	r3, r2, r3
 8005dc2:	4a1f      	ldr	r2, [pc, #124]	; (8005e40 <prvHeapInit+0xac>)
 8005dc4:	4413      	add	r3, r2
 8005dc6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005dcc:	4a1d      	ldr	r2, [pc, #116]	; (8005e44 <prvHeapInit+0xb0>)
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005dd2:	4b1c      	ldr	r3, [pc, #112]	; (8005e44 <prvHeapInit+0xb0>)
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	68ba      	ldr	r2, [r7, #8]
 8005ddc:	4413      	add	r3, r2
 8005dde:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005de0:	2208      	movs	r2, #8
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	1a9b      	subs	r3, r3, r2
 8005de6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	f023 0307 	bic.w	r3, r3, #7
 8005dee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	4a15      	ldr	r2, [pc, #84]	; (8005e48 <prvHeapInit+0xb4>)
 8005df4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005df6:	4b14      	ldr	r3, [pc, #80]	; (8005e48 <prvHeapInit+0xb4>)
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005dfe:	4b12      	ldr	r3, [pc, #72]	; (8005e48 <prvHeapInit+0xb4>)
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	2200      	movs	r2, #0
 8005e04:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005e0a:	683b      	ldr	r3, [r7, #0]
 8005e0c:	68fa      	ldr	r2, [r7, #12]
 8005e0e:	1ad2      	subs	r2, r2, r3
 8005e10:	683b      	ldr	r3, [r7, #0]
 8005e12:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005e14:	4b0c      	ldr	r3, [pc, #48]	; (8005e48 <prvHeapInit+0xb4>)
 8005e16:	681a      	ldr	r2, [r3, #0]
 8005e18:	683b      	ldr	r3, [r7, #0]
 8005e1a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005e1c:	683b      	ldr	r3, [r7, #0]
 8005e1e:	685b      	ldr	r3, [r3, #4]
 8005e20:	4a0a      	ldr	r2, [pc, #40]	; (8005e4c <prvHeapInit+0xb8>)
 8005e22:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005e24:	683b      	ldr	r3, [r7, #0]
 8005e26:	685b      	ldr	r3, [r3, #4]
 8005e28:	4a09      	ldr	r2, [pc, #36]	; (8005e50 <prvHeapInit+0xbc>)
 8005e2a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005e2c:	4b09      	ldr	r3, [pc, #36]	; (8005e54 <prvHeapInit+0xc0>)
 8005e2e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005e32:	601a      	str	r2, [r3, #0]
}
 8005e34:	bf00      	nop
 8005e36:	3714      	adds	r7, #20
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3e:	4770      	bx	lr
 8005e40:	20001068 	.word	0x20001068
 8005e44:	20004c68 	.word	0x20004c68
 8005e48:	20004c70 	.word	0x20004c70
 8005e4c:	20004c78 	.word	0x20004c78
 8005e50:	20004c74 	.word	0x20004c74
 8005e54:	20004c84 	.word	0x20004c84

08005e58 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005e58:	b480      	push	{r7}
 8005e5a:	b085      	sub	sp, #20
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005e60:	4b28      	ldr	r3, [pc, #160]	; (8005f04 <prvInsertBlockIntoFreeList+0xac>)
 8005e62:	60fb      	str	r3, [r7, #12]
 8005e64:	e002      	b.n	8005e6c <prvInsertBlockIntoFreeList+0x14>
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	60fb      	str	r3, [r7, #12]
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	687a      	ldr	r2, [r7, #4]
 8005e72:	429a      	cmp	r2, r3
 8005e74:	d8f7      	bhi.n	8005e66 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	685b      	ldr	r3, [r3, #4]
 8005e7e:	68ba      	ldr	r2, [r7, #8]
 8005e80:	4413      	add	r3, r2
 8005e82:	687a      	ldr	r2, [r7, #4]
 8005e84:	429a      	cmp	r2, r3
 8005e86:	d108      	bne.n	8005e9a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	685a      	ldr	r2, [r3, #4]
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	685b      	ldr	r3, [r3, #4]
 8005e90:	441a      	add	r2, r3
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	685b      	ldr	r3, [r3, #4]
 8005ea2:	68ba      	ldr	r2, [r7, #8]
 8005ea4:	441a      	add	r2, r3
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	429a      	cmp	r2, r3
 8005eac:	d118      	bne.n	8005ee0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	681a      	ldr	r2, [r3, #0]
 8005eb2:	4b15      	ldr	r3, [pc, #84]	; (8005f08 <prvInsertBlockIntoFreeList+0xb0>)
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	429a      	cmp	r2, r3
 8005eb8:	d00d      	beq.n	8005ed6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	685a      	ldr	r2, [r3, #4]
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	685b      	ldr	r3, [r3, #4]
 8005ec4:	441a      	add	r2, r3
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	681a      	ldr	r2, [r3, #0]
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	601a      	str	r2, [r3, #0]
 8005ed4:	e008      	b.n	8005ee8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005ed6:	4b0c      	ldr	r3, [pc, #48]	; (8005f08 <prvInsertBlockIntoFreeList+0xb0>)
 8005ed8:	681a      	ldr	r2, [r3, #0]
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	601a      	str	r2, [r3, #0]
 8005ede:	e003      	b.n	8005ee8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	681a      	ldr	r2, [r3, #0]
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005ee8:	68fa      	ldr	r2, [r7, #12]
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	429a      	cmp	r2, r3
 8005eee:	d002      	beq.n	8005ef6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	687a      	ldr	r2, [r7, #4]
 8005ef4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005ef6:	bf00      	nop
 8005ef8:	3714      	adds	r7, #20
 8005efa:	46bd      	mov	sp, r7
 8005efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f00:	4770      	bx	lr
 8005f02:	bf00      	nop
 8005f04:	20004c68 	.word	0x20004c68
 8005f08:	20004c70 	.word	0x20004c70

08005f0c <_ZNSaIcEC1Ev>:
 8005f0c:	4770      	bx	lr

08005f0e <_ZNSaIcED1Ev>:
 8005f0e:	4770      	bx	lr

08005f10 <_ZNSt11char_traitsIcE4copyEPcPKcj>:
 8005f10:	b10a      	cbz	r2, 8005f16 <_ZNSt11char_traitsIcE4copyEPcPKcj+0x6>
 8005f12:	f000 b9a9 	b.w	8006268 <memcpy>
 8005f16:	4770      	bx	lr

08005f18 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 8005f18:	b508      	push	{r3, lr}
 8005f1a:	680b      	ldr	r3, [r1, #0]
 8005f1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f20:	d302      	bcc.n	8005f28 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x10>
 8005f22:	480d      	ldr	r0, [pc, #52]	; (8005f58 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x40>)
 8005f24:	f000 f943 	bl	80061ae <_ZSt20__throw_length_errorPKc>
 8005f28:	4293      	cmp	r3, r2
 8005f2a:	d90b      	bls.n	8005f44 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 8005f2c:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 8005f30:	ea4f 0042 	mov.w	r0, r2, lsl #1
 8005f34:	d206      	bcs.n	8005f44 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 8005f36:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8005f3a:	bf2a      	itet	cs
 8005f3c:	f06f 4340 	mvncs.w	r3, #3221225472	; 0xc0000000
 8005f40:	6008      	strcc	r0, [r1, #0]
 8005f42:	600b      	strcs	r3, [r1, #0]
 8005f44:	6808      	ldr	r0, [r1, #0]
 8005f46:	3001      	adds	r0, #1
 8005f48:	d501      	bpl.n	8005f4e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x36>
 8005f4a:	f000 f92a 	bl	80061a2 <_ZSt17__throw_bad_allocv>
 8005f4e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8005f52:	f000 b915 	b.w	8006180 <_Znwj>
 8005f56:	bf00      	nop
 8005f58:	0800661c 	.word	0x0800661c

08005f5c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 8005f5c:	f850 3b08 	ldr.w	r3, [r0], #8
 8005f60:	4283      	cmp	r3, r0
 8005f62:	d002      	beq.n	8005f6a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0xe>
 8005f64:	4618      	mov	r0, r3
 8005f66:	f000 b909 	b.w	800617c <_ZdlPv>
 8005f6a:	4770      	bx	lr

08005f6c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>:
 8005f6c:	6840      	ldr	r0, [r0, #4]
 8005f6e:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8005f72:	3901      	subs	r1, #1
 8005f74:	1a09      	subs	r1, r1, r0
 8005f76:	4291      	cmp	r1, r2
 8005f78:	b508      	push	{r3, lr}
 8005f7a:	d202      	bcs.n	8005f82 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc+0x16>
 8005f7c:	4618      	mov	r0, r3
 8005f7e:	f000 f916 	bl	80061ae <_ZSt20__throw_length_errorPKc>
 8005f82:	bd08      	pop	{r3, pc}

08005f84 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
 8005f84:	2a01      	cmp	r2, #1
 8005f86:	b510      	push	{r4, lr}
 8005f88:	d102      	bne.n	8005f90 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xc>
 8005f8a:	780a      	ldrb	r2, [r1, #0]
 8005f8c:	7002      	strb	r2, [r0, #0]
 8005f8e:	bd10      	pop	{r4, pc}
 8005f90:	f7ff ffbe 	bl	8005f10 <_ZNSt11char_traitsIcE4copyEPcPKcj>
 8005f94:	e7fb      	b.n	8005f8e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xa>

08005f96 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
 8005f96:	b508      	push	{r3, lr}
 8005f98:	1a52      	subs	r2, r2, r1
 8005f9a:	f7ff fff3 	bl	8005f84 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8005f9e:	bd08      	pop	{r3, pc}

08005fa0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>:
 8005fa0:	4288      	cmp	r0, r1
 8005fa2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005fa4:	4604      	mov	r4, r0
 8005fa6:	460e      	mov	r6, r1
 8005fa8:	d01e      	beq.n	8005fe8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x48>
 8005faa:	4603      	mov	r3, r0
 8005fac:	684d      	ldr	r5, [r1, #4]
 8005fae:	f853 2b08 	ldr.w	r2, [r3], #8
 8005fb2:	429a      	cmp	r2, r3
 8005fb4:	bf14      	ite	ne
 8005fb6:	6882      	ldrne	r2, [r0, #8]
 8005fb8:	220f      	moveq	r2, #15
 8005fba:	42aa      	cmp	r2, r5
 8005fbc:	d20a      	bcs.n	8005fd4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x34>
 8005fbe:	a901      	add	r1, sp, #4
 8005fc0:	9501      	str	r5, [sp, #4]
 8005fc2:	f7ff ffa9 	bl	8005f18 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8005fc6:	4607      	mov	r7, r0
 8005fc8:	4620      	mov	r0, r4
 8005fca:	f7ff ffc7 	bl	8005f5c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8005fce:	9b01      	ldr	r3, [sp, #4]
 8005fd0:	6027      	str	r7, [r4, #0]
 8005fd2:	60a3      	str	r3, [r4, #8]
 8005fd4:	b125      	cbz	r5, 8005fe0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x40>
 8005fd6:	6831      	ldr	r1, [r6, #0]
 8005fd8:	6820      	ldr	r0, [r4, #0]
 8005fda:	462a      	mov	r2, r5
 8005fdc:	f7ff ffd2 	bl	8005f84 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8005fe0:	6823      	ldr	r3, [r4, #0]
 8005fe2:	6065      	str	r5, [r4, #4]
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	555a      	strb	r2, [r3, r5]
 8005fe8:	b003      	add	sp, #12
 8005fea:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005fec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>:
 8005fec:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8005ff0:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8005ff2:	461f      	mov	r7, r3
 8005ff4:	6843      	ldr	r3, [r0, #4]
 8005ff6:	eb01 0802 	add.w	r8, r1, r2
 8005ffa:	1ab2      	subs	r2, r6, r2
 8005ffc:	441a      	add	r2, r3
 8005ffe:	eba3 0908 	sub.w	r9, r3, r8
 8006002:	4603      	mov	r3, r0
 8006004:	9201      	str	r2, [sp, #4]
 8006006:	f853 2b08 	ldr.w	r2, [r3], #8
 800600a:	429a      	cmp	r2, r3
 800600c:	bf18      	it	ne
 800600e:	6882      	ldrne	r2, [r0, #8]
 8006010:	460d      	mov	r5, r1
 8006012:	bf08      	it	eq
 8006014:	220f      	moveq	r2, #15
 8006016:	a901      	add	r1, sp, #4
 8006018:	4604      	mov	r4, r0
 800601a:	f7ff ff7d 	bl	8005f18 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 800601e:	4682      	mov	sl, r0
 8006020:	b11d      	cbz	r5, 800602a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x3e>
 8006022:	6821      	ldr	r1, [r4, #0]
 8006024:	462a      	mov	r2, r5
 8006026:	f7ff ffad 	bl	8005f84 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800602a:	b137      	cbz	r7, 800603a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x4e>
 800602c:	b12e      	cbz	r6, 800603a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x4e>
 800602e:	4632      	mov	r2, r6
 8006030:	4639      	mov	r1, r7
 8006032:	eb0a 0005 	add.w	r0, sl, r5
 8006036:	f7ff ffa5 	bl	8005f84 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800603a:	f1b9 0f00 	cmp.w	r9, #0
 800603e:	d007      	beq.n	8006050 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x64>
 8006040:	6821      	ldr	r1, [r4, #0]
 8006042:	4435      	add	r5, r6
 8006044:	464a      	mov	r2, r9
 8006046:	4441      	add	r1, r8
 8006048:	eb0a 0005 	add.w	r0, sl, r5
 800604c:	f7ff ff9a 	bl	8005f84 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8006050:	4620      	mov	r0, r4
 8006052:	f7ff ff83 	bl	8005f5c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8006056:	9b01      	ldr	r3, [sp, #4]
 8006058:	f8c4 a000 	str.w	sl, [r4]
 800605c:	60a3      	str	r3, [r4, #8]
 800605e:	b002      	add	sp, #8
 8006060:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08006064 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>:
 8006064:	f100 0208 	add.w	r2, r0, #8
 8006068:	6002      	str	r2, [r0, #0]
 800606a:	2200      	movs	r2, #0
 800606c:	6042      	str	r2, [r0, #4]
 800606e:	7202      	strb	r2, [r0, #8]
 8006070:	4770      	bx	lr

08006072 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
 8006072:	b510      	push	{r4, lr}
 8006074:	4604      	mov	r4, r0
 8006076:	f7ff ff71 	bl	8005f5c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 800607a:	4620      	mov	r0, r4
 800607c:	bd10      	pop	{r4, pc}

0800607e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>:
 800607e:	b510      	push	{r4, lr}
 8006080:	4604      	mov	r4, r0
 8006082:	f7ff ff8d 	bl	8005fa0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>
 8006086:	4620      	mov	r0, r4
 8006088:	bd10      	pop	{r4, pc}

0800608a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>:
 800608a:	6840      	ldr	r0, [r0, #4]
 800608c:	4770      	bx	lr

0800608e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>:
 800608e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006090:	4604      	mov	r4, r0
 8006092:	4623      	mov	r3, r4
 8006094:	6840      	ldr	r0, [r0, #4]
 8006096:	f853 6b08 	ldr.w	r6, [r3], #8
 800609a:	429e      	cmp	r6, r3
 800609c:	bf18      	it	ne
 800609e:	68a3      	ldrne	r3, [r4, #8]
 80060a0:	eb00 0502 	add.w	r5, r0, r2
 80060a4:	bf08      	it	eq
 80060a6:	230f      	moveq	r3, #15
 80060a8:	429d      	cmp	r5, r3
 80060aa:	d80a      	bhi.n	80060c2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x34>
 80060ac:	b112      	cbz	r2, 80060b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x26>
 80060ae:	4430      	add	r0, r6
 80060b0:	f7ff ff68 	bl	8005f84 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 80060b4:	6823      	ldr	r3, [r4, #0]
 80060b6:	6065      	str	r5, [r4, #4]
 80060b8:	2200      	movs	r2, #0
 80060ba:	4620      	mov	r0, r4
 80060bc:	555a      	strb	r2, [r3, r5]
 80060be:	b002      	add	sp, #8
 80060c0:	bd70      	pop	{r4, r5, r6, pc}
 80060c2:	9200      	str	r2, [sp, #0]
 80060c4:	460b      	mov	r3, r1
 80060c6:	2200      	movs	r2, #0
 80060c8:	4601      	mov	r1, r0
 80060ca:	4620      	mov	r0, r4
 80060cc:	f7ff ff8e 	bl	8005fec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 80060d0:	e7f0      	b.n	80060b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x26>
	...

080060d4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc>:
 80060d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80060d6:	4604      	mov	r4, r0
 80060d8:	4608      	mov	r0, r1
 80060da:	460d      	mov	r5, r1
 80060dc:	f7fa f878 	bl	80001d0 <strlen>
 80060e0:	4b06      	ldr	r3, [pc, #24]	; (80060fc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc+0x28>)
 80060e2:	9001      	str	r0, [sp, #4]
 80060e4:	4602      	mov	r2, r0
 80060e6:	2100      	movs	r1, #0
 80060e8:	4620      	mov	r0, r4
 80060ea:	f7ff ff3f 	bl	8005f6c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>
 80060ee:	9a01      	ldr	r2, [sp, #4]
 80060f0:	4629      	mov	r1, r5
 80060f2:	4620      	mov	r0, r4
 80060f4:	f7ff ffcb 	bl	800608e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>
 80060f8:	b003      	add	sp, #12
 80060fa:	bd30      	pop	{r4, r5, pc}
 80060fc:	08006634 	.word	0x08006634

08006100 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>:
 8006100:	6800      	ldr	r0, [r0, #0]
 8006102:	4770      	bx	lr

08006104 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4dataEv>:
 8006104:	6800      	ldr	r0, [r0, #0]
 8006106:	4770      	bx	lr

08006108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>:
 8006108:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800610a:	4604      	mov	r4, r0
 800610c:	4616      	mov	r6, r2
 800610e:	460d      	mov	r5, r1
 8006110:	b919      	cbnz	r1, 800611a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 8006112:	b112      	cbz	r2, 800611a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 8006114:	480d      	ldr	r0, [pc, #52]	; (800614c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x44>)
 8006116:	f000 f847 	bl	80061a8 <_ZSt19__throw_logic_errorPKc>
 800611a:	1b73      	subs	r3, r6, r5
 800611c:	2b0f      	cmp	r3, #15
 800611e:	9301      	str	r3, [sp, #4]
 8006120:	d907      	bls.n	8006132 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x2a>
 8006122:	2200      	movs	r2, #0
 8006124:	a901      	add	r1, sp, #4
 8006126:	4620      	mov	r0, r4
 8006128:	f7ff fef6 	bl	8005f18 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 800612c:	9b01      	ldr	r3, [sp, #4]
 800612e:	6020      	str	r0, [r4, #0]
 8006130:	60a3      	str	r3, [r4, #8]
 8006132:	4632      	mov	r2, r6
 8006134:	4629      	mov	r1, r5
 8006136:	6820      	ldr	r0, [r4, #0]
 8006138:	f7ff ff2d 	bl	8005f96 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
 800613c:	9b01      	ldr	r3, [sp, #4]
 800613e:	6822      	ldr	r2, [r4, #0]
 8006140:	6063      	str	r3, [r4, #4]
 8006142:	2100      	movs	r1, #0
 8006144:	54d1      	strb	r1, [r2, r3]
 8006146:	b002      	add	sp, #8
 8006148:	bd70      	pop	{r4, r5, r6, pc}
 800614a:	bf00      	nop
 800614c:	08006649 	.word	0x08006649

08006150 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>:
 8006150:	b538      	push	{r3, r4, r5, lr}
 8006152:	f100 0308 	add.w	r3, r0, #8
 8006156:	4604      	mov	r4, r0
 8006158:	6003      	str	r3, [r0, #0]
 800615a:	460d      	mov	r5, r1
 800615c:	b159      	cbz	r1, 8006176 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x26>
 800615e:	4608      	mov	r0, r1
 8006160:	f7fa f836 	bl	80001d0 <strlen>
 8006164:	182a      	adds	r2, r5, r0
 8006166:	4620      	mov	r0, r4
 8006168:	f04f 0300 	mov.w	r3, #0
 800616c:	4629      	mov	r1, r5
 800616e:	f7ff ffcb 	bl	8006108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
 8006172:	4620      	mov	r0, r4
 8006174:	bd38      	pop	{r3, r4, r5, pc}
 8006176:	f04f 32ff 	mov.w	r2, #4294967295
 800617a:	e7f4      	b.n	8006166 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x16>

0800617c <_ZdlPv>:
 800617c:	f000 b85e 	b.w	800623c <free>

08006180 <_Znwj>:
 8006180:	2801      	cmp	r0, #1
 8006182:	bf38      	it	cc
 8006184:	2001      	movcc	r0, #1
 8006186:	b510      	push	{r4, lr}
 8006188:	4604      	mov	r4, r0
 800618a:	4620      	mov	r0, r4
 800618c:	f000 f84e 	bl	800622c <malloc>
 8006190:	b930      	cbnz	r0, 80061a0 <_Znwj+0x20>
 8006192:	f000 f80f 	bl	80061b4 <_ZSt15get_new_handlerv>
 8006196:	b908      	cbnz	r0, 800619c <_Znwj+0x1c>
 8006198:	f000 f814 	bl	80061c4 <abort>
 800619c:	4780      	blx	r0
 800619e:	e7f4      	b.n	800618a <_Znwj+0xa>
 80061a0:	bd10      	pop	{r4, pc}

080061a2 <_ZSt17__throw_bad_allocv>:
 80061a2:	b508      	push	{r3, lr}
 80061a4:	f000 f80e 	bl	80061c4 <abort>

080061a8 <_ZSt19__throw_logic_errorPKc>:
 80061a8:	b508      	push	{r3, lr}
 80061aa:	f000 f80b 	bl	80061c4 <abort>

080061ae <_ZSt20__throw_length_errorPKc>:
 80061ae:	b508      	push	{r3, lr}
 80061b0:	f000 f808 	bl	80061c4 <abort>

080061b4 <_ZSt15get_new_handlerv>:
 80061b4:	4b02      	ldr	r3, [pc, #8]	; (80061c0 <_ZSt15get_new_handlerv+0xc>)
 80061b6:	6818      	ldr	r0, [r3, #0]
 80061b8:	f3bf 8f5b 	dmb	ish
 80061bc:	4770      	bx	lr
 80061be:	bf00      	nop
 80061c0:	20004c88 	.word	0x20004c88

080061c4 <abort>:
 80061c4:	b508      	push	{r3, lr}
 80061c6:	2006      	movs	r0, #6
 80061c8:	f000 f9b0 	bl	800652c <raise>
 80061cc:	2001      	movs	r0, #1
 80061ce:	f7fa fc87 	bl	8000ae0 <_exit>
	...

080061d4 <__errno>:
 80061d4:	4b01      	ldr	r3, [pc, #4]	; (80061dc <__errno+0x8>)
 80061d6:	6818      	ldr	r0, [r3, #0]
 80061d8:	4770      	bx	lr
 80061da:	bf00      	nop
 80061dc:	20000010 	.word	0x20000010

080061e0 <__libc_init_array>:
 80061e0:	b570      	push	{r4, r5, r6, lr}
 80061e2:	4d0d      	ldr	r5, [pc, #52]	; (8006218 <__libc_init_array+0x38>)
 80061e4:	4c0d      	ldr	r4, [pc, #52]	; (800621c <__libc_init_array+0x3c>)
 80061e6:	1b64      	subs	r4, r4, r5
 80061e8:	10a4      	asrs	r4, r4, #2
 80061ea:	2600      	movs	r6, #0
 80061ec:	42a6      	cmp	r6, r4
 80061ee:	d109      	bne.n	8006204 <__libc_init_array+0x24>
 80061f0:	4d0b      	ldr	r5, [pc, #44]	; (8006220 <__libc_init_array+0x40>)
 80061f2:	4c0c      	ldr	r4, [pc, #48]	; (8006224 <__libc_init_array+0x44>)
 80061f4:	f000 f9c2 	bl	800657c <_init>
 80061f8:	1b64      	subs	r4, r4, r5
 80061fa:	10a4      	asrs	r4, r4, #2
 80061fc:	2600      	movs	r6, #0
 80061fe:	42a6      	cmp	r6, r4
 8006200:	d105      	bne.n	800620e <__libc_init_array+0x2e>
 8006202:	bd70      	pop	{r4, r5, r6, pc}
 8006204:	f855 3b04 	ldr.w	r3, [r5], #4
 8006208:	4798      	blx	r3
 800620a:	3601      	adds	r6, #1
 800620c:	e7ee      	b.n	80061ec <__libc_init_array+0xc>
 800620e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006212:	4798      	blx	r3
 8006214:	3601      	adds	r6, #1
 8006216:	e7f2      	b.n	80061fe <__libc_init_array+0x1e>
 8006218:	080066dc 	.word	0x080066dc
 800621c:	080066dc 	.word	0x080066dc
 8006220:	080066dc 	.word	0x080066dc
 8006224:	080066e4 	.word	0x080066e4

08006228 <__retarget_lock_acquire_recursive>:
 8006228:	4770      	bx	lr

0800622a <__retarget_lock_release_recursive>:
 800622a:	4770      	bx	lr

0800622c <malloc>:
 800622c:	4b02      	ldr	r3, [pc, #8]	; (8006238 <malloc+0xc>)
 800622e:	4601      	mov	r1, r0
 8006230:	6818      	ldr	r0, [r3, #0]
 8006232:	f000 b87f 	b.w	8006334 <_malloc_r>
 8006236:	bf00      	nop
 8006238:	20000010 	.word	0x20000010

0800623c <free>:
 800623c:	4b02      	ldr	r3, [pc, #8]	; (8006248 <free+0xc>)
 800623e:	4601      	mov	r1, r0
 8006240:	6818      	ldr	r0, [r3, #0]
 8006242:	f000 b827 	b.w	8006294 <_free_r>
 8006246:	bf00      	nop
 8006248:	20000010 	.word	0x20000010

0800624c <memcmp>:
 800624c:	b530      	push	{r4, r5, lr}
 800624e:	3901      	subs	r1, #1
 8006250:	2400      	movs	r4, #0
 8006252:	42a2      	cmp	r2, r4
 8006254:	d101      	bne.n	800625a <memcmp+0xe>
 8006256:	2000      	movs	r0, #0
 8006258:	e005      	b.n	8006266 <memcmp+0x1a>
 800625a:	5d03      	ldrb	r3, [r0, r4]
 800625c:	3401      	adds	r4, #1
 800625e:	5d0d      	ldrb	r5, [r1, r4]
 8006260:	42ab      	cmp	r3, r5
 8006262:	d0f6      	beq.n	8006252 <memcmp+0x6>
 8006264:	1b58      	subs	r0, r3, r5
 8006266:	bd30      	pop	{r4, r5, pc}

08006268 <memcpy>:
 8006268:	440a      	add	r2, r1
 800626a:	4291      	cmp	r1, r2
 800626c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006270:	d100      	bne.n	8006274 <memcpy+0xc>
 8006272:	4770      	bx	lr
 8006274:	b510      	push	{r4, lr}
 8006276:	f811 4b01 	ldrb.w	r4, [r1], #1
 800627a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800627e:	4291      	cmp	r1, r2
 8006280:	d1f9      	bne.n	8006276 <memcpy+0xe>
 8006282:	bd10      	pop	{r4, pc}

08006284 <memset>:
 8006284:	4402      	add	r2, r0
 8006286:	4603      	mov	r3, r0
 8006288:	4293      	cmp	r3, r2
 800628a:	d100      	bne.n	800628e <memset+0xa>
 800628c:	4770      	bx	lr
 800628e:	f803 1b01 	strb.w	r1, [r3], #1
 8006292:	e7f9      	b.n	8006288 <memset+0x4>

08006294 <_free_r>:
 8006294:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006296:	2900      	cmp	r1, #0
 8006298:	d048      	beq.n	800632c <_free_r+0x98>
 800629a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800629e:	9001      	str	r0, [sp, #4]
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	f1a1 0404 	sub.w	r4, r1, #4
 80062a6:	bfb8      	it	lt
 80062a8:	18e4      	addlt	r4, r4, r3
 80062aa:	f000 f95b 	bl	8006564 <__malloc_lock>
 80062ae:	4a20      	ldr	r2, [pc, #128]	; (8006330 <_free_r+0x9c>)
 80062b0:	9801      	ldr	r0, [sp, #4]
 80062b2:	6813      	ldr	r3, [r2, #0]
 80062b4:	4615      	mov	r5, r2
 80062b6:	b933      	cbnz	r3, 80062c6 <_free_r+0x32>
 80062b8:	6063      	str	r3, [r4, #4]
 80062ba:	6014      	str	r4, [r2, #0]
 80062bc:	b003      	add	sp, #12
 80062be:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80062c2:	f000 b955 	b.w	8006570 <__malloc_unlock>
 80062c6:	42a3      	cmp	r3, r4
 80062c8:	d90b      	bls.n	80062e2 <_free_r+0x4e>
 80062ca:	6821      	ldr	r1, [r4, #0]
 80062cc:	1862      	adds	r2, r4, r1
 80062ce:	4293      	cmp	r3, r2
 80062d0:	bf04      	itt	eq
 80062d2:	681a      	ldreq	r2, [r3, #0]
 80062d4:	685b      	ldreq	r3, [r3, #4]
 80062d6:	6063      	str	r3, [r4, #4]
 80062d8:	bf04      	itt	eq
 80062da:	1852      	addeq	r2, r2, r1
 80062dc:	6022      	streq	r2, [r4, #0]
 80062de:	602c      	str	r4, [r5, #0]
 80062e0:	e7ec      	b.n	80062bc <_free_r+0x28>
 80062e2:	461a      	mov	r2, r3
 80062e4:	685b      	ldr	r3, [r3, #4]
 80062e6:	b10b      	cbz	r3, 80062ec <_free_r+0x58>
 80062e8:	42a3      	cmp	r3, r4
 80062ea:	d9fa      	bls.n	80062e2 <_free_r+0x4e>
 80062ec:	6811      	ldr	r1, [r2, #0]
 80062ee:	1855      	adds	r5, r2, r1
 80062f0:	42a5      	cmp	r5, r4
 80062f2:	d10b      	bne.n	800630c <_free_r+0x78>
 80062f4:	6824      	ldr	r4, [r4, #0]
 80062f6:	4421      	add	r1, r4
 80062f8:	1854      	adds	r4, r2, r1
 80062fa:	42a3      	cmp	r3, r4
 80062fc:	6011      	str	r1, [r2, #0]
 80062fe:	d1dd      	bne.n	80062bc <_free_r+0x28>
 8006300:	681c      	ldr	r4, [r3, #0]
 8006302:	685b      	ldr	r3, [r3, #4]
 8006304:	6053      	str	r3, [r2, #4]
 8006306:	4421      	add	r1, r4
 8006308:	6011      	str	r1, [r2, #0]
 800630a:	e7d7      	b.n	80062bc <_free_r+0x28>
 800630c:	d902      	bls.n	8006314 <_free_r+0x80>
 800630e:	230c      	movs	r3, #12
 8006310:	6003      	str	r3, [r0, #0]
 8006312:	e7d3      	b.n	80062bc <_free_r+0x28>
 8006314:	6825      	ldr	r5, [r4, #0]
 8006316:	1961      	adds	r1, r4, r5
 8006318:	428b      	cmp	r3, r1
 800631a:	bf04      	itt	eq
 800631c:	6819      	ldreq	r1, [r3, #0]
 800631e:	685b      	ldreq	r3, [r3, #4]
 8006320:	6063      	str	r3, [r4, #4]
 8006322:	bf04      	itt	eq
 8006324:	1949      	addeq	r1, r1, r5
 8006326:	6021      	streq	r1, [r4, #0]
 8006328:	6054      	str	r4, [r2, #4]
 800632a:	e7c7      	b.n	80062bc <_free_r+0x28>
 800632c:	b003      	add	sp, #12
 800632e:	bd30      	pop	{r4, r5, pc}
 8006330:	20004c8c 	.word	0x20004c8c

08006334 <_malloc_r>:
 8006334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006336:	1ccd      	adds	r5, r1, #3
 8006338:	f025 0503 	bic.w	r5, r5, #3
 800633c:	3508      	adds	r5, #8
 800633e:	2d0c      	cmp	r5, #12
 8006340:	bf38      	it	cc
 8006342:	250c      	movcc	r5, #12
 8006344:	2d00      	cmp	r5, #0
 8006346:	4606      	mov	r6, r0
 8006348:	db01      	blt.n	800634e <_malloc_r+0x1a>
 800634a:	42a9      	cmp	r1, r5
 800634c:	d903      	bls.n	8006356 <_malloc_r+0x22>
 800634e:	230c      	movs	r3, #12
 8006350:	6033      	str	r3, [r6, #0]
 8006352:	2000      	movs	r0, #0
 8006354:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006356:	f000 f905 	bl	8006564 <__malloc_lock>
 800635a:	4921      	ldr	r1, [pc, #132]	; (80063e0 <_malloc_r+0xac>)
 800635c:	680a      	ldr	r2, [r1, #0]
 800635e:	4614      	mov	r4, r2
 8006360:	b99c      	cbnz	r4, 800638a <_malloc_r+0x56>
 8006362:	4f20      	ldr	r7, [pc, #128]	; (80063e4 <_malloc_r+0xb0>)
 8006364:	683b      	ldr	r3, [r7, #0]
 8006366:	b923      	cbnz	r3, 8006372 <_malloc_r+0x3e>
 8006368:	4621      	mov	r1, r4
 800636a:	4630      	mov	r0, r6
 800636c:	f000 f8a6 	bl	80064bc <_sbrk_r>
 8006370:	6038      	str	r0, [r7, #0]
 8006372:	4629      	mov	r1, r5
 8006374:	4630      	mov	r0, r6
 8006376:	f000 f8a1 	bl	80064bc <_sbrk_r>
 800637a:	1c43      	adds	r3, r0, #1
 800637c:	d123      	bne.n	80063c6 <_malloc_r+0x92>
 800637e:	230c      	movs	r3, #12
 8006380:	6033      	str	r3, [r6, #0]
 8006382:	4630      	mov	r0, r6
 8006384:	f000 f8f4 	bl	8006570 <__malloc_unlock>
 8006388:	e7e3      	b.n	8006352 <_malloc_r+0x1e>
 800638a:	6823      	ldr	r3, [r4, #0]
 800638c:	1b5b      	subs	r3, r3, r5
 800638e:	d417      	bmi.n	80063c0 <_malloc_r+0x8c>
 8006390:	2b0b      	cmp	r3, #11
 8006392:	d903      	bls.n	800639c <_malloc_r+0x68>
 8006394:	6023      	str	r3, [r4, #0]
 8006396:	441c      	add	r4, r3
 8006398:	6025      	str	r5, [r4, #0]
 800639a:	e004      	b.n	80063a6 <_malloc_r+0x72>
 800639c:	6863      	ldr	r3, [r4, #4]
 800639e:	42a2      	cmp	r2, r4
 80063a0:	bf0c      	ite	eq
 80063a2:	600b      	streq	r3, [r1, #0]
 80063a4:	6053      	strne	r3, [r2, #4]
 80063a6:	4630      	mov	r0, r6
 80063a8:	f000 f8e2 	bl	8006570 <__malloc_unlock>
 80063ac:	f104 000b 	add.w	r0, r4, #11
 80063b0:	1d23      	adds	r3, r4, #4
 80063b2:	f020 0007 	bic.w	r0, r0, #7
 80063b6:	1ac2      	subs	r2, r0, r3
 80063b8:	d0cc      	beq.n	8006354 <_malloc_r+0x20>
 80063ba:	1a1b      	subs	r3, r3, r0
 80063bc:	50a3      	str	r3, [r4, r2]
 80063be:	e7c9      	b.n	8006354 <_malloc_r+0x20>
 80063c0:	4622      	mov	r2, r4
 80063c2:	6864      	ldr	r4, [r4, #4]
 80063c4:	e7cc      	b.n	8006360 <_malloc_r+0x2c>
 80063c6:	1cc4      	adds	r4, r0, #3
 80063c8:	f024 0403 	bic.w	r4, r4, #3
 80063cc:	42a0      	cmp	r0, r4
 80063ce:	d0e3      	beq.n	8006398 <_malloc_r+0x64>
 80063d0:	1a21      	subs	r1, r4, r0
 80063d2:	4630      	mov	r0, r6
 80063d4:	f000 f872 	bl	80064bc <_sbrk_r>
 80063d8:	3001      	adds	r0, #1
 80063da:	d1dd      	bne.n	8006398 <_malloc_r+0x64>
 80063dc:	e7cf      	b.n	800637e <_malloc_r+0x4a>
 80063de:	bf00      	nop
 80063e0:	20004c8c 	.word	0x20004c8c
 80063e4:	20004c90 	.word	0x20004c90

080063e8 <cleanup_glue>:
 80063e8:	b538      	push	{r3, r4, r5, lr}
 80063ea:	460c      	mov	r4, r1
 80063ec:	6809      	ldr	r1, [r1, #0]
 80063ee:	4605      	mov	r5, r0
 80063f0:	b109      	cbz	r1, 80063f6 <cleanup_glue+0xe>
 80063f2:	f7ff fff9 	bl	80063e8 <cleanup_glue>
 80063f6:	4621      	mov	r1, r4
 80063f8:	4628      	mov	r0, r5
 80063fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80063fe:	f7ff bf49 	b.w	8006294 <_free_r>
	...

08006404 <_reclaim_reent>:
 8006404:	4b2c      	ldr	r3, [pc, #176]	; (80064b8 <_reclaim_reent+0xb4>)
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	4283      	cmp	r3, r0
 800640a:	b570      	push	{r4, r5, r6, lr}
 800640c:	4604      	mov	r4, r0
 800640e:	d051      	beq.n	80064b4 <_reclaim_reent+0xb0>
 8006410:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8006412:	b143      	cbz	r3, 8006426 <_reclaim_reent+0x22>
 8006414:	68db      	ldr	r3, [r3, #12]
 8006416:	2b00      	cmp	r3, #0
 8006418:	d14a      	bne.n	80064b0 <_reclaim_reent+0xac>
 800641a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800641c:	6819      	ldr	r1, [r3, #0]
 800641e:	b111      	cbz	r1, 8006426 <_reclaim_reent+0x22>
 8006420:	4620      	mov	r0, r4
 8006422:	f7ff ff37 	bl	8006294 <_free_r>
 8006426:	6961      	ldr	r1, [r4, #20]
 8006428:	b111      	cbz	r1, 8006430 <_reclaim_reent+0x2c>
 800642a:	4620      	mov	r0, r4
 800642c:	f7ff ff32 	bl	8006294 <_free_r>
 8006430:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8006432:	b111      	cbz	r1, 800643a <_reclaim_reent+0x36>
 8006434:	4620      	mov	r0, r4
 8006436:	f7ff ff2d 	bl	8006294 <_free_r>
 800643a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800643c:	b111      	cbz	r1, 8006444 <_reclaim_reent+0x40>
 800643e:	4620      	mov	r0, r4
 8006440:	f7ff ff28 	bl	8006294 <_free_r>
 8006444:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8006446:	b111      	cbz	r1, 800644e <_reclaim_reent+0x4a>
 8006448:	4620      	mov	r0, r4
 800644a:	f7ff ff23 	bl	8006294 <_free_r>
 800644e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8006450:	b111      	cbz	r1, 8006458 <_reclaim_reent+0x54>
 8006452:	4620      	mov	r0, r4
 8006454:	f7ff ff1e 	bl	8006294 <_free_r>
 8006458:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800645a:	b111      	cbz	r1, 8006462 <_reclaim_reent+0x5e>
 800645c:	4620      	mov	r0, r4
 800645e:	f7ff ff19 	bl	8006294 <_free_r>
 8006462:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8006464:	b111      	cbz	r1, 800646c <_reclaim_reent+0x68>
 8006466:	4620      	mov	r0, r4
 8006468:	f7ff ff14 	bl	8006294 <_free_r>
 800646c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800646e:	b111      	cbz	r1, 8006476 <_reclaim_reent+0x72>
 8006470:	4620      	mov	r0, r4
 8006472:	f7ff ff0f 	bl	8006294 <_free_r>
 8006476:	69a3      	ldr	r3, [r4, #24]
 8006478:	b1e3      	cbz	r3, 80064b4 <_reclaim_reent+0xb0>
 800647a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800647c:	4620      	mov	r0, r4
 800647e:	4798      	blx	r3
 8006480:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8006482:	b1b9      	cbz	r1, 80064b4 <_reclaim_reent+0xb0>
 8006484:	4620      	mov	r0, r4
 8006486:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800648a:	f7ff bfad 	b.w	80063e8 <cleanup_glue>
 800648e:	5949      	ldr	r1, [r1, r5]
 8006490:	b941      	cbnz	r1, 80064a4 <_reclaim_reent+0xa0>
 8006492:	3504      	adds	r5, #4
 8006494:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006496:	2d80      	cmp	r5, #128	; 0x80
 8006498:	68d9      	ldr	r1, [r3, #12]
 800649a:	d1f8      	bne.n	800648e <_reclaim_reent+0x8a>
 800649c:	4620      	mov	r0, r4
 800649e:	f7ff fef9 	bl	8006294 <_free_r>
 80064a2:	e7ba      	b.n	800641a <_reclaim_reent+0x16>
 80064a4:	680e      	ldr	r6, [r1, #0]
 80064a6:	4620      	mov	r0, r4
 80064a8:	f7ff fef4 	bl	8006294 <_free_r>
 80064ac:	4631      	mov	r1, r6
 80064ae:	e7ef      	b.n	8006490 <_reclaim_reent+0x8c>
 80064b0:	2500      	movs	r5, #0
 80064b2:	e7ef      	b.n	8006494 <_reclaim_reent+0x90>
 80064b4:	bd70      	pop	{r4, r5, r6, pc}
 80064b6:	bf00      	nop
 80064b8:	20000010 	.word	0x20000010

080064bc <_sbrk_r>:
 80064bc:	b538      	push	{r3, r4, r5, lr}
 80064be:	4d06      	ldr	r5, [pc, #24]	; (80064d8 <_sbrk_r+0x1c>)
 80064c0:	2300      	movs	r3, #0
 80064c2:	4604      	mov	r4, r0
 80064c4:	4608      	mov	r0, r1
 80064c6:	602b      	str	r3, [r5, #0]
 80064c8:	f7fa fb14 	bl	8000af4 <_sbrk>
 80064cc:	1c43      	adds	r3, r0, #1
 80064ce:	d102      	bne.n	80064d6 <_sbrk_r+0x1a>
 80064d0:	682b      	ldr	r3, [r5, #0]
 80064d2:	b103      	cbz	r3, 80064d6 <_sbrk_r+0x1a>
 80064d4:	6023      	str	r3, [r4, #0]
 80064d6:	bd38      	pop	{r3, r4, r5, pc}
 80064d8:	20004d2c 	.word	0x20004d2c

080064dc <_raise_r>:
 80064dc:	291f      	cmp	r1, #31
 80064de:	b538      	push	{r3, r4, r5, lr}
 80064e0:	4604      	mov	r4, r0
 80064e2:	460d      	mov	r5, r1
 80064e4:	d904      	bls.n	80064f0 <_raise_r+0x14>
 80064e6:	2316      	movs	r3, #22
 80064e8:	6003      	str	r3, [r0, #0]
 80064ea:	f04f 30ff 	mov.w	r0, #4294967295
 80064ee:	bd38      	pop	{r3, r4, r5, pc}
 80064f0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80064f2:	b112      	cbz	r2, 80064fa <_raise_r+0x1e>
 80064f4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80064f8:	b94b      	cbnz	r3, 800650e <_raise_r+0x32>
 80064fa:	4620      	mov	r0, r4
 80064fc:	f000 f830 	bl	8006560 <_getpid_r>
 8006500:	462a      	mov	r2, r5
 8006502:	4601      	mov	r1, r0
 8006504:	4620      	mov	r0, r4
 8006506:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800650a:	f000 b817 	b.w	800653c <_kill_r>
 800650e:	2b01      	cmp	r3, #1
 8006510:	d00a      	beq.n	8006528 <_raise_r+0x4c>
 8006512:	1c59      	adds	r1, r3, #1
 8006514:	d103      	bne.n	800651e <_raise_r+0x42>
 8006516:	2316      	movs	r3, #22
 8006518:	6003      	str	r3, [r0, #0]
 800651a:	2001      	movs	r0, #1
 800651c:	e7e7      	b.n	80064ee <_raise_r+0x12>
 800651e:	2400      	movs	r4, #0
 8006520:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006524:	4628      	mov	r0, r5
 8006526:	4798      	blx	r3
 8006528:	2000      	movs	r0, #0
 800652a:	e7e0      	b.n	80064ee <_raise_r+0x12>

0800652c <raise>:
 800652c:	4b02      	ldr	r3, [pc, #8]	; (8006538 <raise+0xc>)
 800652e:	4601      	mov	r1, r0
 8006530:	6818      	ldr	r0, [r3, #0]
 8006532:	f7ff bfd3 	b.w	80064dc <_raise_r>
 8006536:	bf00      	nop
 8006538:	20000010 	.word	0x20000010

0800653c <_kill_r>:
 800653c:	b538      	push	{r3, r4, r5, lr}
 800653e:	4d07      	ldr	r5, [pc, #28]	; (800655c <_kill_r+0x20>)
 8006540:	2300      	movs	r3, #0
 8006542:	4604      	mov	r4, r0
 8006544:	4608      	mov	r0, r1
 8006546:	4611      	mov	r1, r2
 8006548:	602b      	str	r3, [r5, #0]
 800654a:	f7fa fab9 	bl	8000ac0 <_kill>
 800654e:	1c43      	adds	r3, r0, #1
 8006550:	d102      	bne.n	8006558 <_kill_r+0x1c>
 8006552:	682b      	ldr	r3, [r5, #0]
 8006554:	b103      	cbz	r3, 8006558 <_kill_r+0x1c>
 8006556:	6023      	str	r3, [r4, #0]
 8006558:	bd38      	pop	{r3, r4, r5, pc}
 800655a:	bf00      	nop
 800655c:	20004d2c 	.word	0x20004d2c

08006560 <_getpid_r>:
 8006560:	f7fa baa6 	b.w	8000ab0 <_getpid>

08006564 <__malloc_lock>:
 8006564:	4801      	ldr	r0, [pc, #4]	; (800656c <__malloc_lock+0x8>)
 8006566:	f7ff be5f 	b.w	8006228 <__retarget_lock_acquire_recursive>
 800656a:	bf00      	nop
 800656c:	20004d24 	.word	0x20004d24

08006570 <__malloc_unlock>:
 8006570:	4801      	ldr	r0, [pc, #4]	; (8006578 <__malloc_unlock+0x8>)
 8006572:	f7ff be5a 	b.w	800622a <__retarget_lock_release_recursive>
 8006576:	bf00      	nop
 8006578:	20004d24 	.word	0x20004d24

0800657c <_init>:
 800657c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800657e:	bf00      	nop
 8006580:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006582:	bc08      	pop	{r3}
 8006584:	469e      	mov	lr, r3
 8006586:	4770      	bx	lr

08006588 <_fini>:
 8006588:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800658a:	bf00      	nop
 800658c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800658e:	bc08      	pop	{r3}
 8006590:	469e      	mov	lr, r3
 8006592:	4770      	bx	lr
